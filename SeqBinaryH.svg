<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="645.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="645.00"> </text><svg id="frames" x="10" width="1180" total_samples="817448"><g><title>QUEUE_TEST.exe`QUEUE_TEST::collisionhandling::fast_forward (179 samples, 0.02%)</title><rect x="0.0484%" y="341" width="0.0219%" height="15" fill="rgb(227,0,7)" fg:x="396" fg:w="179"/><text x="0.2984%" y="351.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::vectors::impl$6::add_assign (171 samples, 0.02%)</title><rect x="0.0494%" y="325" width="0.0209%" height="15" fill="rgb(217,0,24)" fg:x="404" fg:w="171"/><text x="0.2994%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::collisionhandling::beta2 (135 samples, 0.02%)</title><rect x="0.1357%" y="293" width="0.0165%" height="15" fill="rgb(221,193,54)" fg:x="1109" fg:w="135"/><text x="0.3857%" y="303.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::collisionhandling::b_and_k2 (391 samples, 0.05%)</title><rect x="0.1096%" y="309" width="0.0478%" height="15" fill="rgb(248,212,6)" fg:x="896" fg:w="391"/><text x="0.3596%" y="319.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::particle::Particle::relative_speed (748 samples, 0.09%)</title><rect x="0.1574%" y="309" width="0.0915%" height="15" fill="rgb(208,68,35)" fg:x="1287" fg:w="748"/><text x="0.4074%" y="319.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::vectors::impl$7::sub (748 samples, 0.09%)</title><rect x="0.1574%" y="293" width="0.0915%" height="15" fill="rgb(232,128,0)" fg:x="1287" fg:w="748"/><text x="0.4074%" y="303.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::vectors::impl$10::div (648 samples, 0.08%)</title><rect x="0.1697%" y="277" width="0.0793%" height="15" fill="rgb(207,160,47)" fg:x="1387" fg:w="648"/><text x="0.4197%" y="287.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::vectors::square (112 samples, 0.01%)</title><rect x="0.2352%" y="261" width="0.0137%" height="15" fill="rgb(228,23,34)" fg:x="1923" fg:w="112"/><text x="0.4852%" y="271.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::collisionhandling::compute_acc (1,668 samples, 0.20%)</title><rect x="0.0718%" y="325" width="0.2040%" height="15" fill="rgb(218,30,26)" fg:x="587" fg:w="1668"/><text x="0.3218%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::collisionhandling::omega_0_from_k (105 samples, 0.01%)</title><rect x="0.3386%" y="293" width="0.0128%" height="15" fill="rgb(220,122,19)" fg:x="2768" fg:w="105"/><text x="0.5886%" y="303.50"></text></g><g><title>QUEUE_TEST.exe`std::f64::impl$0::sqrt (105 samples, 0.01%)</title><rect x="0.3386%" y="277" width="0.0128%" height="15" fill="rgb(250,228,42)" fg:x="2768" fg:w="105"/><text x="0.5886%" y="287.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::collisionhandling::omega_l (592 samples, 0.07%)</title><rect x="0.3118%" y="309" width="0.0724%" height="15" fill="rgb(240,193,28)" fg:x="2549" fg:w="592"/><text x="0.5618%" y="319.50"></text></g><g><title>QUEUE_TEST.exe`std::f64::impl$0::sqrt (268 samples, 0.03%)</title><rect x="0.3515%" y="293" width="0.0328%" height="15" fill="rgb(216,20,37)" fg:x="2873" fg:w="268"/><text x="0.6015%" y="303.50"></text></g><g><title>QUEUE_TEST.exe`core::f64::impl$0::max (262 samples, 0.03%)</title><rect x="0.3842%" y="309" width="0.0321%" height="15" fill="rgb(206,188,39)" fg:x="3141" fg:w="262"/><text x="0.6342%" y="319.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::collisionhandling::get_next_time (1,405 samples, 0.17%)</title><rect x="0.2759%" y="325" width="0.1719%" height="15" fill="rgb(217,207,13)" fg:x="2255" fg:w="1405"/><text x="0.5259%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`core::f64::impl$0::min (257 samples, 0.03%)</title><rect x="0.4163%" y="309" width="0.0314%" height="15" fill="rgb(231,73,38)" fg:x="3403" fg:w="257"/><text x="0.6663%" y="319.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::collisionhandling::process_pair_get_dv (3,181 samples, 0.39%)</title><rect x="0.0703%" y="341" width="0.3891%" height="15" fill="rgb(225,20,46)" fg:x="575" fg:w="3181"/><text x="0.3203%" y="351.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::vectors::impl$12::mul (96 samples, 0.01%)</title><rect x="0.4477%" y="325" width="0.0117%" height="15" fill="rgb(210,31,41)" fg:x="3660" fg:w="96"/><text x="0.6977%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::collisionhandling::process_collision (3,729 samples, 0.46%)</title><rect x="0.0459%" y="357" width="0.4562%" height="15" fill="rgb(221,200,47)" fg:x="375" fg:w="3729"/><text x="0.2959%" y="367.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::vectors::impl$7::sub (303 samples, 0.04%)</title><rect x="0.4650%" y="341" width="0.0371%" height="15" fill="rgb(226,26,5)" fg:x="3801" fg:w="303"/><text x="0.7150%" y="351.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::csvreader::Rec::p1 (168 samples, 0.02%)</title><rect x="0.5021%" y="357" width="0.0206%" height="15" fill="rgb(249,33,26)" fg:x="4104" fg:w="168"/><text x="0.7521%" y="367.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::particle::Particle::new (160 samples, 0.02%)</title><rect x="0.5030%" y="341" width="0.0196%" height="15" fill="rgb(235,183,28)" fg:x="4112" fg:w="160"/><text x="0.7530%" y="351.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::particle::Particle::mass_from_radius (148 samples, 0.02%)</title><rect x="0.5045%" y="325" width="0.0181%" height="15" fill="rgb(221,5,38)" fg:x="4124" fg:w="148"/><text x="0.7545%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::binary_heap::BinaryHeap&lt;ref$&lt;QUEUE_TEST::KeyVal&gt;,alloc::alloc::Global&gt;::sift_up (776 samples, 0.09%)</title><rect x="0.5920%" y="277" width="0.0949%" height="15" fill="rgb(247,18,42)" fg:x="4839" fg:w="776"/><text x="0.8420%" y="287.50"></text></g><g><title>QUEUE_TEST.exe`core::cmp::impls::impl$10::le (103 samples, 0.01%)</title><rect x="0.6743%" y="261" width="0.0126%" height="15" fill="rgb(241,131,45)" fg:x="5512" fg:w="103"/><text x="0.9243%" y="271.50"></text></g><g><title>QUEUE_TEST.exe`core::cmp::impls::impl$10::le (101 samples, 0.01%)</title><rect x="0.6745%" y="245" width="0.0124%" height="15" fill="rgb(249,31,29)" fg:x="5514" fg:w="101"/><text x="0.9245%" y="255.50"></text></g><g><title>QUEUE_TEST.exe`core::cmp::PartialOrd::le (101 samples, 0.01%)</title><rect x="0.6745%" y="229" width="0.0124%" height="15" fill="rgb(225,111,53)" fg:x="5514" fg:w="101"/><text x="0.9245%" y="239.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::impl$1::partial_cmp (101 samples, 0.01%)</title><rect x="0.6745%" y="213" width="0.0124%" height="15" fill="rgb(238,160,17)" fg:x="5514" fg:w="101"/><text x="0.9245%" y="223.50"></text></g><g><title>QUEUE_TEST.exe`core::intrinsics::copy_nonoverlapping (750 samples, 0.09%)</title><rect x="0.6869%" y="261" width="0.0917%" height="15" fill="rgb(214,148,48)" fg:x="5615" fg:w="750"/><text x="0.9369%" y="271.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::binary_heap::Hole&lt;ref$&lt;QUEUE_TEST::KeyVal&gt; &gt;::move_to (758 samples, 0.09%)</title><rect x="0.6869%" y="277" width="0.0927%" height="15" fill="rgb(232,36,49)" fg:x="5615" fg:w="758"/><text x="0.9369%" y="287.50"></text></g><g><title>QUEUE_TEST.exe`core::cmp::impls::impl$10::le (6,235 samples, 0.76%)</title><rect x="0.7796%" y="277" width="0.7627%" height="15" fill="rgb(209,103,24)" fg:x="6373" fg:w="6235"/><text x="1.0296%" y="287.50"></text></g><g><title>QUEUE_TEST.exe`core::cmp::impls::impl$10::le (5,294 samples, 0.65%)</title><rect x="0.8947%" y="261" width="0.6476%" height="15" fill="rgb(229,88,8)" fg:x="7314" fg:w="5294"/><text x="1.1447%" y="271.50"></text></g><g><title>QUEUE_TEST.exe`core::cmp::PartialOrd::le (5,294 samples, 0.65%)</title><rect x="0.8947%" y="245" width="0.6476%" height="15" fill="rgb(213,181,19)" fg:x="7314" fg:w="5294"/><text x="1.1447%" y="255.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::impl$1::partial_cmp (4,818 samples, 0.59%)</title><rect x="0.9530%" y="229" width="0.5894%" height="15" fill="rgb(254,191,54)" fg:x="7790" fg:w="4818"/><text x="1.2030%" y="239.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::impl$0::cmp (4,818 samples, 0.59%)</title><rect x="0.9530%" y="213" width="0.5894%" height="15" fill="rgb(241,83,37)" fg:x="7790" fg:w="4818"/><text x="1.2030%" y="223.50"></text></g><g><title>QUEUE_TEST.exe`ordered_float::impl$6::cmp(ordered_float::OrderedFloat&lt;f64&gt;*, ordered_float::OrderedFloat (4,818 samples, 0.59%)</title><rect x="0.9530%" y="197" width="0.5894%" height="15" fill="rgb(233,36,39)" fg:x="7790" fg:w="4818"/><text x="1.2030%" y="207.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::binary_heap::BinaryHeap&lt;ref$&lt;QUEUE_TEST::KeyVal&gt;,alloc::alloc::Global&gt;::sift_down_to_bottom (8,211 samples, 1.00%)</title><rect x="0.5405%" y="293" width="1.0045%" height="15" fill="rgb(226,3,54)" fg:x="4418" fg:w="8211"/><text x="0.7905%" y="303.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::impl$5::pop(alloc::collections::binary_heap::BinaryHeap&lt;ref$ (8,331 samples, 1.02%)</title><rect x="0.5280%" y="357" width="1.0191%" height="15" fill="rgb(245,192,40)" fg:x="4316" fg:w="8331"/><text x="0.7780%" y="367.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::binary_heap::BinaryHeap&lt;ref$&lt;QUEUE_TEST::KeyVal&gt;,alloc::alloc::Global&gt;::pop (8,331 samples, 1.02%)</title><rect x="0.5280%" y="341" width="1.0191%" height="15" fill="rgb(238,167,29)" fg:x="4316" fg:w="8331"/><text x="0.7780%" y="351.50"></text></g><g><title>QUEUE_TEST.exe`enum2$&lt;core::option::Option&lt;ref$&lt;QUEUE_TEST::KeyVal&gt; &gt; &gt;::map(enum2$&lt;core::option::Option&lt;ref$&lt;QUEUE_TEST::KeyVal&gt; &gt; &gt;, alloc::collections::binary_heap::impl$10::pop::closure_env$0&lt;ref$ (8,322 samples, 1.02%)</title><rect x="0.5291%" y="325" width="1.0180%" height="15" fill="rgb(232,182,51)" fg:x="4325" fg:w="8322"/><text x="0.7791%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::binary_heap::impl$10::pop::closure$0(alloc::collections::binary_heap::impl$10::pop::closure_env$0&lt;ref$ (8,322 samples, 1.02%)</title><rect x="0.5291%" y="309" width="1.0180%" height="15" fill="rgb(231,60,39)" fg:x="4325" fg:w="8322"/><text x="0.7791%" y="319.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::binary_heap::BinaryHeap&lt;ref$&lt;QUEUE_TEST::KeyVal&gt;,alloc::alloc::Global&gt;::sift_up (241 samples, 0.03%)</title><rect x="1.5475%" y="325" width="0.0295%" height="15" fill="rgb(208,69,12)" fg:x="12650" fg:w="241"/><text x="1.7975%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::impl$5::push(alloc::collections::binary_heap::BinaryHeap&lt;ref$ (254 samples, 0.03%)</title><rect x="1.5471%" y="357" width="0.0311%" height="15" fill="rgb(235,93,37)" fg:x="12647" fg:w="254"/><text x="1.7971%" y="367.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::binary_heap::BinaryHeap&lt;ref$&lt;QUEUE_TEST::KeyVal&gt;,alloc::alloc::Global&gt;::push (254 samples, 0.03%)</title><rect x="1.5471%" y="341" width="0.0311%" height="15" fill="rgb(213,116,39)" fg:x="12647" fg:w="254"/><text x="1.7971%" y="351.50"></text></g><g><title>QUEUE_TEST.exe`core::cmp::impls::impl$10::le (491 samples, 0.06%)</title><rect x="1.7169%" y="245" width="0.0601%" height="15" fill="rgb(222,207,29)" fg:x="14035" fg:w="491"/><text x="1.9669%" y="255.50"></text></g><g><title>QUEUE_TEST.exe`core::cmp::impls::impl$10::le (481 samples, 0.06%)</title><rect x="1.7182%" y="229" width="0.0588%" height="15" fill="rgb(206,96,30)" fg:x="14045" fg:w="481"/><text x="1.9682%" y="239.50"></text></g><g><title>QUEUE_TEST.exe`core::cmp::PartialOrd::le (481 samples, 0.06%)</title><rect x="1.7182%" y="213" width="0.0588%" height="15" fill="rgb(218,138,4)" fg:x="14045" fg:w="481"/><text x="1.9682%" y="223.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::impl$1::partial_cmp (481 samples, 0.06%)</title><rect x="1.7182%" y="197" width="0.0588%" height="15" fill="rgb(250,191,14)" fg:x="14045" fg:w="481"/><text x="1.9682%" y="207.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::binary_heap::BinaryHeap&lt;ref$&lt;QUEUE_TEST::KeyVal&gt;,alloc::alloc::Global&gt;::sift_up (1,574 samples, 0.19%)</title><rect x="1.5854%" y="261" width="0.1926%" height="15" fill="rgb(239,60,40)" fg:x="12960" fg:w="1574"/><text x="1.8354%" y="271.50"></text></g><g><title>QUEUE_TEST.exe`core::iter::traits::iterator::Iterator::for_each(core::option::Iter&lt;ref$&lt;QUEUE_TEST::KeyVal&gt; &gt;, QUEUE_TEST::time_seqential::closure_env$1&lt;alloc::collections::binary_heap::BinaryHeap&lt;ref$ (1,916 samples, 0.23%)</title><rect x="1.5783%" y="357" width="0.2344%" height="15" fill="rgb(206,27,48)" fg:x="12902" fg:w="1916"/><text x="1.8283%" y="367.50"></text></g><g><title>QUEUE_TEST.exe`core::iter::traits::iterator::Iterator::fold(core::option::Iter&lt;ref$&lt;QUEUE_TEST::KeyVal&gt; &gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;ref$&lt;ref$&lt;QUEUE_TEST::KeyVal&gt; &gt;,QUEUE_TEST::time_seqential::closure_env$1&lt;alloc::collections::binary_heap::BinaryHeap&lt;ref$ (1,897 samples, 0.23%)</title><rect x="1.5807%" y="341" width="0.2321%" height="15" fill="rgb(225,35,8)" fg:x="12921" fg:w="1897"/><text x="1.8307%" y="351.50"></text></g><g><title>QUEUE_TEST.exe`core::iter::traits::iterator::Iterator::for_each::call::closure$0(core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;ref$&lt;ref$&lt;QUEUE_TEST::KeyVal&gt; &gt;,QUEUE_TEST::time_seqential::closure_env$1&lt;alloc::collections::binary_heap::BinaryHeap&lt;ref$&lt;QUEUE_TEST::KeyVal&gt;,alloc::alloc::Global&gt; &gt; &gt;*, tuple$ (1,897 samples, 0.23%)</title><rect x="1.5807%" y="325" width="0.2321%" height="15" fill="rgb(250,213,24)" fg:x="12921" fg:w="1897"/><text x="1.8307%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::time_seqential::closure$1(QUEUE_TEST::time_seqential::closure_env$1&lt;alloc::collections::binary_heap::BinaryHeap&lt;ref$ (1,897 samples, 0.23%)</title><rect x="1.5807%" y="309" width="0.2321%" height="15" fill="rgb(247,123,22)" fg:x="12921" fg:w="1897"/><text x="1.8307%" y="319.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::impl$5::push(alloc::collections::binary_heap::BinaryHeap&lt;ref$ (1,897 samples, 0.23%)</title><rect x="1.5807%" y="293" width="0.2321%" height="15" fill="rgb(231,138,38)" fg:x="12921" fg:w="1897"/><text x="1.8307%" y="303.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::binary_heap::BinaryHeap&lt;ref$&lt;QUEUE_TEST::KeyVal&gt;,alloc::alloc::Global&gt;::push (1,897 samples, 0.23%)</title><rect x="1.5807%" y="277" width="0.2321%" height="15" fill="rgb(231,145,46)" fg:x="12921" fg:w="1897"/><text x="1.8307%" y="287.50"></text></g><g><title>QUEUE_TEST.exe`alloc::vec::Vec&lt;ref$&lt;QUEUE_TEST::KeyVal&gt;,alloc::alloc::Global&gt;::push (284 samples, 0.03%)</title><rect x="1.7780%" y="261" width="0.0347%" height="15" fill="rgb(251,118,11)" fg:x="14534" fg:w="284"/><text x="2.0280%" y="271.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::time_seqential::closure$0(QUEUE_TEST::time_seqential::closure_env$0&lt;alloc::collections::binary_heap::BinaryHeap&lt;ref$ (18,756 samples, 2.29%)</title><rect x="1.8133%" y="341" width="2.2945%" height="15" fill="rgb(217,147,25)" fg:x="14823" fg:w="18756"/><text x="2.0633%" y="351.50">Q..</text></g><g><title>QUEUE_TEST.exe`core::tuple::impl$10::eq(tuple$&lt;u32,u32&gt;*, tuple$ (18,756 samples, 2.29%)</title><rect x="1.8133%" y="325" width="2.2945%" height="15" fill="rgb(247,81,37)" fg:x="14823" fg:w="18756"/><text x="2.0633%" y="335.50">Q..</text></g><g><title>QUEUE_TEST.exe`core::cmp::impls::impl$24::eq (17,322 samples, 2.12%)</title><rect x="1.9888%" y="309" width="2.1190%" height="15" fill="rgb(209,12,38)" fg:x="16257" fg:w="17322"/><text x="2.2388%" y="319.50">Q..</text></g><g><title>QUEUE_TEST.exe`core::slice::iter::impl$182::find(core::slice::iter::Iter&lt;QUEUE_TEST::KeyVal&gt;*, QUEUE_TEST::time_seqential::closure_env$0&lt;alloc::collections::binary_heap::BinaryHeap&lt;ref$ (741,378 samples, 90.69%)</title><rect x="1.8132%" y="357" width="90.6942%" height="15" fill="rgb(227,1,9)" fg:x="14822" fg:w="741378"/><text x="2.0632%" y="367.50">QUEUE_TEST.exe`core::slice::iter::impl$182::find(core::slice::iter::Iter&lt;QUEUE_TEST::KeyVal&gt;*, QUEUE_TEST::time_seqential::closure_env$0&lt;alloc::collect..</text></g><g><title>QUEUE_TEST.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter (722,621 samples, 88.40%)</title><rect x="4.1078%" y="341" width="88.3996%" height="15" fill="rgb(248,47,43)" fg:x="33579" fg:w="722621"/><text x="4.3578%" y="351.50">QUEUE_TEST.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter</text></g><g><title>QUEUE_TEST.exe`core::ptr::non_null::impl$13::eq(core::ptr::non_null::NonNull&lt;QUEUE_TEST::KeyVal&gt;*, core::ptr::non_null::NonNull (722,586 samples, 88.40%)</title><rect x="4.1121%" y="325" width="88.3953%" height="15" fill="rgb(221,10,30)" fg:x="33614" fg:w="722586"/><text x="4.3621%" y="335.50">QUEUE_TEST.exe`core::ptr::non_null::impl$13::eq(core::ptr::non_null::NonNull&lt;QUEUE_TEST::KeyVal&gt;*, core::ptr::non_null::NonNull</text></g><g><title>QUEUE_TEST.exe`core::hash::impls::impl$5::hash(tuple$ (254 samples, 0.03%)</title><rect x="92.5096%" y="261" width="0.0311%" height="15" fill="rgb(210,229,1)" fg:x="756218" fg:w="254"/><text x="92.7596%" y="271.50"></text></g><g><title>QUEUE_TEST.exe`core::hash::impls::impl$23::hash(tuple$ (252 samples, 0.03%)</title><rect x="92.5099%" y="245" width="0.0308%" height="15" fill="rgb(222,148,37)" fg:x="756220" fg:w="252"/><text x="92.7599%" y="255.50"></text></g><g><title>QUEUE_TEST.exe`core::hash::impls::impl$11::hash (252 samples, 0.03%)</title><rect x="92.5099%" y="229" width="0.0308%" height="15" fill="rgb(234,67,33)" fg:x="756220" fg:w="252"/><text x="92.7599%" y="239.50"></text></g><g><title>QUEUE_TEST.exe`core::hash::Hasher::write_u32 (252 samples, 0.03%)</title><rect x="92.5099%" y="213" width="0.0308%" height="15" fill="rgb(247,98,35)" fg:x="756220" fg:w="252"/><text x="92.7599%" y="223.50"></text></g><g><title>QUEUE_TEST.exe`std::hash::random::impl$4::write(std::hash::random::DefaultHasher*, ref$&lt;slice2$ (252 samples, 0.03%)</title><rect x="92.5099%" y="197" width="0.0308%" height="15" fill="rgb(247,138,52)" fg:x="756220" fg:w="252"/><text x="92.7599%" y="207.50"></text></g><g><title>QUEUE_TEST.exe`core::hash::sip::impl$4::write(core::hash::sip::SipHasher13*, ref$&lt;slice2$ (252 samples, 0.03%)</title><rect x="92.5099%" y="181" width="0.0308%" height="15" fill="rgb(213,79,30)" fg:x="756220" fg:w="252"/><text x="92.7599%" y="191.50"></text></g><g><title>QUEUE_TEST.exe`core::hash::sip::impl$5::write(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (252 samples, 0.03%)</title><rect x="92.5099%" y="165" width="0.0308%" height="15" fill="rgb(246,177,23)" fg:x="756220" fg:w="252"/><text x="92.7599%" y="175.50"></text></g><g><title>QUEUE_TEST.exe`core::hash::sip::u8to64_le(ref$&lt;slice2$ (214 samples, 0.03%)</title><rect x="92.5145%" y="149" width="0.0262%" height="15" fill="rgb(230,62,27)" fg:x="756258" fg:w="214"/><text x="92.7645%" y="159.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::map::make_hash(std::hash::random::RandomState*, tuple$ (400 samples, 0.05%)</title><rect x="92.5095%" y="293" width="0.0489%" height="15" fill="rgb(216,154,8)" fg:x="756217" fg:w="400"/><text x="92.7595%" y="303.50"></text></g><g><title>QUEUE_TEST.exe`core::hash::BuildHasher::hash_one(std::hash::random::RandomState*, tuple$ (400 samples, 0.05%)</title><rect x="92.5095%" y="277" width="0.0489%" height="15" fill="rgb(244,35,45)" fg:x="756217" fg:w="400"/><text x="92.7595%" y="287.50"></text></g><g><title>QUEUE_TEST.exe`std::hash::random::impl$4::finish (127 samples, 0.02%)</title><rect x="92.5429%" y="261" width="0.0155%" height="15" fill="rgb(251,115,12)" fg:x="756490" fg:w="127"/><text x="92.7929%" y="271.50"></text></g><g><title>QUEUE_TEST.exe`core::hash::sip::impl$4::finish (127 samples, 0.02%)</title><rect x="92.5429%" y="245" width="0.0155%" height="15" fill="rgb(240,54,50)" fg:x="756490" fg:w="127"/><text x="92.7929%" y="255.50"></text></g><g><title>QUEUE_TEST.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (127 samples, 0.02%)</title><rect x="92.5429%" y="229" width="0.0155%" height="15" fill="rgb(233,84,52)" fg:x="756490" fg:w="127"/><text x="92.7929%" y="239.50"></text></g><g><title>QUEUE_TEST.exe`core::hash::sip::impl$8::d_rounds (90 samples, 0.01%)</title><rect x="92.5474%" y="213" width="0.0110%" height="15" fill="rgb(207,117,47)" fg:x="756527" fg:w="90"/><text x="92.7974%" y="223.50"></text></g><g><title>QUEUE_TEST.exe`core::intrinsics::likely (159 samples, 0.02%)</title><rect x="92.5627%" y="245" width="0.0195%" height="15" fill="rgb(249,43,39)" fg:x="756652" fg:w="159"/><text x="92.8127%" y="255.50"></text></g><g><title>QUEUE_TEST.exe`std::collections::hash::set::HashSet&lt;tuple$&lt;u32,u32&gt;,std::hash::random::RandomState&gt;::contains(tuple$ (771 samples, 0.09%)</title><rect x="92.5085%" y="357" width="0.0943%" height="15" fill="rgb(209,38,44)" fg:x="756209" fg:w="771"/><text x="92.7585%" y="367.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::set::HashSet&lt;tuple$&lt;u32,u32&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::contains(tuple$ (771 samples, 0.09%)</title><rect x="92.5085%" y="341" width="0.0943%" height="15" fill="rgb(236,212,23)" fg:x="756209" fg:w="771"/><text x="92.7585%" y="351.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::map::HashMap&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::contains_key(tuple$ (771 samples, 0.09%)</title><rect x="92.5085%" y="325" width="0.0943%" height="15" fill="rgb(242,79,21)" fg:x="756209" fg:w="771"/><text x="92.7585%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::map::HashMap&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::get_inner(tuple$ (771 samples, 0.09%)</title><rect x="92.5085%" y="309" width="0.0943%" height="15" fill="rgb(211,96,35)" fg:x="756209" fg:w="771"/><text x="92.7585%" y="319.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::raw::RawTable&lt;tuple$&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::get(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;u32,u32&gt;,tuple$ (363 samples, 0.04%)</title><rect x="92.5584%" y="293" width="0.0444%" height="15" fill="rgb(253,215,40)" fg:x="756617" fg:w="363"/><text x="92.8084%" y="303.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::raw::RawTable&lt;tuple$&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::find(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;u32,u32&gt;,tuple$ (363 samples, 0.04%)</title><rect x="92.5584%" y="277" width="0.0444%" height="15" fill="rgb(211,81,21)" fg:x="756617" fg:w="363"/><text x="92.8084%" y="287.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::raw::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (363 samples, 0.04%)</title><rect x="92.5584%" y="261" width="0.0444%" height="15" fill="rgb(208,190,38)" fg:x="756617" fg:w="363"/><text x="92.8084%" y="271.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::raw::RawTableInner::find_insert_slot (97 samples, 0.01%)</title><rect x="92.6135%" y="197" width="0.0119%" height="15" fill="rgb(235,213,38)" fg:x="757067" fg:w="97"/><text x="92.8635%" y="207.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::raw::RawTableInner::prepare_insert_slot (99 samples, 0.01%)</title><rect x="92.6135%" y="213" width="0.0121%" height="15" fill="rgb(237,122,38)" fg:x="757067" fg:w="99"/><text x="92.8635%" y="223.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::raw::RawTable&lt;tuple$&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::reserve(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;tuple$&lt;u32,u32&gt;,tuple$ (214 samples, 0.03%)</title><rect x="92.6036%" y="277" width="0.0262%" height="15" fill="rgb(244,218,35)" fg:x="756986" fg:w="214"/><text x="92.8536%" y="287.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::raw::RawTable&lt;tuple$&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;&gt; &gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;&gt;,std::hash::random::RandomState&gt; &gt;(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;tuple$&lt;u32,u32&gt;,tuple$ (214 samples, 0.03%)</title><rect x="92.6036%" y="261" width="0.0262%" height="15" fill="rgb(240,68,47)" fg:x="756986" fg:w="214"/><text x="92.8536%" y="271.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::raw::RawTableInner::reserve_rehash_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$&lt;Output,u64&gt; &gt; &gt; &gt;, hashbrown::raw::Fallibility, hashbrown::raw::TableLayout, enum2$&lt;core::option::Option&lt;void (*)(ptr_mut$ (214 samples, 0.03%)</title><rect x="92.6036%" y="245" width="0.0262%" height="15" fill="rgb(210,16,53)" fg:x="756986" fg:w="214"/><text x="92.8536%" y="255.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::raw::RawTableInner::resize_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$ (214 samples, 0.03%)</title><rect x="92.6036%" y="229" width="0.0262%" height="15" fill="rgb(235,124,12)" fg:x="756986" fg:w="214"/><text x="92.8536%" y="239.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::map::HashMap&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::find_or_find_insert_slot(unsigned long long, tuple$ (257 samples, 0.03%)</title><rect x="92.6036%" y="309" width="0.0314%" height="15" fill="rgb(224,169,11)" fg:x="756986" fg:w="257"/><text x="92.8536%" y="319.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::raw::RawTable&lt;tuple$&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::find_or_find_insert_slot(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;u32,u32&gt;,tuple$&lt;&gt; &gt;, hashbrown::map::make_hasher::closure_env$0&lt;tuple$&lt;u32,u32&gt;,tuple$ (257 samples, 0.03%)</title><rect x="92.6036%" y="293" width="0.0314%" height="15" fill="rgb(250,166,2)" fg:x="756986" fg:w="257"/><text x="92.8536%" y="303.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::time_seqential(alloc::vec::Vec&lt;alloc::vec::Vec&lt;QUEUE_TEST::KeyVal,alloc::alloc::Global&gt;,alloc::alloc::Global&gt;*, alloc::collections::binary_heap::BinaryHeap&lt;ref$ (756,965 samples, 92.60%)</title><rect x="0.0407%" y="373" width="92.6010%" height="15" fill="rgb(242,216,29)" fg:x="333" fg:w="756965"/><text x="0.2907%" y="383.50">QUEUE_TEST.exe`QUEUE_TEST::time_seqential(alloc::vec::Vec&lt;alloc::vec::Vec&lt;QUEUE_TEST::KeyVal,alloc::alloc::Global&gt;,alloc::alloc::Global&gt;*, alloc::collecti..</text></g><g><title>QUEUE_TEST.exe`std::collections::hash::set::HashSet&lt;tuple$&lt;u32,u32&gt;,std::hash::random::RandomState&gt;::insert(tuple$ (318 samples, 0.04%)</title><rect x="92.6028%" y="357" width="0.0389%" height="15" fill="rgb(230,116,27)" fg:x="756980" fg:w="318"/><text x="92.8528%" y="367.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::set::HashSet&lt;tuple$&lt;u32,u32&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::insert(tuple$ (318 samples, 0.04%)</title><rect x="92.6028%" y="341" width="0.0389%" height="15" fill="rgb(228,99,48)" fg:x="756980" fg:w="318"/><text x="92.8528%" y="351.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::map::HashMap&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::insert&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;(tuple$&lt;u32,u32&gt;, tuple$ (318 samples, 0.04%)</title><rect x="92.6028%" y="325" width="0.0389%" height="15" fill="rgb(253,11,6)" fg:x="756980" fg:w="318"/><text x="92.8528%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::vec_deque::VecDeque&lt;QUEUE_TEST::csvreader::Rec,alloc::alloc::Global&gt;::buffer_read (374 samples, 0.05%)</title><rect x="92.6417%" y="357" width="0.0458%" height="15" fill="rgb(247,143,39)" fg:x="757298" fg:w="374"/><text x="92.8917%" y="367.50"></text></g><g><title>QUEUE_TEST.exe`core::ptr::mut_ptr::impl$0::add (374 samples, 0.05%)</title><rect x="92.6417%" y="341" width="0.0458%" height="15" fill="rgb(236,97,10)" fg:x="757298" fg:w="374"/><text x="92.8917%" y="351.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::vec_deque::VecDeque&lt;QUEUE_TEST::csvreader::Rec,alloc::alloc::Global&gt;::pop_front (381 samples, 0.05%)</title><rect x="92.6417%" y="373" width="0.0466%" height="15" fill="rgb(233,208,19)" fg:x="757298" fg:w="381"/><text x="92.8917%" y="383.50"></text></g><g><title>`0x7FF9823C5113 (2,050 samples, 0.25%)</title><rect x="92.7006%" y="197" width="0.2508%" height="15" fill="rgb(216,164,2)" fg:x="757779" fg:w="2050"/><text x="92.9506%" y="207.50"></text></g><g><title>`0x7FF9823C5117 (642 samples, 0.08%)</title><rect x="92.9514%" y="197" width="0.0785%" height="15" fill="rgb(220,129,5)" fg:x="759829" fg:w="642"/><text x="93.2014%" y="207.50"></text></g><g><title>`0x7FF98228AB69 (2,856 samples, 0.35%)</title><rect x="92.6949%" y="213" width="0.3494%" height="15" fill="rgb(242,17,10)" fg:x="757733" fg:w="2856"/><text x="92.9449%" y="223.50"></text></g><g><title>QUEUE_TEST.exe`alloc::raw_vec::RawVec&lt;QUEUE_TEST::KeyVal,alloc::alloc::Global&gt;::grow_one&lt;QUEUE_TEST::KeyVal,alloc::alloc::Global&gt; (3,155 samples, 0.39%)</title><rect x="92.6925%" y="357" width="0.3860%" height="15" fill="rgb(242,107,0)" fg:x="757713" fg:w="3155"/><text x="92.9425%" y="367.50"></text></g><g><title>QUEUE_TEST.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (3,155 samples, 0.39%)</title><rect x="92.6925%" y="341" width="0.3860%" height="15" fill="rgb(251,28,31)" fg:x="757713" fg:w="3155"/><text x="92.9425%" y="351.50"></text></g><g><title>QUEUE_TEST.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (3,155 samples, 0.39%)</title><rect x="92.6925%" y="325" width="0.3860%" height="15" fill="rgb(233,223,10)" fg:x="757713" fg:w="3155"/><text x="92.9425%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (3,155 samples, 0.39%)</title><rect x="92.6925%" y="309" width="0.3860%" height="15" fill="rgb(215,21,27)" fg:x="757713" fg:w="3155"/><text x="92.9425%" y="319.50"></text></g><g><title>QUEUE_TEST.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (3,155 samples, 0.39%)</title><rect x="92.6925%" y="293" width="0.3860%" height="15" fill="rgb(232,23,21)" fg:x="757713" fg:w="3155"/><text x="92.9425%" y="303.50"></text></g><g><title>QUEUE_TEST.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (3,155 samples, 0.39%)</title><rect x="92.6925%" y="277" width="0.3860%" height="15" fill="rgb(244,5,23)" fg:x="757713" fg:w="3155"/><text x="92.9425%" y="287.50"></text></g><g><title>QUEUE_TEST.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (3,155 samples, 0.39%)</title><rect x="92.6925%" y="261" width="0.3860%" height="15" fill="rgb(226,81,46)" fg:x="757713" fg:w="3155"/><text x="92.9425%" y="271.50"></text></g><g><title>`0x7FF982289A86 (3,154 samples, 0.39%)</title><rect x="92.6926%" y="245" width="0.3858%" height="15" fill="rgb(247,70,30)" fg:x="757714" fg:w="3154"/><text x="92.9426%" y="255.50"></text></g><g><title>`0x7FF982289BC5 (3,154 samples, 0.39%)</title><rect x="92.6926%" y="229" width="0.3858%" height="15" fill="rgb(212,68,19)" fg:x="757714" fg:w="3154"/><text x="92.9426%" y="239.50"></text></g><g><title>`0x7FF98228AB7C (279 samples, 0.03%)</title><rect x="93.0443%" y="213" width="0.0341%" height="15" fill="rgb(240,187,13)" fg:x="760589" fg:w="279"/><text x="93.2943%" y="223.50"></text></g><g><title>`0x7FF982286F81 (279 samples, 0.03%)</title><rect x="93.0443%" y="197" width="0.0341%" height="15" fill="rgb(223,113,26)" fg:x="760589" fg:w="279"/><text x="93.2943%" y="207.50"></text></g><g><title>`0x7FF98227FAFD (278 samples, 0.03%)</title><rect x="93.0445%" y="181" width="0.0340%" height="15" fill="rgb(206,192,2)" fg:x="760590" fg:w="278"/><text x="93.2945%" y="191.50"></text></g><g><title>`0x7FF9822A813F (278 samples, 0.03%)</title><rect x="93.0445%" y="165" width="0.0340%" height="15" fill="rgb(241,108,4)" fg:x="760590" fg:w="278"/><text x="93.2945%" y="175.50"></text></g><g><title>`0x7FF9823BFB94 (276 samples, 0.03%)</title><rect x="93.0447%" y="149" width="0.0338%" height="15" fill="rgb(247,173,49)" fg:x="760592" fg:w="276"/><text x="93.2947%" y="159.50"></text></g><g><title>QUEUE_TEST.exe`alloc::vec::Vec&lt;QUEUE_TEST::KeyVal,alloc::alloc::Global&gt;::push (4,647 samples, 0.57%)</title><rect x="92.6883%" y="373" width="0.5685%" height="15" fill="rgb(224,114,35)" fg:x="757679" fg:w="4647"/><text x="92.9383%" y="383.50"></text></g><g><title>QUEUE_TEST.exe`core::ptr::write (1,452 samples, 0.18%)</title><rect x="93.0792%" y="357" width="0.1776%" height="15" fill="rgb(245,159,27)" fg:x="760874" fg:w="1452"/><text x="93.3292%" y="367.50"></text></g><g><title>QUEUE_TEST.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;alloc::vec::Vec (100 samples, 0.01%)</title><rect x="93.2678%" y="373" width="0.0122%" height="15" fill="rgb(245,172,44)" fg:x="762416" fg:w="100"/><text x="93.5178%" y="383.50"></text></g><g><title>QUEUE_TEST.exe`alloc::vec::impl$25::drop(alloc::vec::Vec&lt;alloc::vec::Vec (100 samples, 0.01%)</title><rect x="93.2678%" y="357" width="0.0122%" height="15" fill="rgb(236,23,11)" fg:x="762416" fg:w="100"/><text x="93.5178%" y="367.50"></text></g><g><title>QUEUE_TEST.exe`core::ptr::drop_in_place(ptr_mut$&lt;slice2$&lt;alloc::vec::Vec (100 samples, 0.01%)</title><rect x="93.2678%" y="341" width="0.0122%" height="15" fill="rgb(205,117,38)" fg:x="762416" fg:w="100"/><text x="93.5178%" y="351.50"></text></g><g><title>QUEUE_TEST.exe`core::ptr::drop_in_place(alloc::vec::Vec (100 samples, 0.01%)</title><rect x="93.2678%" y="325" width="0.0122%" height="15" fill="rgb(237,72,25)" fg:x="762416" fg:w="100"/><text x="93.5178%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (100 samples, 0.01%)</title><rect x="93.2678%" y="309" width="0.0122%" height="15" fill="rgb(244,70,9)" fg:x="762416" fg:w="100"/><text x="93.5178%" y="319.50"></text></g><g><title>QUEUE_TEST.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (100 samples, 0.01%)</title><rect x="93.2678%" y="293" width="0.0122%" height="15" fill="rgb(217,125,39)" fg:x="762416" fg:w="100"/><text x="93.5178%" y="303.50"></text></g><g><title>QUEUE_TEST.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (100 samples, 0.01%)</title><rect x="93.2678%" y="277" width="0.0122%" height="15" fill="rgb(235,36,10)" fg:x="762416" fg:w="100"/><text x="93.5178%" y="287.50"></text></g><g><title>QUEUE_TEST.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (100 samples, 0.01%)</title><rect x="93.2678%" y="261" width="0.0122%" height="15" fill="rgb(251,123,47)" fg:x="762416" fg:w="100"/><text x="93.5178%" y="271.50"></text></g><g><title>QUEUE_TEST.exe`alloc::alloc::dealloc (100 samples, 0.01%)</title><rect x="93.2678%" y="245" width="0.0122%" height="15" fill="rgb(221,13,13)" fg:x="762416" fg:w="100"/><text x="93.5178%" y="255.50"></text></g><g><title>`0x7FF982286F81 (100 samples, 0.01%)</title><rect x="93.2678%" y="229" width="0.0122%" height="15" fill="rgb(238,131,9)" fg:x="762416" fg:w="100"/><text x="93.5178%" y="239.50"></text></g><g><title>`0x7FF98227FAFD (100 samples, 0.01%)</title><rect x="93.2678%" y="213" width="0.0122%" height="15" fill="rgb(211,50,8)" fg:x="762416" fg:w="100"/><text x="93.5178%" y="223.50"></text></g><g><title>`0x7FF9822A813F (100 samples, 0.01%)</title><rect x="93.2678%" y="197" width="0.0122%" height="15" fill="rgb(245,182,24)" fg:x="762416" fg:w="100"/><text x="93.5178%" y="207.50"></text></g><g><title>`0x7FF9823BFB94 (100 samples, 0.01%)</title><rect x="93.2678%" y="181" width="0.0122%" height="15" fill="rgb(242,14,37)" fg:x="762416" fg:w="100"/><text x="93.5178%" y="191.50"></text></g><g><title>`0x7FF9823C5113 (1,103 samples, 0.13%)</title><rect x="93.2887%" y="133" width="0.1349%" height="15" fill="rgb(246,228,12)" fg:x="762587" fg:w="1103"/><text x="93.5387%" y="143.50"></text></g><g><title>`0x7FF9823C5117 (485 samples, 0.06%)</title><rect x="93.4237%" y="133" width="0.0593%" height="15" fill="rgb(213,55,15)" fg:x="763690" fg:w="485"/><text x="93.6737%" y="143.50"></text></g><g><title>`0x7FF98228AB69 (1,726 samples, 0.21%)</title><rect x="93.2857%" y="149" width="0.2111%" height="15" fill="rgb(209,9,3)" fg:x="762562" fg:w="1726"/><text x="93.5357%" y="159.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::vec_deque::VecDeque&lt;QUEUE_TEST::csvreader::Rec,alloc::alloc::Global&gt;::grow&lt;QUEUE_TEST::csvreader::Rec,alloc::alloc::Global&gt; (1,737 samples, 0.21%)</title><rect x="93.2854%" y="325" width="0.2125%" height="15" fill="rgb(230,59,30)" fg:x="762560" fg:w="1737"/><text x="93.5354%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::vec_deque::VecDeque&lt;QUEUE_TEST::csvreader::Rec,alloc::alloc::Global&gt;::handle_capacity_increase (1,737 samples, 0.21%)</title><rect x="93.2854%" y="309" width="0.2125%" height="15" fill="rgb(209,121,21)" fg:x="762560" fg:w="1737"/><text x="93.5354%" y="319.50"></text></g><g><title>QUEUE_TEST.exe`alloc::raw_vec::RawVec&lt;QUEUE_TEST::csvreader::Rec,alloc::alloc::Global&gt;::grow_one&lt;QUEUE_TEST::csvreader::Rec,alloc::alloc::Global&gt; (1,737 samples, 0.21%)</title><rect x="93.2854%" y="293" width="0.2125%" height="15" fill="rgb(220,109,13)" fg:x="762560" fg:w="1737"/><text x="93.5354%" y="303.50"></text></g><g><title>QUEUE_TEST.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (1,737 samples, 0.21%)</title><rect x="93.2854%" y="277" width="0.2125%" height="15" fill="rgb(232,18,1)" fg:x="762560" fg:w="1737"/><text x="93.5354%" y="287.50"></text></g><g><title>QUEUE_TEST.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (1,737 samples, 0.21%)</title><rect x="93.2854%" y="261" width="0.2125%" height="15" fill="rgb(215,41,42)" fg:x="762560" fg:w="1737"/><text x="93.5354%" y="271.50"></text></g><g><title>QUEUE_TEST.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (1,737 samples, 0.21%)</title><rect x="93.2854%" y="245" width="0.2125%" height="15" fill="rgb(224,123,36)" fg:x="762560" fg:w="1737"/><text x="93.5354%" y="255.50"></text></g><g><title>QUEUE_TEST.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (1,737 samples, 0.21%)</title><rect x="93.2854%" y="229" width="0.2125%" height="15" fill="rgb(240,125,3)" fg:x="762560" fg:w="1737"/><text x="93.5354%" y="239.50"></text></g><g><title>QUEUE_TEST.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (1,737 samples, 0.21%)</title><rect x="93.2854%" y="213" width="0.2125%" height="15" fill="rgb(205,98,50)" fg:x="762560" fg:w="1737"/><text x="93.5354%" y="223.50"></text></g><g><title>QUEUE_TEST.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (1,737 samples, 0.21%)</title><rect x="93.2854%" y="197" width="0.2125%" height="15" fill="rgb(205,185,37)" fg:x="762560" fg:w="1737"/><text x="93.5354%" y="207.50"></text></g><g><title>`0x7FF982289A86 (1,736 samples, 0.21%)</title><rect x="93.2856%" y="181" width="0.2124%" height="15" fill="rgb(238,207,15)" fg:x="762561" fg:w="1736"/><text x="93.5356%" y="191.50"></text></g><g><title>`0x7FF982289BC5 (1,736 samples, 0.21%)</title><rect x="93.2856%" y="165" width="0.2124%" height="15" fill="rgb(213,199,42)" fg:x="762561" fg:w="1736"/><text x="93.5356%" y="175.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::vec_deque::VecDeque&lt;QUEUE_TEST::csvreader::Rec,alloc::alloc::Global&gt;::push_back (2,779 samples, 0.34%)</title><rect x="93.2808%" y="341" width="0.3400%" height="15" fill="rgb(235,201,11)" fg:x="762522" fg:w="2779"/><text x="93.5308%" y="351.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::vec_deque::VecDeque&lt;QUEUE_TEST::csvreader::Rec,alloc::alloc::Global&gt;::to_physical_idx (1,003 samples, 0.12%)</title><rect x="93.4981%" y="325" width="0.1227%" height="15" fill="rgb(207,46,11)" fg:x="764298" fg:w="1003"/><text x="93.7481%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`core::ptr::mut_ptr::impl$0::add (1,002 samples, 0.12%)</title><rect x="93.4982%" y="309" width="0.1226%" height="15" fill="rgb(241,35,35)" fg:x="764299" fg:w="1002"/><text x="93.7482%" y="319.50"></text></g><g><title>QUEUE_TEST.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result (263 samples, 0.03%)</title><rect x="93.6209%" y="341" width="0.0322%" height="15" fill="rgb(243,32,47)" fg:x="765302" fg:w="263"/><text x="93.8709%" y="351.50"></text></g><g><title>QUEUE_TEST.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, core::ops::range::RangeTo (797 samples, 0.10%)</title><rect x="93.6847%" y="277" width="0.0975%" height="15" fill="rgb(247,202,23)" fg:x="765824" fg:w="797"/><text x="93.9347%" y="287.50"></text></g><g><title>QUEUE_TEST.exe`core::slice::ascii::is_ascii(ref$&lt;slice2$ (744 samples, 0.09%)</title><rect x="93.6912%" y="261" width="0.0910%" height="15" fill="rgb(219,102,11)" fg:x="765877" fg:w="744"/><text x="93.9412%" y="271.50"></text></g><g><title>QUEUE_TEST.exe`core::slice::ascii::is_ascii::runtime(ref$&lt;slice2$ (744 samples, 0.09%)</title><rect x="93.6912%" y="245" width="0.0910%" height="15" fill="rgb(243,110,44)" fg:x="765877" fg:w="744"/><text x="93.9412%" y="255.50"></text></g><g><title>QUEUE_TEST.exe`csv::byte_record::ByteRecord::validate (887 samples, 0.11%)</title><rect x="93.6769%" y="293" width="0.1085%" height="15" fill="rgb(222,74,54)" fg:x="765760" fg:w="887"/><text x="93.9269%" y="303.50"></text></g><g><title>QUEUE_TEST.exe`csv_core::reader::Dfa::get_output (1,319 samples, 0.16%)</title><rect x="94.3512%" y="229" width="0.1614%" height="15" fill="rgb(216,99,12)" fg:x="771272" fg:w="1319"/><text x="94.6012%" y="239.50"></text></g><g><title>QUEUE_TEST.exe`csv_core::reader::Dfa::new_read_record_result (111 samples, 0.01%)</title><rect x="94.5126%" y="229" width="0.0136%" height="15" fill="rgb(226,22,26)" fg:x="772591" fg:w="111"/><text x="94.7626%" y="239.50"></text></g><g><title>QUEUE_TEST.exe`core::cmp::PartialOrd::ge (111 samples, 0.01%)</title><rect x="94.5126%" y="213" width="0.0136%" height="15" fill="rgb(217,163,10)" fg:x="772591" fg:w="111"/><text x="94.7626%" y="223.50"></text></g><g><title>QUEUE_TEST.exe`csv_core::reader::impl$55::partial_cmp (107 samples, 0.01%)</title><rect x="94.5130%" y="197" width="0.0131%" height="15" fill="rgb(213,25,53)" fg:x="772595" fg:w="107"/><text x="94.7630%" y="207.50"></text></g><g><title>QUEUE_TEST.exe`core::cmp::impls::impl$60::partial_cmp (107 samples, 0.01%)</title><rect x="94.5130%" y="181" width="0.0131%" height="15" fill="rgb(252,105,26)" fg:x="772595" fg:w="107"/><text x="94.7630%" y="191.50"></text></g><g><title>QUEUE_TEST.exe`csv_core::reader::DfaClasses::scan_and_copy(ref$&lt;slice2$&lt;u8&gt; &gt;, unsigned long long*, ref_mut$&lt;slice2$ (10,255 samples, 1.25%)</title><rect x="94.5261%" y="229" width="1.2545%" height="15" fill="rgb(220,39,43)" fg:x="772702" fg:w="10255"/><text x="94.7761%" y="239.50"></text></g><g><title>QUEUE_TEST.exe`csv_core::reader::Reader::read_record(ref$&lt;slice2$&lt;u8&gt; &gt;, ref_mut$&lt;slice2$&lt;u8&gt; &gt;, ref_mut$&lt;slice2$ (16,589 samples, 2.03%)</title><rect x="93.8188%" y="261" width="2.0294%" height="15" fill="rgb(229,68,48)" fg:x="766920" fg:w="16589"/><text x="94.0688%" y="271.50">Q..</text></g><g><title>QUEUE_TEST.exe`csv_core::reader::Reader::read_record_dfa(ref$&lt;slice2$&lt;u8&gt; &gt;, ref_mut$&lt;slice2$&lt;u8&gt; &gt;, ref_mut$&lt;slice2$ (16,476 samples, 2.02%)</title><rect x="93.8326%" y="245" width="2.0155%" height="15" fill="rgb(252,8,32)" fg:x="767033" fg:w="16476"/><text x="94.0826%" y="255.50">Q..</text></g><g><title>QUEUE_TEST.exe`csv_core::reader::impl$54::eq (552 samples, 0.07%)</title><rect x="95.7806%" y="229" width="0.0675%" height="15" fill="rgb(223,20,43)" fg:x="782957" fg:w="552"/><text x="96.0306%" y="239.50"></text></g><g><title>QUEUE_TEST.exe`csv::reader::Reader&lt;std::fs::File&gt;::read_record (23,541 samples, 2.88%)</title><rect x="93.6681%" y="325" width="2.8798%" height="15" fill="rgb(229,81,49)" fg:x="765688" fg:w="23541"/><text x="93.9181%" y="335.50">QU..</text></g><g><title>QUEUE_TEST.exe`csv::string_record::StringRecord::read(csv::reader::Reader (23,531 samples, 2.88%)</title><rect x="93.6693%" y="309" width="2.8786%" height="15" fill="rgb(236,28,36)" fg:x="765698" fg:w="23531"/><text x="93.9193%" y="319.50">QU..</text></g><g><title>QUEUE_TEST.exe`csv::reader::Reader&lt;std::fs::File&gt;::read_byte_record (22,562 samples, 2.76%)</title><rect x="93.7879%" y="293" width="2.7601%" height="15" fill="rgb(249,185,26)" fg:x="766667" fg:w="22562"/><text x="94.0379%" y="303.50">QU..</text></g><g><title>QUEUE_TEST.exe`csv::reader::Reader&lt;std::fs::File&gt;::read_byte_record_impl (22,507 samples, 2.75%)</title><rect x="93.7946%" y="277" width="2.7533%" height="15" fill="rgb(249,174,33)" fg:x="766722" fg:w="22507"/><text x="94.0446%" y="287.50">QU..</text></g><g><title>QUEUE_TEST.exe`std::io::buffered::bufreader::impl$6::fill_buf(std::io::buffered::bufreader::BufReader (5,708 samples, 0.70%)</title><rect x="95.8496%" y="261" width="0.6983%" height="15" fill="rgb(233,201,37)" fg:x="783521" fg:w="5708"/><text x="96.0996%" y="271.50"></text></g><g><title>QUEUE_TEST.exe`std::io::buffered::bufreader::buffer::Buffer::fill_buf (5,708 samples, 0.70%)</title><rect x="95.8496%" y="245" width="0.6983%" height="15" fill="rgb(221,78,26)" fg:x="783521" fg:w="5708"/><text x="96.0996%" y="255.50"></text></g><g><title>QUEUE_TEST.exe`std::sys::pal::windows::handle::Handle::read_buf (5,695 samples, 0.70%)</title><rect x="95.8512%" y="229" width="0.6967%" height="15" fill="rgb(250,127,30)" fg:x="783534" fg:w="5695"/><text x="96.1012%" y="239.50"></text></g><g><title>QUEUE_TEST.exe`std::sys::pal::windows::handle::Handle::synchronous_read (5,682 samples, 0.70%)</title><rect x="95.8528%" y="213" width="0.6951%" height="15" fill="rgb(230,49,44)" fg:x="783547" fg:w="5682"/><text x="96.1028%" y="223.50"></text></g><g><title>`0x7FF9823BF894 (5,644 samples, 0.69%)</title><rect x="95.8575%" y="197" width="0.6904%" height="15" fill="rgb(229,67,23)" fg:x="783585" fg:w="5644"/><text x="96.1075%" y="207.50"></text></g><g><title>QUEUE_TEST.exe`core::num::impl$11::checked_sub (306 samples, 0.04%)</title><rect x="96.8393%" y="53" width="0.0374%" height="15" fill="rgb(249,83,47)" fg:x="791611" fg:w="306"/><text x="97.0893%" y="63.50"></text></g><g><title>QUEUE_TEST.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, core::ops::range::Range (312 samples, 0.04%)</title><rect x="96.8389%" y="101" width="0.0382%" height="15" fill="rgb(215,43,3)" fg:x="791608" fg:w="312"/><text x="97.0889%" y="111.50"></text></g><g><title>QUEUE_TEST.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::Range (309 samples, 0.04%)</title><rect x="96.8393%" y="85" width="0.0378%" height="15" fill="rgb(238,154,13)" fg:x="791611" fg:w="309"/><text x="97.0893%" y="95.50"></text></g><g><title>QUEUE_TEST.exe`core::slice::index::impl$4::index(core::ops::range::Range&lt;usize&gt;, ref$&lt;slice2$ (309 samples, 0.04%)</title><rect x="96.8393%" y="69" width="0.0378%" height="15" fill="rgb(219,56,2)" fg:x="791611" fg:w="309"/><text x="97.0893%" y="79.50"></text></g><g><title>QUEUE_TEST.exe`csv::string_record::impl$14::next (658 samples, 0.08%)</title><rect x="96.8309%" y="133" width="0.0805%" height="15" fill="rgb(233,0,4)" fg:x="791542" fg:w="658"/><text x="97.0809%" y="143.50"></text></g><g><title>QUEUE_TEST.exe`csv::byte_record::impl$19::next (658 samples, 0.08%)</title><rect x="96.8309%" y="117" width="0.0805%" height="15" fill="rgb(235,30,7)" fg:x="791542" fg:w="658"/><text x="97.0809%" y="127.50"></text></g><g><title>QUEUE_TEST.exe`csv::byte_record::Bounds::ends (280 samples, 0.03%)</title><rect x="96.8771%" y="101" width="0.0343%" height="15" fill="rgb(250,79,13)" fg:x="791920" fg:w="280"/><text x="97.1271%" y="111.50"></text></g><g><title>QUEUE_TEST.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;*, core::ops::range::RangeTo (273 samples, 0.03%)</title><rect x="96.8780%" y="85" width="0.0334%" height="15" fill="rgb(211,146,34)" fg:x="791927" fg:w="273"/><text x="97.1280%" y="95.50"></text></g><g><title>QUEUE_TEST.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (273 samples, 0.03%)</title><rect x="96.8780%" y="69" width="0.0334%" height="15" fill="rgb(228,22,38)" fg:x="791927" fg:w="273"/><text x="97.1280%" y="79.50"></text></g><g><title>QUEUE_TEST.exe`core::slice::index::impl$6::index(core::ops::range::RangeTo&lt;usize&gt;, ref$&lt;slice2$ (251 samples, 0.03%)</title><rect x="96.8807%" y="53" width="0.0307%" height="15" fill="rgb(235,168,5)" fg:x="791949" fg:w="251"/><text x="97.1307%" y="63.50"></text></g><g><title>QUEUE_TEST.exe`core::slice::index::impl$4::index(core::ops::range::Range&lt;usize&gt;, ref$&lt;slice2$ (251 samples, 0.03%)</title><rect x="96.8807%" y="37" width="0.0307%" height="15" fill="rgb(221,155,16)" fg:x="791949" fg:w="251"/><text x="97.1307%" y="47.50"></text></g><g><title>QUEUE_TEST.exe`csv::deserializer::impl$0::next_field(csv::deserializer::DeRecordWrap (1,195 samples, 0.15%)</title><rect x="96.7657%" y="181" width="0.1462%" height="15" fill="rgb(215,215,53)" fg:x="791009" fg:w="1195"/><text x="97.0157%" y="191.50"></text></g><g><title>QUEUE_TEST.exe`csv::deserializer::impl$1::next_field (1,195 samples, 0.15%)</title><rect x="96.7657%" y="165" width="0.1462%" height="15" fill="rgb(223,4,10)" fg:x="791009" fg:w="1195"/><text x="97.0157%" y="175.50"></text></g><g><title>QUEUE_TEST.exe`core::iter::adapters::peekable::impl$1::next(core::iter::adapters::peekable::Peekable (940 samples, 0.11%)</title><rect x="96.7969%" y="149" width="0.1150%" height="15" fill="rgb(234,103,6)" fg:x="791264" fg:w="940"/><text x="97.0469%" y="159.50"></text></g><g><title>QUEUE_TEST.exe`core::num::dec2flt::lemire::full_multiplication (283 samples, 0.03%)</title><rect x="97.6330%" y="101" width="0.0346%" height="15" fill="rgb(227,97,0)" fg:x="798099" fg:w="283"/><text x="97.8830%" y="111.50"></text></g><g><title>QUEUE_TEST.exe`core::num::dec2flt::lemire::compute_product_approx (434 samples, 0.05%)</title><rect x="97.6149%" y="117" width="0.0531%" height="15" fill="rgb(234,150,53)" fg:x="797951" fg:w="434"/><text x="97.8649%" y="127.50"></text></g><g><title>QUEUE_TEST.exe`core::num::dec2flt::lemire::compute_float&lt;f64&gt; (2,630 samples, 0.32%)</title><rect x="97.3602%" y="133" width="0.3217%" height="15" fill="rgb(228,201,54)" fg:x="795869" fg:w="2630"/><text x="97.6102%" y="143.50"></text></g><g><title>QUEUE_TEST.exe`core::num::impl$9::leading_zeros (113 samples, 0.01%)</title><rect x="97.6681%" y="117" width="0.0138%" height="15" fill="rgb(222,22,37)" fg:x="798386" fg:w="113"/><text x="97.9181%" y="127.50"></text></g><g><title>QUEUE_TEST.exe`core::num::dec2flt::number::Number::is_fast_path (442 samples, 0.05%)</title><rect x="97.6955%" y="117" width="0.0541%" height="15" fill="rgb(237,53,32)" fg:x="798610" fg:w="442"/><text x="97.9455%" y="127.50"></text></g><g><title>QUEUE_TEST.exe`core::num::dec2flt::number::Number::try_fast_path (568 samples, 0.07%)</title><rect x="97.6819%" y="133" width="0.0695%" height="15" fill="rgb(233,25,53)" fg:x="798499" fg:w="568"/><text x="97.9319%" y="143.50"></text></g><g><title>QUEUE_TEST.exe`core::num::dec2flt::parse::try_parse_digits::closure$0 (1,223 samples, 0.15%)</title><rect x="98.6152%" y="69" width="0.1496%" height="15" fill="rgb(210,40,34)" fg:x="806128" fg:w="1223"/><text x="98.8652%" y="79.50"></text></g><g><title>QUEUE_TEST.exe`core::num::impl$9::wrapping_mul (383 samples, 0.05%)</title><rect x="98.7180%" y="53" width="0.0469%" height="15" fill="rgb(241,220,44)" fg:x="806968" fg:w="383"/><text x="98.9680%" y="63.50"></text></g><g><title>QUEUE_TEST.exe`core::num::impl$6::wrapping_sub (193 samples, 0.02%)</title><rect x="98.7648%" y="69" width="0.0236%" height="15" fill="rgb(235,28,35)" fg:x="807351" fg:w="193"/><text x="99.0148%" y="79.50"></text></g><g><title>QUEUE_TEST.exe`core::num::dec2flt::common::impl$0::parse_digits (3,254 samples, 0.40%)</title><rect x="98.5729%" y="85" width="0.3981%" height="15" fill="rgb(210,56,17)" fg:x="805782" fg:w="3254"/><text x="98.8229%" y="95.50"></text></g><g><title>QUEUE_TEST.exe`core::slice::impl$0::split_first (1,492 samples, 0.18%)</title><rect x="98.7884%" y="69" width="0.1825%" height="15" fill="rgb(224,130,29)" fg:x="807544" fg:w="1492"/><text x="99.0384%" y="79.50"></text></g><g><title>QUEUE_TEST.exe`core::num::dec2flt::common::impl$0::read_u64 (85 samples, 0.01%)</title><rect x="98.9709%" y="85" width="0.0104%" height="15" fill="rgb(235,212,8)" fg:x="809036" fg:w="85"/><text x="99.2209%" y="95.50"></text></g><g><title>QUEUE_TEST.exe`core::slice::impl$0::copy_from_slice (85 samples, 0.01%)</title><rect x="98.9709%" y="69" width="0.0104%" height="15" fill="rgb(223,33,50)" fg:x="809036" fg:w="85"/><text x="99.2209%" y="79.50"></text></g><g><title>QUEUE_TEST.exe`core::intrinsics::copy_nonoverlapping (85 samples, 0.01%)</title><rect x="98.9709%" y="53" width="0.0104%" height="15" fill="rgb(219,149,13)" fg:x="809036" fg:w="85"/><text x="99.2209%" y="63.50"></text></g><g><title>QUEUE_TEST.exe`core::num::impl$9::wrapping_add (356 samples, 0.04%)</title><rect x="98.9842%" y="69" width="0.0436%" height="15" fill="rgb(250,156,29)" fg:x="809144" fg:w="356"/><text x="99.2342%" y="79.50"></text></g><g><title>QUEUE_TEST.exe`core::num::dec2flt::common::is_8digits (614 samples, 0.08%)</title><rect x="98.9813%" y="85" width="0.0751%" height="15" fill="rgb(216,193,19)" fg:x="809121" fg:w="614"/><text x="99.2313%" y="95.50"></text></g><g><title>QUEUE_TEST.exe`core::num::impl$9::wrapping_sub (235 samples, 0.03%)</title><rect x="99.0277%" y="69" width="0.0287%" height="15" fill="rgb(216,135,14)" fg:x="809500" fg:w="235"/><text x="99.2777%" y="79.50"></text></g><g><title>QUEUE_TEST.exe`core::num::impl$9::wrapping_add (209 samples, 0.03%)</title><rect x="99.2329%" y="69" width="0.0256%" height="15" fill="rgb(241,47,5)" fg:x="811177" fg:w="209"/><text x="99.4829%" y="79.50"></text></g><g><title>QUEUE_TEST.exe`core::num::impl$9::wrapping_mul (1,838 samples, 0.22%)</title><rect x="99.0565%" y="85" width="0.2248%" height="15" fill="rgb(233,42,35)" fg:x="809735" fg:w="1838"/><text x="99.3065%" y="95.50"></text></g><g><title>QUEUE_TEST.exe`core::num::impl$9::wrapping_mul (187 samples, 0.02%)</title><rect x="99.2584%" y="69" width="0.0229%" height="15" fill="rgb(231,13,6)" fg:x="811386" fg:w="187"/><text x="99.5084%" y="79.50"></text></g><g><title>QUEUE_TEST.exe`core::num::dec2flt::parse::try_parse_digits (6,649 samples, 0.81%)</title><rect x="98.4923%" y="101" width="0.8134%" height="15" fill="rgb(207,181,40)" fg:x="805123" fg:w="6649"/><text x="98.7423%" y="111.50"></text></g><g><title>QUEUE_TEST.exe`core::slice::index::impl$0::index (199 samples, 0.02%)</title><rect x="99.2813%" y="85" width="0.0243%" height="15" fill="rgb(254,173,49)" fg:x="811573" fg:w="199"/><text x="99.5313%" y="95.50"></text></g><g><title>QUEUE_TEST.exe`core::slice::index::impl$7::index (199 samples, 0.02%)</title><rect x="99.2813%" y="69" width="0.0243%" height="15" fill="rgb(221,1,38)" fg:x="811573" fg:w="199"/><text x="99.5313%" y="79.50"></text></g><g><title>QUEUE_TEST.exe`core::slice::index::impl$7::get_unchecked (199 samples, 0.02%)</title><rect x="99.2813%" y="53" width="0.0243%" height="15" fill="rgb(206,124,46)" fg:x="811573" fg:w="199"/><text x="99.5313%" y="63.50"></text></g><g><title>QUEUE_TEST.exe`core::slice::index::impl$4::get_unchecked (199 samples, 0.02%)</title><rect x="99.2813%" y="37" width="0.0243%" height="15" fill="rgb(249,21,11)" fg:x="811573" fg:w="199"/><text x="99.5313%" y="47.50"></text></g><g><title>QUEUE_TEST.exe`core::num::impl$6::saturating_sub (986 samples, 0.12%)</title><rect x="99.3056%" y="101" width="0.1206%" height="15" fill="rgb(222,201,40)" fg:x="811772" fg:w="986"/><text x="99.5556%" y="111.50"></text></g><g><title>QUEUE_TEST.exe`enum2$&lt;core::result::Result&lt;f64,core::num::dec2flt::ParseFloatError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;f64,core::num::dec2flt::ParseFloatError&gt; &gt;, csv::deserializer::impl$3::deserialize_f64::closure_env$0 (21,681 samples, 2.65%)</title><rect x="96.9119%" y="181" width="2.6523%" height="15" fill="rgb(235,61,29)" fg:x="792204" fg:w="21681"/><text x="97.1619%" y="191.50">QU..</text></g><g><title>QUEUE_TEST.exe`core::num::dec2flt::impl$3::from_str (21,656 samples, 2.65%)</title><rect x="96.9149%" y="165" width="2.6492%" height="15" fill="rgb(219,207,3)" fg:x="792229" fg:w="21656"/><text x="97.1649%" y="175.50">QU..</text></g><g><title>QUEUE_TEST.exe`core::num::dec2flt::dec2flt (20,910 samples, 2.56%)</title><rect x="97.0062%" y="149" width="2.5580%" height="15" fill="rgb(222,56,46)" fg:x="792975" fg:w="20910"/><text x="97.2562%" y="159.50">QU..</text></g><g><title>QUEUE_TEST.exe`core::num::dec2flt::parse::parse_number (14,818 samples, 1.81%)</title><rect x="97.7514%" y="133" width="1.8127%" height="15" fill="rgb(239,76,54)" fg:x="799067" fg:w="14818"/><text x="98.0014%" y="143.50">Q..</text></g><g><title>QUEUE_TEST.exe`core::num::dec2flt::parse::parse_partial_number (12,887 samples, 1.58%)</title><rect x="97.9876%" y="117" width="1.5765%" height="15" fill="rgb(231,124,27)" fg:x="800998" fg:w="12887"/><text x="98.2376%" y="127.50"></text></g><g><title>QUEUE_TEST.exe`core::slice::impl$0::split_first (1,127 samples, 0.14%)</title><rect x="99.4263%" y="101" width="0.1379%" height="15" fill="rgb(249,195,6)" fg:x="812758" fg:w="1127"/><text x="99.6763%" y="111.50"></text></g><g><title>QUEUE_TEST.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result (25,184 samples, 3.08%)</title><rect x="96.6249%" y="245" width="3.0808%" height="15" fill="rgb(237,174,47)" fg:x="789858" fg:w="25184"/><text x="96.8749%" y="255.50">QUE..</text></g><g><title>QUEUE_TEST.exe`serde::de::impl$5::deserialize&lt;f64,ref_mut$&lt;csv::deserializer::DeRecordWrap&lt;csv::deserializer::DeStringRecord&gt; &gt; &gt;(core::marker::PhantomData&lt;f64&gt;, csv::deserializer::DeRecordWrap (24,360 samples, 2.98%)</title><rect x="96.7257%" y="229" width="2.9800%" height="15" fill="rgb(206,201,31)" fg:x="790682" fg:w="24360"/><text x="96.9757%" y="239.50">QUE..</text></g><g><title>QUEUE_TEST.exe`serde::de::impls::impl$76::deserialize(csv::deserializer::DeRecordWrap (24,035 samples, 2.94%)</title><rect x="96.7654%" y="213" width="2.9402%" height="15" fill="rgb(231,57,52)" fg:x="791007" fg:w="24035"/><text x="97.0154%" y="223.50">QU..</text></g><g><title>QUEUE_TEST.exe`csv::deserializer::impl$3::deserialize_f64(csv::deserializer::DeRecordWrap (24,035 samples, 2.94%)</title><rect x="96.7654%" y="197" width="2.9402%" height="15" fill="rgb(248,177,22)" fg:x="791007" fg:w="24035"/><text x="97.0154%" y="207.50">QU..</text></g><g><title>QUEUE_TEST.exe`serde::de::impls::impl$76::deserialize::impl$0::visit_f64 (1,157 samples, 0.14%)</title><rect x="99.5641%" y="181" width="0.1415%" height="15" fill="rgb(215,211,37)" fg:x="813885" fg:w="1157"/><text x="99.8141%" y="191.50"></text></g><g><title>QUEUE_TEST.exe`enum2$&lt;core::option::Option&lt;f64&gt; &gt;::is_some (137 samples, 0.02%)</title><rect x="99.7057%" y="245" width="0.0168%" height="15" fill="rgb(241,128,51)" fg:x="815042" fg:w="137"/><text x="99.9557%" y="255.50"></text></g><g><title>QUEUE_TEST.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, core::ops::range::Range (103 samples, 0.01%)</title><rect x="99.7805%" y="101" width="0.0126%" height="15" fill="rgb(227,165,31)" fg:x="815654" fg:w="103"/><text x="100.0305%" y="111.50"></text></g><g><title>QUEUE_TEST.exe`csv::deserializer::impl$0::next_header_bytes(csv::deserializer::DeRecordWrap (810 samples, 0.10%)</title><rect x="99.7234%" y="213" width="0.0991%" height="15" fill="rgb(228,167,24)" fg:x="815187" fg:w="810"/><text x="99.9734%" y="223.50"></text></g><g><title>QUEUE_TEST.exe`csv::deserializer::impl$1::next_header_bytes (810 samples, 0.10%)</title><rect x="99.7234%" y="197" width="0.0991%" height="15" fill="rgb(228,143,12)" fg:x="815187" fg:w="810"/><text x="99.9734%" y="207.50"></text></g><g><title>QUEUE_TEST.exe`csv::deserializer::impl$1::next_header (810 samples, 0.10%)</title><rect x="99.7234%" y="181" width="0.0991%" height="15" fill="rgb(249,149,8)" fg:x="815187" fg:w="810"/><text x="99.9734%" y="191.50"></text></g><g><title>QUEUE_TEST.exe`enum2$&lt;core::option::Option&lt;ref_mut$&lt;csv::string_record::StringRecordIter&gt; &gt; &gt;::and_then(enum2$&lt;core::option::Option&lt;ref_mut$ (810 samples, 0.10%)</title><rect x="99.7234%" y="165" width="0.0991%" height="15" fill="rgb(243,35,44)" fg:x="815187" fg:w="810"/><text x="99.9734%" y="175.50"></text></g><g><title>QUEUE_TEST.exe`csv::deserializer::impl$1::next_header::closure$0 (810 samples, 0.10%)</title><rect x="99.7234%" y="149" width="0.0991%" height="15" fill="rgb(246,89,9)" fg:x="815187" fg:w="810"/><text x="99.9734%" y="159.50"></text></g><g><title>QUEUE_TEST.exe`csv::string_record::impl$14::next (810 samples, 0.10%)</title><rect x="99.7234%" y="133" width="0.0991%" height="15" fill="rgb(233,213,13)" fg:x="815187" fg:w="810"/><text x="99.9734%" y="143.50"></text></g><g><title>QUEUE_TEST.exe`csv::byte_record::impl$19::next (810 samples, 0.10%)</title><rect x="99.7234%" y="117" width="0.0991%" height="15" fill="rgb(233,141,41)" fg:x="815187" fg:w="810"/><text x="99.9734%" y="127.50"></text></g><g><title>QUEUE_TEST.exe`csv::byte_record::Bounds::ends (240 samples, 0.03%)</title><rect x="99.7931%" y="101" width="0.0294%" height="15" fill="rgb(239,167,4)" fg:x="815757" fg:w="240"/><text x="100.0431%" y="111.50"></text></g><g><title>QUEUE_TEST.exe`serde::de::MapAccess::next_key(csv::deserializer::DeRecordWrap (1,633 samples, 0.20%)</title><rect x="99.7224%" y="245" width="0.1998%" height="15" fill="rgb(209,217,16)" fg:x="815179" fg:w="1633"/><text x="99.9724%" y="255.50"></text></g><g><title>QUEUE_TEST.exe`csv::deserializer::impl$7::next_key_seed(csv::deserializer::DeRecordWrap&lt;csv::deserializer::DeStringRecord&gt;**, core::marker::PhantomData (1,633 samples, 0.20%)</title><rect x="99.7224%" y="229" width="0.1998%" height="15" fill="rgb(219,88,35)" fg:x="815179" fg:w="1633"/><text x="99.9724%" y="239.50"></text></g><g><title>QUEUE_TEST.exe`serde::de::impl$5::deserialize(core::marker::PhantomData&lt;QUEUE_TEST::csvreader::_::impl$0::deserialize::__Field&gt;, serde::de::value::BorrowedBytesDeserializer (815 samples, 0.10%)</title><rect x="99.8225%" y="213" width="0.0997%" height="15" fill="rgb(220,193,23)" fg:x="815997" fg:w="815"/><text x="100.0725%" y="223.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::csvreader::_::impl$0::deserialize::impl$1::deserialize(serde::de::value::BorrowedBytesDeserializer (815 samples, 0.10%)</title><rect x="99.8225%" y="197" width="0.0997%" height="15" fill="rgb(230,90,52)" fg:x="815997" fg:w="815"/><text x="100.0725%" y="207.50"></text></g><g><title>QUEUE_TEST.exe`serde::de::value::impl$40::deserialize_identifier(serde::de::value::BorrowedBytesDeserializer (815 samples, 0.10%)</title><rect x="99.8225%" y="181" width="0.0997%" height="15" fill="rgb(252,106,19)" fg:x="815997" fg:w="815"/><text x="100.0725%" y="191.50"></text></g><g><title>QUEUE_TEST.exe`serde::de::value::impl$40::deserialize_any(serde::de::value::BorrowedBytesDeserializer (815 samples, 0.10%)</title><rect x="99.8225%" y="165" width="0.0997%" height="15" fill="rgb(206,74,20)" fg:x="815997" fg:w="815"/><text x="100.0725%" y="175.50"></text></g><g><title>QUEUE_TEST.exe`serde::de::Visitor::visit_borrowed_bytes(QUEUE_TEST::csvreader::_::impl$0::deserialize::__FieldVisitor, ref$&lt;slice2$ (815 samples, 0.10%)</title><rect x="99.8225%" y="149" width="0.0997%" height="15" fill="rgb(230,138,44)" fg:x="815997" fg:w="815"/><text x="100.0725%" y="159.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::csvreader::_::impl$0::deserialize::impl$0::visit_bytes(QUEUE_TEST::csvreader::_::impl$0::deserialize::__FieldVisitor, ref$&lt;slice2$ (815 samples, 0.10%)</title><rect x="99.8225%" y="133" width="0.0997%" height="15" fill="rgb(235,182,43)" fg:x="815997" fg:w="815"/><text x="100.0725%" y="143.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::csvreader::_::impl$0::deserialize(csv::deserializer::DeRecordWrap (27,578 samples, 3.37%)</title><rect x="96.5589%" y="293" width="3.3737%" height="15" fill="rgb(242,16,51)" fg:x="789319" fg:w="27578"/><text x="96.8089%" y="303.50">QUE..</text></g><g><title>QUEUE_TEST.exe`csv::deserializer::impl$3::deserialize_struct&lt;csv::deserializer::DeStringRecord,QUEUE_TEST::csvreader::_::impl$0::deserialize::__Visitor&gt;(csv::deserializer::DeRecordWrap&lt;csv::deserializer::DeStringRecord&gt;*, ref$&lt;str$&gt;, ref$&lt;slice2$&lt;ref$ (27,578 samples, 3.37%)</title><rect x="96.5589%" y="277" width="3.3737%" height="15" fill="rgb(248,9,4)" fg:x="789319" fg:w="27578"/><text x="96.8089%" y="287.50">QUE..</text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::csvreader::_::impl$0::deserialize::impl$2::visit_map(QUEUE_TEST::csvreader::_::impl$0::deserialize::__Visitor, csv::deserializer::DeRecordWrap (27,467 samples, 3.36%)</title><rect x="96.5725%" y="261" width="3.3601%" height="15" fill="rgb(210,31,22)" fg:x="789430" fg:w="27467"/><text x="96.8225%" y="271.50">QUE..</text></g><g><title>QUEUE_TEST.exe`serde::de::MapAccess::next_value(csv::deserializer::DeRecordWrap (85 samples, 0.01%)</title><rect x="99.9222%" y="245" width="0.0104%" height="15" fill="rgb(239,54,39)" fg:x="816812" fg:w="85"/><text x="100.1722%" y="255.50"></text></g><g><title>QUEUE_TEST.exe`csv::deserializer::impl$7::next_value_seed(csv::deserializer::DeRecordWrap&lt;csv::deserializer::DeStringRecord&gt;**, core::marker::PhantomData (85 samples, 0.01%)</title><rect x="99.9222%" y="229" width="0.0104%" height="15" fill="rgb(230,99,41)" fg:x="816812" fg:w="85"/><text x="100.1722%" y="239.50"></text></g><g><title>QUEUE_TEST.exe`enum2$&lt;core::option::Option&lt;ref$&lt;csv::string_record::StringRecord&gt; &gt; &gt;::map(enum2$&lt;core::option::Option&lt;ref$&lt;csv::string_record::StringRecord&gt; &gt; &gt;, csv::deserializer::deserialize_string_record::closure_env$0 (145 samples, 0.02%)</title><rect x="99.9386%" y="293" width="0.0177%" height="15" fill="rgb(253,106,12)" fg:x="816946" fg:w="145"/><text x="100.1886%" y="303.50"></text></g><g><title>QUEUE_TEST.exe`csv::deserializer::deserialize_string_record::closure$0(csv::deserializer::deserialize_string_record::closure_env$0 (136 samples, 0.02%)</title><rect x="99.9397%" y="277" width="0.0166%" height="15" fill="rgb(213,46,41)" fg:x="816955" fg:w="136"/><text x="100.1897%" y="287.50"></text></g><g><title>QUEUE_TEST.exe`csv::string_record::StringRecord::iter (136 samples, 0.02%)</title><rect x="99.9397%" y="261" width="0.0166%" height="15" fill="rgb(215,133,35)" fg:x="816955" fg:w="136"/><text x="100.1897%" y="271.50"></text></g><g><title>QUEUE_TEST.exe`csv::string_record::impl$13::into_iter (136 samples, 0.02%)</title><rect x="99.9397%" y="245" width="0.0166%" height="15" fill="rgb(213,28,5)" fg:x="816955" fg:w="136"/><text x="100.1897%" y="255.50"></text></g><g><title>QUEUE_TEST.exe`csv::byte_record::ByteRecord::iter (136 samples, 0.02%)</title><rect x="99.9397%" y="229" width="0.0166%" height="15" fill="rgb(215,77,49)" fg:x="816955" fg:w="136"/><text x="100.1897%" y="239.50"></text></g><g><title>QUEUE_TEST.exe`csv::byte_record::impl$17::into_iter (136 samples, 0.02%)</title><rect x="99.9397%" y="213" width="0.0166%" height="15" fill="rgb(248,100,22)" fg:x="816955" fg:w="136"/><text x="100.1897%" y="223.50"></text></g><g><title>QUEUE_TEST.exe`csv::byte_record::ByteRecord::as_slice (120 samples, 0.01%)</title><rect x="99.9416%" y="197" width="0.0147%" height="15" fill="rgb(208,67,9)" fg:x="816971" fg:w="120"/><text x="100.1916%" y="207.50"></text></g><g><title>QUEUE_TEST.exe`csv::byte_record::Bounds::end (83 samples, 0.01%)</title><rect x="99.9462%" y="181" width="0.0102%" height="15" fill="rgb(219,133,21)" fg:x="817008" fg:w="83"/><text x="100.1962%" y="191.50"></text></g><g><title>`0x7FF9679A059B (105 samples, 0.01%)</title><rect x="99.9618%" y="277" width="0.0128%" height="15" fill="rgb(246,46,29)" fg:x="817136" fg:w="105"/><text x="100.2118%" y="287.50"></text></g><g><title>`0x7FF9679A05A2 (92 samples, 0.01%)</title><rect x="99.9747%" y="277" width="0.0113%" height="15" fill="rgb(246,185,52)" fg:x="817241" fg:w="92"/><text x="100.2247%" y="287.50"></text></g><g><title>QUEUE_TEST.exe`enum2$&lt;core::result::Result&lt;alloc::collections::vec_deque::VecDeque&lt;QUEUE_TEST::csvreader::Rec,alloc::alloc::Global&gt;,alloc::boxed::Box&lt;dyn$&lt;core::error::Error&gt;,alloc::alloc::Global&gt; &gt; &gt;::unwrap(enum2$&lt;core::result::Result&lt;alloc::collections::vec_deque::VecDeque&lt;QUEUE_TEST::csvreader::Rec,alloc::alloc::Global&gt;,alloc::boxed::Box&lt;dyn$ (54,850 samples, 6.71%)</title><rect x="93.2801%" y="373" width="6.7099%" height="15" fill="rgb(252,136,11)" fg:x="762516" fg:w="54850"/><text x="93.5301%" y="383.50">QUEUE_TES..</text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::csvreader::csvcon (54,850 samples, 6.71%)</title><rect x="93.2801%" y="357" width="6.7099%" height="15" fill="rgb(219,138,53)" fg:x="762516" fg:w="54850"/><text x="93.5301%" y="367.50">QUEUE_TES..</text></g><g><title>QUEUE_TEST.exe`csv::reader::impl$9::next&lt;std::fs::File,QUEUE_TEST::csvreader::Rec&gt;(csv::reader::DeserializeRecordsIter (51,800 samples, 6.34%)</title><rect x="93.6532%" y="341" width="6.3368%" height="15" fill="rgb(211,51,23)" fg:x="765566" fg:w="51800"/><text x="93.9032%" y="351.50">QUEUE_TE..</text></g><g><title>QUEUE_TEST.exe`enum2$&lt;core::option::Option&lt;csv::string_record::StringRecord&gt; &gt;::as_ref (28,137 samples, 3.44%)</title><rect x="96.5479%" y="325" width="3.4421%" height="15" fill="rgb(247,221,28)" fg:x="789229" fg:w="28137"/><text x="96.7979%" y="335.50">QUE..</text></g><g><title>QUEUE_TEST.exe`csv::deserializer::deserialize_string_record&lt;QUEUE_TEST::csvreader::Rec&gt;(csv::string_record::StringRecord*, enum2$&lt;core::option::Option&lt;ref$ (28,100 samples, 3.44%)</title><rect x="96.5524%" y="309" width="3.4375%" height="15" fill="rgb(251,222,45)" fg:x="789266" fg:w="28100"/><text x="96.8024%" y="319.50">QUE..</text></g><g><title>QUEUE_TEST.exe`enum2$&lt;core::result::Result&lt;QUEUE_TEST::csvreader::Rec,csv::deserializer::DeserializeError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;QUEUE_TEST::csvreader::Rec,csv::deserializer::DeserializeError&gt; &gt;, csv::deserializer::deserialize_string_record::closure_env$1 (275 samples, 0.03%)</title><rect x="99.9563%" y="293" width="0.0336%" height="15" fill="rgb(217,162,53)" fg:x="817091" fg:w="275"/><text x="100.2063%" y="303.50"></text></g><g><title>QUEUE_TEST.exe`invoke_main() (817,417 samples, 100.00%)</title><rect x="0.0006%" y="549" width="99.9962%" height="15" fill="rgb(229,93,14)" fg:x="5" fg:w="817417"/><text x="0.2506%" y="559.50">QUEUE_TEST.exe`invoke_main()</text></g><g><title>QUEUE_TEST.exe`main (817,417 samples, 100.00%)</title><rect x="0.0006%" y="533" width="99.9962%" height="15" fill="rgb(209,67,49)" fg:x="5" fg:w="817417"/><text x="0.2506%" y="543.50">QUEUE_TEST.exe`main</text></g><g><title>QUEUE_TEST.exe`std::rt::lang_start_internal (817,417 samples, 100.00%)</title><rect x="0.0006%" y="517" width="99.9962%" height="15" fill="rgb(213,87,29)" fg:x="5" fg:w="817417"/><text x="0.2506%" y="527.50">QUEUE_TEST.exe`std::rt::lang_start_internal</text></g><g><title>QUEUE_TEST.exe`std::panic::catch_unwind (817,417 samples, 100.00%)</title><rect x="0.0006%" y="501" width="99.9962%" height="15" fill="rgb(205,151,52)" fg:x="5" fg:w="817417"/><text x="0.2506%" y="511.50">QUEUE_TEST.exe`std::panic::catch_unwind</text></g><g><title>QUEUE_TEST.exe`std::panicking::try (817,417 samples, 100.00%)</title><rect x="0.0006%" y="485" width="99.9962%" height="15" fill="rgb(253,215,39)" fg:x="5" fg:w="817417"/><text x="0.2506%" y="495.50">QUEUE_TEST.exe`std::panicking::try</text></g><g><title>QUEUE_TEST.exe`std::panicking::try::do_call (817,417 samples, 100.00%)</title><rect x="0.0006%" y="469" width="99.9962%" height="15" fill="rgb(221,220,41)" fg:x="5" fg:w="817417"/><text x="0.2506%" y="479.50">QUEUE_TEST.exe`std::panicking::try::do_call</text></g><g><title>QUEUE_TEST.exe`std::rt::lang_start_internal::closure$1 (817,416 samples, 100.00%)</title><rect x="0.0007%" y="453" width="99.9961%" height="15" fill="rgb(218,133,21)" fg:x="6" fg:w="817416"/><text x="0.2507%" y="463.50">QUEUE_TEST.exe`std::rt::lang_start_internal::closure$1</text></g><g><title>QUEUE_TEST.exe`std::panic::catch_unwind (817,416 samples, 100.00%)</title><rect x="0.0007%" y="437" width="99.9961%" height="15" fill="rgb(221,193,43)" fg:x="6" fg:w="817416"/><text x="0.2507%" y="447.50">QUEUE_TEST.exe`std::panic::catch_unwind</text></g><g><title>QUEUE_TEST.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (817,416 samples, 100.00%)</title><rect x="0.0007%" y="421" width="99.9961%" height="15" fill="rgb(240,128,52)" fg:x="6" fg:w="817416"/><text x="0.2507%" y="431.50">QUEUE_TEST.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$</text></g><g><title>QUEUE_TEST.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (817,416 samples, 100.00%)</title><rect x="0.0007%" y="405" width="99.9961%" height="15" fill="rgb(253,114,12)" fg:x="6" fg:w="817416"/><text x="0.2507%" y="415.50">QUEUE_TEST.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::main (817,416 samples, 100.00%)</title><rect x="0.0007%" y="389" width="99.9961%" height="15" fill="rgb(215,223,47)" fg:x="6" fg:w="817416"/><text x="0.2507%" y="399.50">QUEUE_TEST.exe`QUEUE_TEST::main</text></g><g><title>QUEUE_TEST.exe`__scrt_common_main_seh() (817,423 samples, 100.00%)</title><rect x="0.0006%" y="565" width="99.9969%" height="15" fill="rgb(248,225,23)" fg:x="5" fg:w="817423"/><text x="0.2506%" y="575.50">QUEUE_TEST.exe`__scrt_common_main_seh()</text></g><g><title>`0x7FF98231BF2C (817,426 samples, 100.00%)</title><rect x="0.0006%" y="597" width="99.9973%" height="15" fill="rgb(250,108,0)" fg:x="5" fg:w="817426"/><text x="0.2506%" y="607.50">`0x7FF98231BF2C</text></g><g><title>`0x7FF981A7E8D7 (817,426 samples, 100.00%)</title><rect x="0.0006%" y="581" width="99.9973%" height="15" fill="rgb(228,208,7)" fg:x="5" fg:w="817426"/><text x="0.2506%" y="591.50">`0x7FF981A7E8D7</text></g><g><title>all (817,448 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(244,45,10)" fg:x="0" fg:w="817448"/><text x="0.2500%" y="623.50"></text></g></svg></svg>