<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="742" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="725.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="725.00"> </text><svg id="frames" x="10" width="1180" total_samples="524259"><g><title>QUEUE_TEST.exe`QUEUE_TEST::collisionhandling::fast_forward (137 samples, 0.03%)</title><rect x="0.1679%" y="421" width="0.0261%" height="15" fill="rgb(227,0,7)" fg:x="880" fg:w="137"/><text x="0.4179%" y="431.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::vectors::impl$6::add_assign (126 samples, 0.02%)</title><rect x="0.1700%" y="405" width="0.0240%" height="15" fill="rgb(217,0,24)" fg:x="891" fg:w="126"/><text x="0.4200%" y="415.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::collisionhandling::beta2 (126 samples, 0.02%)</title><rect x="0.2928%" y="373" width="0.0240%" height="15" fill="rgb(221,193,54)" fg:x="1535" fg:w="126"/><text x="0.5428%" y="383.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::collisionhandling::b_and_k2 (399 samples, 0.08%)</title><rect x="0.2503%" y="389" width="0.0761%" height="15" fill="rgb(248,212,6)" fg:x="1312" fg:w="399"/><text x="0.5003%" y="399.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::vectors::Vector::dot (60 samples, 0.01%)</title><rect x="0.3317%" y="357" width="0.0114%" height="15" fill="rgb(208,68,35)" fg:x="1739" fg:w="60"/><text x="0.5817%" y="367.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::particle::Particle::relative_speed (765 samples, 0.15%)</title><rect x="0.3264%" y="389" width="0.1459%" height="15" fill="rgb(232,128,0)" fg:x="1711" fg:w="765"/><text x="0.5764%" y="399.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::vectors::impl$7::sub (765 samples, 0.15%)</title><rect x="0.3264%" y="373" width="0.1459%" height="15" fill="rgb(207,160,47)" fg:x="1711" fg:w="765"/><text x="0.5764%" y="383.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::vectors::impl$10::div (677 samples, 0.13%)</title><rect x="0.3432%" y="357" width="0.1291%" height="15" fill="rgb(228,23,34)" fg:x="1799" fg:w="677"/><text x="0.5932%" y="367.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::vectors::square (120 samples, 0.02%)</title><rect x="0.4494%" y="341" width="0.0229%" height="15" fill="rgb(218,30,26)" fg:x="2356" fg:w="120"/><text x="0.6994%" y="351.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::vectors::impl$14::neg (77 samples, 0.01%)</title><rect x="0.4795%" y="389" width="0.0147%" height="15" fill="rgb(220,122,19)" fg:x="2514" fg:w="77"/><text x="0.7295%" y="399.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::vectors::impl$12::mul (73 samples, 0.01%)</title><rect x="0.4803%" y="373" width="0.0139%" height="15" fill="rgb(250,228,42)" fg:x="2518" fg:w="73"/><text x="0.7303%" y="383.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::collisionhandling::compute_acc (1,689 samples, 0.32%)</title><rect x="0.1974%" y="405" width="0.3222%" height="15" fill="rgb(240,193,28)" fg:x="1035" fg:w="1689"/><text x="0.4474%" y="415.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::collisionhandling::omega_0_from_k (111 samples, 0.02%)</title><rect x="0.6138%" y="373" width="0.0212%" height="15" fill="rgb(216,20,37)" fg:x="3218" fg:w="111"/><text x="0.8638%" y="383.50"></text></g><g><title>QUEUE_TEST.exe`std::f64::impl$0::sqrt (111 samples, 0.02%)</title><rect x="0.6138%" y="357" width="0.0212%" height="15" fill="rgb(206,188,39)" fg:x="3218" fg:w="111"/><text x="0.8638%" y="367.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::collisionhandling::omega_l (583 samples, 0.11%)</title><rect x="0.5734%" y="389" width="0.1112%" height="15" fill="rgb(217,207,13)" fg:x="3006" fg:w="583"/><text x="0.8234%" y="399.50"></text></g><g><title>QUEUE_TEST.exe`std::f64::impl$0::sqrt (260 samples, 0.05%)</title><rect x="0.6350%" y="373" width="0.0496%" height="15" fill="rgb(231,73,38)" fg:x="3329" fg:w="260"/><text x="0.8850%" y="383.50"></text></g><g><title>QUEUE_TEST.exe`core::f64::impl$0::max (192 samples, 0.04%)</title><rect x="0.6846%" y="389" width="0.0366%" height="15" fill="rgb(225,20,46)" fg:x="3589" fg:w="192"/><text x="0.9346%" y="399.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::collisionhandling::get_next_time (1,310 samples, 0.25%)</title><rect x="0.5196%" y="405" width="0.2499%" height="15" fill="rgb(210,31,41)" fg:x="2724" fg:w="1310"/><text x="0.7696%" y="415.50"></text></g><g><title>QUEUE_TEST.exe`core::f64::impl$0::min (253 samples, 0.05%)</title><rect x="0.7212%" y="389" width="0.0483%" height="15" fill="rgb(221,200,47)" fg:x="3781" fg:w="253"/><text x="0.9712%" y="399.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::collisionhandling::process_pair_get_dv (3,105 samples, 0.59%)</title><rect x="0.1940%" y="421" width="0.5923%" height="15" fill="rgb(226,26,5)" fg:x="1017" fg:w="3105"/><text x="0.4440%" y="431.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::vectors::impl$12::mul (88 samples, 0.02%)</title><rect x="0.7695%" y="405" width="0.0168%" height="15" fill="rgb(249,33,26)" fg:x="4034" fg:w="88"/><text x="1.0195%" y="415.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::particle::Particle::apply_dv (66 samples, 0.01%)</title><rect x="0.7863%" y="421" width="0.0126%" height="15" fill="rgb(235,183,28)" fg:x="4122" fg:w="66"/><text x="1.0363%" y="431.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::collisionhandling::process_collision (3,646 samples, 0.70%)</title><rect x="0.1614%" y="437" width="0.6955%" height="15" fill="rgb(221,5,38)" fg:x="846" fg:w="3646"/><text x="0.4114%" y="447.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::vectors::impl$7::sub (304 samples, 0.06%)</title><rect x="0.7988%" y="421" width="0.0580%" height="15" fill="rgb(247,18,42)" fg:x="4188" fg:w="304"/><text x="1.0488%" y="431.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::csvreader::Rec::p1 (517 samples, 0.10%)</title><rect x="0.8568%" y="437" width="0.0986%" height="15" fill="rgb(241,131,45)" fg:x="4492" fg:w="517"/><text x="1.1068%" y="447.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::particle::Particle::new (463 samples, 0.09%)</title><rect x="0.8671%" y="421" width="0.0883%" height="15" fill="rgb(249,31,29)" fg:x="4546" fg:w="463"/><text x="1.1171%" y="431.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::particle::Particle::mass_from_radius (407 samples, 0.08%)</title><rect x="0.8778%" y="405" width="0.0776%" height="15" fill="rgb(225,111,53)" fg:x="4602" fg:w="407"/><text x="1.1278%" y="415.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::vec_deque::VecDeque&lt;ref$&lt;QUEUE_TEST::KeyVal&gt;,alloc::alloc::Global&gt;::buffer_read (363 samples, 0.07%)</title><rect x="0.9793%" y="389" width="0.0692%" height="15" fill="rgb(238,160,17)" fg:x="5134" fg:w="363"/><text x="1.2293%" y="399.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::vec_deque::VecDeque&lt;ref$&lt;QUEUE_TEST::KeyVal&gt;,alloc::alloc::Global&gt;::ptr (363 samples, 0.07%)</title><rect x="0.9793%" y="373" width="0.0692%" height="15" fill="rgb(214,148,48)" fg:x="5134" fg:w="363"/><text x="1.2293%" y="383.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::vec_deque::VecDeque&lt;ref$&lt;QUEUE_TEST::KeyVal&gt;,alloc::alloc::Global&gt;::pop_front (469 samples, 0.09%)</title><rect x="0.9625%" y="405" width="0.0895%" height="15" fill="rgb(232,36,49)" fg:x="5046" fg:w="469"/><text x="1.2125%" y="415.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::sequentialbucketqueue::impl$1::pop(QUEUE_TEST::sequentialbucketqueue::Bqueue&lt;ref$ (489 samples, 0.09%)</title><rect x="0.9617%" y="437" width="0.0933%" height="15" fill="rgb(209,103,24)" fg:x="5042" fg:w="489"/><text x="1.2117%" y="447.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::sequentialbucketqueue::Bqueue&lt;ref$&lt;QUEUE_TEST::KeyVal&gt; &gt;::pop (489 samples, 0.09%)</title><rect x="0.9617%" y="421" width="0.0933%" height="15" fill="rgb(229,88,8)" fg:x="5042" fg:w="489"/><text x="1.2117%" y="431.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::vec_deque::VecDeque&lt;ref$&lt;QUEUE_TEST::KeyVal&gt;,alloc::alloc::Global&gt;::push_back (57 samples, 0.01%)</title><rect x="1.0602%" y="405" width="0.0109%" height="15" fill="rgb(213,181,19)" fg:x="5558" fg:w="57"/><text x="1.3102%" y="415.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::sequentialbucketqueue::impl$1::push(QUEUE_TEST::sequentialbucketqueue::Bqueue&lt;ref$ (142 samples, 0.03%)</title><rect x="1.0550%" y="437" width="0.0271%" height="15" fill="rgb(254,191,54)" fg:x="5531" fg:w="142"/><text x="1.3050%" y="447.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::sequentialbucketqueue::Bqueue&lt;ref$&lt;QUEUE_TEST::KeyVal&gt; &gt;::push (142 samples, 0.03%)</title><rect x="1.0550%" y="421" width="0.0271%" height="15" fill="rgb(241,83,37)" fg:x="5531" fg:w="142"/><text x="1.3050%" y="431.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::vec_deque::VecDeque&lt;ref$&lt;QUEUE_TEST::KeyVal&gt;,alloc::alloc::Global&gt;::is_full (399 samples, 0.08%)</title><rect x="1.1435%" y="325" width="0.0761%" height="15" fill="rgb(233,36,39)" fg:x="5995" fg:w="399"/><text x="1.3935%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::vec_deque::VecDeque&lt;ref$&lt;QUEUE_TEST::KeyVal&gt;,alloc::alloc::Global&gt;::ptr (76 samples, 0.01%)</title><rect x="1.2196%" y="309" width="0.0145%" height="15" fill="rgb(226,3,54)" fg:x="6394" fg:w="76"/><text x="1.4696%" y="319.50"></text></g><g><title>`0x7FF98228AA4D (129 samples, 0.02%)</title><rect x="1.2448%" y="69" width="0.0246%" height="15" fill="rgb(245,192,40)" fg:x="6526" fg:w="129"/><text x="1.4948%" y="79.50"></text></g><g><title>`0x7FF98227BE86 (129 samples, 0.02%)</title><rect x="1.2448%" y="53" width="0.0246%" height="15" fill="rgb(238,167,29)" fg:x="6526" fg:w="129"/><text x="1.4948%" y="63.50"></text></g><g><title>`0x7FF98227C20E (127 samples, 0.02%)</title><rect x="1.2452%" y="37" width="0.0242%" height="15" fill="rgb(232,182,51)" fg:x="6528" fg:w="127"/><text x="1.4952%" y="47.50"></text></g><g><title>`0x7FF98228AB69 (58 samples, 0.01%)</title><rect x="1.2700%" y="69" width="0.0111%" height="15" fill="rgb(231,60,39)" fg:x="6658" fg:w="58"/><text x="1.5200%" y="79.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::vec_deque::VecDeque&lt;ref$&lt;QUEUE_TEST::KeyVal&gt;,alloc::alloc::Global&gt;::push_back (841 samples, 0.16%)</title><rect x="1.1252%" y="341" width="0.1604%" height="15" fill="rgb(208,69,12)" fg:x="5899" fg:w="841"/><text x="1.3752%" y="351.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::vec_deque::VecDeque&lt;ref$&lt;QUEUE_TEST::KeyVal&gt;,alloc::alloc::Global&gt;::to_physical_idx (346 samples, 0.07%)</title><rect x="1.2196%" y="325" width="0.0660%" height="15" fill="rgb(235,93,37)" fg:x="6394" fg:w="346"/><text x="1.4696%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::vec_deque::VecDeque&lt;ref$&lt;QUEUE_TEST::KeyVal&gt;,alloc::alloc::Global&gt;::wrap_add (270 samples, 0.05%)</title><rect x="1.2341%" y="309" width="0.0515%" height="15" fill="rgb(213,116,39)" fg:x="6470" fg:w="270"/><text x="1.4841%" y="319.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::vec_deque::VecDeque&lt;ref$&lt;QUEUE_TEST::KeyVal&gt;,alloc::alloc::Global&gt;::capacity (270 samples, 0.05%)</title><rect x="1.2341%" y="293" width="0.0515%" height="15" fill="rgb(222,207,29)" fg:x="6470" fg:w="270"/><text x="1.4841%" y="303.50"></text></g><g><title>QUEUE_TEST.exe`alloc::raw_vec::RawVec&lt;ref$&lt;QUEUE_TEST::KeyVal&gt;,alloc::alloc::Global&gt;::capacity (229 samples, 0.04%)</title><rect x="1.2419%" y="277" width="0.0437%" height="15" fill="rgb(206,96,30)" fg:x="6511" fg:w="229"/><text x="1.4919%" y="287.50"></text></g><g><title>QUEUE_TEST.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::capacity (229 samples, 0.04%)</title><rect x="1.2419%" y="261" width="0.0437%" height="15" fill="rgb(218,138,4)" fg:x="6511" fg:w="229"/><text x="1.4919%" y="271.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::vec_deque::VecDeque&lt;ref$&lt;QUEUE_TEST::KeyVal&gt;,alloc::alloc::Global&gt;::grow&lt;ref$&lt;QUEUE_TEST::KeyVal&gt;,alloc::alloc::Global&gt; (229 samples, 0.04%)</title><rect x="1.2419%" y="245" width="0.0437%" height="15" fill="rgb(250,191,14)" fg:x="6511" fg:w="229"/><text x="1.4919%" y="255.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::vec_deque::VecDeque&lt;ref$&lt;QUEUE_TEST::KeyVal&gt;,alloc::alloc::Global&gt;::handle_capacity_increase (228 samples, 0.04%)</title><rect x="1.2421%" y="229" width="0.0435%" height="15" fill="rgb(239,60,40)" fg:x="6512" fg:w="228"/><text x="1.4921%" y="239.50"></text></g><g><title>QUEUE_TEST.exe`alloc::raw_vec::RawVec&lt;ref$&lt;QUEUE_TEST::KeyVal&gt;,alloc::alloc::Global&gt;::grow_one&lt;ref$&lt;QUEUE_TEST::KeyVal&gt;,alloc::alloc::Global&gt; (228 samples, 0.04%)</title><rect x="1.2421%" y="213" width="0.0435%" height="15" fill="rgb(206,27,48)" fg:x="6512" fg:w="228"/><text x="1.4921%" y="223.50"></text></g><g><title>QUEUE_TEST.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (228 samples, 0.04%)</title><rect x="1.2421%" y="197" width="0.0435%" height="15" fill="rgb(225,35,8)" fg:x="6512" fg:w="228"/><text x="1.4921%" y="207.50"></text></g><g><title>QUEUE_TEST.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (228 samples, 0.04%)</title><rect x="1.2421%" y="181" width="0.0435%" height="15" fill="rgb(250,213,24)" fg:x="6512" fg:w="228"/><text x="1.4921%" y="191.50"></text></g><g><title>QUEUE_TEST.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (228 samples, 0.04%)</title><rect x="1.2421%" y="165" width="0.0435%" height="15" fill="rgb(247,123,22)" fg:x="6512" fg:w="228"/><text x="1.4921%" y="175.50"></text></g><g><title>QUEUE_TEST.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (228 samples, 0.04%)</title><rect x="1.2421%" y="149" width="0.0435%" height="15" fill="rgb(231,138,38)" fg:x="6512" fg:w="228"/><text x="1.4921%" y="159.50"></text></g><g><title>QUEUE_TEST.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (227 samples, 0.04%)</title><rect x="1.2423%" y="133" width="0.0433%" height="15" fill="rgb(231,145,46)" fg:x="6513" fg:w="227"/><text x="1.4923%" y="143.50"></text></g><g><title>QUEUE_TEST.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (227 samples, 0.04%)</title><rect x="1.2423%" y="117" width="0.0433%" height="15" fill="rgb(251,118,11)" fg:x="6513" fg:w="227"/><text x="1.4923%" y="127.50"></text></g><g><title>`0x7FF982289A86 (220 samples, 0.04%)</title><rect x="1.2437%" y="101" width="0.0420%" height="15" fill="rgb(217,147,25)" fg:x="6520" fg:w="220"/><text x="1.4937%" y="111.50"></text></g><g><title>`0x7FF982289BC5 (220 samples, 0.04%)</title><rect x="1.2437%" y="85" width="0.0420%" height="15" fill="rgb(247,81,37)" fg:x="6520" fg:w="220"/><text x="1.4937%" y="95.50"></text></g><g><title>QUEUE_TEST.exe`ordered_float::impl$129::div(ordered_float::OrderedFloat (332 samples, 0.06%)</title><rect x="1.2967%" y="341" width="0.0633%" height="15" fill="rgb(209,12,38)" fg:x="6798" fg:w="332"/><text x="1.5467%" y="351.50"></text></g><g><title>QUEUE_TEST.exe`core::ops::arith::impl$242::div (199 samples, 0.04%)</title><rect x="1.3221%" y="325" width="0.0380%" height="15" fill="rgb(227,1,9)" fg:x="6931" fg:w="199"/><text x="1.5721%" y="335.50"></text></g><g><title>`0x7FF97FA48266 (54 samples, 0.01%)</title><rect x="1.3621%" y="341" width="0.0103%" height="15" fill="rgb(248,47,43)" fg:x="7141" fg:w="54"/><text x="1.6121%" y="351.50"></text></g><g><title>QUEUE_TEST.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;QUEUE_TEST::KeyVal,alloc::alloc::Global&gt;*, core::ops::range::RangeFrom (1,589 samples, 0.30%)</title><rect x="1.0821%" y="437" width="0.3031%" height="15" fill="rgb(221,10,30)" fg:x="5673" fg:w="1589"/><text x="1.3321%" y="447.50"></text></g><g><title>QUEUE_TEST.exe`core::iter::traits::iterator::Iterator::fold(core::option::Iter&lt;ref$&lt;QUEUE_TEST::KeyVal&gt; &gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;ref$&lt;ref$&lt;QUEUE_TEST::KeyVal&gt; &gt;,QUEUE_TEST::time_seqential::closure_env$1&lt;QUEUE_TEST::sequentialbucketqueue::Bqueue&lt;ref$ (1,576 samples, 0.30%)</title><rect x="1.0846%" y="421" width="0.3006%" height="15" fill="rgb(210,229,1)" fg:x="5686" fg:w="1576"/><text x="1.3346%" y="431.50"></text></g><g><title>QUEUE_TEST.exe`core::iter::traits::iterator::Iterator::for_each::call::closure$0(core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;ref$&lt;ref$&lt;QUEUE_TEST::KeyVal&gt; &gt;,QUEUE_TEST::time_seqential::closure_env$1&lt;QUEUE_TEST::sequentialbucketqueue::Bqueue&lt;ref$&lt;QUEUE_TEST::KeyVal&gt; &gt; &gt; &gt;*, tuple$ (1,576 samples, 0.30%)</title><rect x="1.0846%" y="405" width="0.3006%" height="15" fill="rgb(222,148,37)" fg:x="5686" fg:w="1576"/><text x="1.3346%" y="415.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::time_seqential::closure$1(QUEUE_TEST::time_seqential::closure_env$1&lt;QUEUE_TEST::sequentialbucketqueue::Bqueue&lt;ref$ (1,576 samples, 0.30%)</title><rect x="1.0846%" y="389" width="0.3006%" height="15" fill="rgb(234,67,33)" fg:x="5686" fg:w="1576"/><text x="1.3346%" y="399.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::sequentialbucketqueue::impl$1::push(QUEUE_TEST::sequentialbucketqueue::Bqueue&lt;ref$ (1,576 samples, 0.30%)</title><rect x="1.0846%" y="373" width="0.3006%" height="15" fill="rgb(247,98,35)" fg:x="5686" fg:w="1576"/><text x="1.3346%" y="383.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::sequentialbucketqueue::Bqueue&lt;ref$&lt;QUEUE_TEST::KeyVal&gt; &gt;::push (1,576 samples, 0.30%)</title><rect x="1.0846%" y="357" width="0.3006%" height="15" fill="rgb(247,138,52)" fg:x="5686" fg:w="1576"/><text x="1.3346%" y="367.50"></text></g><g><title>`0x7FF97FA98040 (67 samples, 0.01%)</title><rect x="1.3724%" y="341" width="0.0128%" height="15" fill="rgb(213,79,30)" fg:x="7195" fg:w="67"/><text x="1.6224%" y="351.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::time_seqential::closure$0(QUEUE_TEST::time_seqential::closure_env$0&lt;QUEUE_TEST::sequentialbucketqueue::Bqueue&lt;ref$ (20,086 samples, 3.83%)</title><rect x="1.3854%" y="421" width="3.8313%" height="15" fill="rgb(246,177,23)" fg:x="7263" fg:w="20086"/><text x="1.6354%" y="431.50">QUEU..</text></g><g><title>QUEUE_TEST.exe`core::tuple::impl$10::eq(tuple$&lt;u32,u32&gt;*, tuple$ (20,086 samples, 3.83%)</title><rect x="1.3854%" y="405" width="3.8313%" height="15" fill="rgb(230,62,27)" fg:x="7263" fg:w="20086"/><text x="1.6354%" y="415.50">QUEU..</text></g><g><title>QUEUE_TEST.exe`core::cmp::impls::impl$24::eq (19,613 samples, 3.74%)</title><rect x="1.4756%" y="389" width="3.7411%" height="15" fill="rgb(216,154,8)" fg:x="7736" fg:w="19613"/><text x="1.7256%" y="399.50">QUEU..</text></g><g><title>QUEUE_TEST.exe`core::slice::iter::impl$182::find(core::slice::iter::Iter&lt;QUEUE_TEST::KeyVal&gt;*, QUEUE_TEST::time_seqential::closure_env$0&lt;QUEUE_TEST::sequentialbucketqueue::Bqueue&lt;ref$ (455,402 samples, 86.87%)</title><rect x="1.3854%" y="437" width="86.8658%" height="15" fill="rgb(244,35,45)" fg:x="7263" fg:w="455402"/><text x="1.6354%" y="447.50">QUEUE_TEST.exe`core::slice::iter::impl$182::find(core::slice::iter::Iter&lt;QUEUE_TEST::KeyVal&gt;*, QUEUE_TEST::time_seqential::closure_env$0&lt;QUEUE_TE..</text></g><g><title>QUEUE_TEST.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter (435,316 samples, 83.03%)</title><rect x="5.2167%" y="421" width="83.0345%" height="15" fill="rgb(251,115,12)" fg:x="27349" fg:w="435316"/><text x="5.4667%" y="431.50">QUEUE_TEST.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter</text></g><g><title>QUEUE_TEST.exe`core::ptr::non_null::impl$13::eq(core::ptr::non_null::NonNull&lt;QUEUE_TEST::KeyVal&gt;*, core::ptr::non_null::NonNull (435,294 samples, 83.03%)</title><rect x="5.2209%" y="405" width="83.0303%" height="15" fill="rgb(240,54,50)" fg:x="27371" fg:w="435294"/><text x="5.4709%" y="415.50">QUEUE_TEST.exe`core::ptr::non_null::impl$13::eq(core::ptr::non_null::NonNull&lt;QUEUE_TEST::KeyVal&gt;*, core::ptr::non_null::NonNull</text></g><g><title>QUEUE_TEST.exe`core::hash::impls::impl$5::hash(tuple$ (254 samples, 0.05%)</title><rect x="88.2549%" y="341" width="0.0484%" height="15" fill="rgb(233,84,52)" fg:x="462684" fg:w="254"/><text x="88.5049%" y="351.50"></text></g><g><title>QUEUE_TEST.exe`core::hash::impls::impl$23::hash(tuple$ (254 samples, 0.05%)</title><rect x="88.2549%" y="325" width="0.0484%" height="15" fill="rgb(207,117,47)" fg:x="462684" fg:w="254"/><text x="88.5049%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`core::hash::impls::impl$11::hash (254 samples, 0.05%)</title><rect x="88.2549%" y="309" width="0.0484%" height="15" fill="rgb(249,43,39)" fg:x="462684" fg:w="254"/><text x="88.5049%" y="319.50"></text></g><g><title>QUEUE_TEST.exe`core::hash::Hasher::write_u32 (254 samples, 0.05%)</title><rect x="88.2549%" y="293" width="0.0484%" height="15" fill="rgb(209,38,44)" fg:x="462684" fg:w="254"/><text x="88.5049%" y="303.50"></text></g><g><title>QUEUE_TEST.exe`std::hash::random::impl$4::write(std::hash::random::DefaultHasher*, ref$&lt;slice2$ (254 samples, 0.05%)</title><rect x="88.2549%" y="277" width="0.0484%" height="15" fill="rgb(236,212,23)" fg:x="462684" fg:w="254"/><text x="88.5049%" y="287.50"></text></g><g><title>QUEUE_TEST.exe`core::hash::sip::impl$4::write(core::hash::sip::SipHasher13*, ref$&lt;slice2$ (254 samples, 0.05%)</title><rect x="88.2549%" y="261" width="0.0484%" height="15" fill="rgb(242,79,21)" fg:x="462684" fg:w="254"/><text x="88.5049%" y="271.50"></text></g><g><title>QUEUE_TEST.exe`core::hash::sip::impl$5::write(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (254 samples, 0.05%)</title><rect x="88.2549%" y="245" width="0.0484%" height="15" fill="rgb(211,96,35)" fg:x="462684" fg:w="254"/><text x="88.5049%" y="255.50"></text></g><g><title>QUEUE_TEST.exe`core::hash::sip::u8to64_le(ref$&lt;slice2$ (210 samples, 0.04%)</title><rect x="88.2632%" y="229" width="0.0401%" height="15" fill="rgb(253,215,40)" fg:x="462728" fg:w="210"/><text x="88.5132%" y="239.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::map::make_hash(std::hash::random::RandomState*, tuple$ (396 samples, 0.08%)</title><rect x="88.2549%" y="373" width="0.0755%" height="15" fill="rgb(211,81,21)" fg:x="462684" fg:w="396"/><text x="88.5049%" y="383.50"></text></g><g><title>QUEUE_TEST.exe`core::hash::BuildHasher::hash_one(std::hash::random::RandomState*, tuple$ (396 samples, 0.08%)</title><rect x="88.2549%" y="357" width="0.0755%" height="15" fill="rgb(208,190,38)" fg:x="462684" fg:w="396"/><text x="88.5049%" y="367.50"></text></g><g><title>QUEUE_TEST.exe`std::hash::random::impl$4::finish (142 samples, 0.03%)</title><rect x="88.3033%" y="341" width="0.0271%" height="15" fill="rgb(235,213,38)" fg:x="462938" fg:w="142"/><text x="88.5533%" y="351.50"></text></g><g><title>QUEUE_TEST.exe`core::hash::sip::impl$4::finish (142 samples, 0.03%)</title><rect x="88.3033%" y="325" width="0.0271%" height="15" fill="rgb(237,122,38)" fg:x="462938" fg:w="142"/><text x="88.5533%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (142 samples, 0.03%)</title><rect x="88.3033%" y="309" width="0.0271%" height="15" fill="rgb(244,218,35)" fg:x="462938" fg:w="142"/><text x="88.5533%" y="319.50"></text></g><g><title>QUEUE_TEST.exe`core::hash::sip::impl$8::d_rounds (92 samples, 0.02%)</title><rect x="88.3128%" y="293" width="0.0175%" height="15" fill="rgb(240,68,47)" fg:x="462988" fg:w="92"/><text x="88.5628%" y="303.50"></text></g><g><title>QUEUE_TEST.exe`core::intrinsics::likely (167 samples, 0.03%)</title><rect x="88.3359%" y="325" width="0.0319%" height="15" fill="rgb(210,16,53)" fg:x="463109" fg:w="167"/><text x="88.5859%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::raw::sse2::Group::match_byte (69 samples, 0.01%)</title><rect x="88.3802%" y="325" width="0.0132%" height="15" fill="rgb(235,124,12)" fg:x="463341" fg:w="69"/><text x="88.6302%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (69 samples, 0.01%)</title><rect x="88.3802%" y="309" width="0.0132%" height="15" fill="rgb(224,169,11)" fg:x="463341" fg:w="69"/><text x="88.6302%" y="319.50"></text></g><g><title>QUEUE_TEST.exe`std::collections::hash::set::HashSet&lt;tuple$&lt;u32,u32&gt;,std::hash::random::RandomState&gt;::contains(tuple$ (746 samples, 0.14%)</title><rect x="88.2545%" y="437" width="0.1423%" height="15" fill="rgb(250,166,2)" fg:x="462682" fg:w="746"/><text x="88.5045%" y="447.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::set::HashSet&lt;tuple$&lt;u32,u32&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::contains(tuple$ (746 samples, 0.14%)</title><rect x="88.2545%" y="421" width="0.1423%" height="15" fill="rgb(242,216,29)" fg:x="462682" fg:w="746"/><text x="88.5045%" y="431.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::map::HashMap&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::contains_key(tuple$ (746 samples, 0.14%)</title><rect x="88.2545%" y="405" width="0.1423%" height="15" fill="rgb(230,116,27)" fg:x="462682" fg:w="746"/><text x="88.5045%" y="415.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::map::HashMap&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::get_inner(tuple$ (746 samples, 0.14%)</title><rect x="88.2545%" y="389" width="0.1423%" height="15" fill="rgb(228,99,48)" fg:x="462682" fg:w="746"/><text x="88.5045%" y="399.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::raw::RawTable&lt;tuple$&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::get(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;u32,u32&gt;,tuple$ (348 samples, 0.07%)</title><rect x="88.3304%" y="373" width="0.0664%" height="15" fill="rgb(253,11,6)" fg:x="463080" fg:w="348"/><text x="88.5804%" y="383.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::raw::RawTable&lt;tuple$&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::find(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;u32,u32&gt;,tuple$ (348 samples, 0.07%)</title><rect x="88.3304%" y="357" width="0.0664%" height="15" fill="rgb(247,143,39)" fg:x="463080" fg:w="348"/><text x="88.5804%" y="367.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::raw::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (348 samples, 0.07%)</title><rect x="88.3304%" y="341" width="0.0664%" height="15" fill="rgb(236,97,10)" fg:x="463080" fg:w="348"/><text x="88.5804%" y="351.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::raw::RawTableInner::find_insert_slot (101 samples, 0.02%)</title><rect x="88.4069%" y="277" width="0.0193%" height="15" fill="rgb(233,208,19)" fg:x="463481" fg:w="101"/><text x="88.6569%" y="287.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::raw::RawTableInner::prepare_insert_slot (106 samples, 0.02%)</title><rect x="88.4069%" y="293" width="0.0202%" height="15" fill="rgb(216,164,2)" fg:x="463481" fg:w="106"/><text x="88.6569%" y="303.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::raw::RawTable&lt;tuple$&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::reserve(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;tuple$&lt;u32,u32&gt;,tuple$ (169 samples, 0.03%)</title><rect x="88.3996%" y="357" width="0.0322%" height="15" fill="rgb(220,129,5)" fg:x="463443" fg:w="169"/><text x="88.6496%" y="367.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::raw::RawTable&lt;tuple$&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;&gt; &gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;&gt;,std::hash::random::RandomState&gt; &gt;(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;tuple$&lt;u32,u32&gt;,tuple$ (168 samples, 0.03%)</title><rect x="88.3998%" y="341" width="0.0320%" height="15" fill="rgb(242,17,10)" fg:x="463444" fg:w="168"/><text x="88.6498%" y="351.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::raw::RawTableInner::reserve_rehash_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$&lt;Output,u64&gt; &gt; &gt; &gt;, hashbrown::raw::Fallibility, hashbrown::raw::TableLayout, enum2$&lt;core::option::Option&lt;void (*)(ptr_mut$ (168 samples, 0.03%)</title><rect x="88.3998%" y="325" width="0.0320%" height="15" fill="rgb(242,107,0)" fg:x="463444" fg:w="168"/><text x="88.6498%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::raw::RawTableInner::resize_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$ (168 samples, 0.03%)</title><rect x="88.3998%" y="309" width="0.0320%" height="15" fill="rgb(251,28,31)" fg:x="463444" fg:w="168"/><text x="88.6498%" y="319.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::map::HashMap&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::find_or_find_insert_slot(unsigned long long, tuple$ (200 samples, 0.04%)</title><rect x="88.3996%" y="389" width="0.0381%" height="15" fill="rgb(233,223,10)" fg:x="463443" fg:w="200"/><text x="88.6496%" y="399.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::raw::RawTable&lt;tuple$&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::find_or_find_insert_slot(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;u32,u32&gt;,tuple$&lt;&gt; &gt;, hashbrown::map::make_hasher::closure_env$0&lt;tuple$&lt;u32,u32&gt;,tuple$ (200 samples, 0.04%)</title><rect x="88.3996%" y="373" width="0.0381%" height="15" fill="rgb(215,21,27)" fg:x="463443" fg:w="200"/><text x="88.6496%" y="383.50"></text></g><g><title>QUEUE_TEST.exe`std::collections::hash::set::HashSet&lt;tuple$&lt;u32,u32&gt;,std::hash::random::RandomState&gt;::insert(tuple$ (248 samples, 0.05%)</title><rect x="88.3968%" y="437" width="0.0473%" height="15" fill="rgb(232,23,21)" fg:x="463428" fg:w="248"/><text x="88.6468%" y="447.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::set::HashSet&lt;tuple$&lt;u32,u32&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::insert(tuple$ (248 samples, 0.05%)</title><rect x="88.3968%" y="421" width="0.0473%" height="15" fill="rgb(244,5,23)" fg:x="463428" fg:w="248"/><text x="88.6468%" y="431.50"></text></g><g><title>QUEUE_TEST.exe`hashbrown::map::HashMap&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::insert&lt;tuple$&lt;u32,u32&gt;,tuple$&lt;&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;(tuple$&lt;u32,u32&gt;, tuple$ (241 samples, 0.05%)</title><rect x="88.3981%" y="405" width="0.0460%" height="15" fill="rgb(226,81,46)" fg:x="463435" fg:w="241"/><text x="88.6481%" y="415.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::time_seqential(alloc::vec::Vec&lt;alloc::vec::Vec&lt;QUEUE_TEST::KeyVal,alloc::alloc::Global&gt;,alloc::alloc::Global&gt;*, QUEUE_TEST::sequentialbucketqueue::Bqueue&lt;ref$ (463,346 samples, 88.38%)</title><rect x="0.0631%" y="453" width="88.3811%" height="15" fill="rgb(247,70,30)" fg:x="331" fg:w="463346"/><text x="0.3131%" y="463.50">QUEUE_TEST.exe`QUEUE_TEST::time_seqential(alloc::vec::Vec&lt;alloc::vec::Vec&lt;QUEUE_TEST::KeyVal,alloc::alloc::Global&gt;,alloc::alloc::Global&gt;*, QUEUE_TE..</text></g><g><title>QUEUE_TEST.exe`alloc::collections::vec_deque::VecDeque&lt;QUEUE_TEST::csvreader::Rec,alloc::alloc::Global&gt;::buffer_read (347 samples, 0.07%)</title><rect x="88.4443%" y="437" width="0.0662%" height="15" fill="rgb(212,68,19)" fg:x="463677" fg:w="347"/><text x="88.6943%" y="447.50"></text></g><g><title>QUEUE_TEST.exe`core::ptr::mut_ptr::impl$0::add (347 samples, 0.07%)</title><rect x="88.4443%" y="421" width="0.0662%" height="15" fill="rgb(240,187,13)" fg:x="463677" fg:w="347"/><text x="88.6943%" y="431.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::vec_deque::VecDeque&lt;QUEUE_TEST::csvreader::Rec,alloc::alloc::Global&gt;::pop_front (354 samples, 0.07%)</title><rect x="88.4443%" y="453" width="0.0675%" height="15" fill="rgb(223,113,26)" fg:x="463677" fg:w="354"/><text x="88.6943%" y="463.50"></text></g><g><title>`0x7FF9823C5113 (2,291 samples, 0.44%)</title><rect x="88.5299%" y="277" width="0.4370%" height="15" fill="rgb(206,192,2)" fg:x="464126" fg:w="2291"/><text x="88.7799%" y="287.50"></text></g><g><title>`0x7FF9823C5117 (681 samples, 0.13%)</title><rect x="88.9669%" y="277" width="0.1299%" height="15" fill="rgb(241,108,4)" fg:x="466417" fg:w="681"/><text x="89.2169%" y="287.50"></text></g><g><title>`0x7FF98228AB69 (3,114 samples, 0.59%)</title><rect x="88.5225%" y="293" width="0.5940%" height="15" fill="rgb(247,173,49)" fg:x="464087" fg:w="3114"/><text x="88.7725%" y="303.50"></text></g><g><title>`0x7FF982289BC5 (3,426 samples, 0.65%)</title><rect x="88.5185%" y="309" width="0.6535%" height="15" fill="rgb(224,114,35)" fg:x="464066" fg:w="3426"/><text x="88.7685%" y="319.50"></text></g><g><title>`0x7FF98228AB7C (291 samples, 0.06%)</title><rect x="89.1164%" y="293" width="0.0555%" height="15" fill="rgb(245,159,27)" fg:x="467201" fg:w="291"/><text x="89.3664%" y="303.50"></text></g><g><title>`0x7FF982286F81 (291 samples, 0.06%)</title><rect x="89.1164%" y="277" width="0.0555%" height="15" fill="rgb(245,172,44)" fg:x="467201" fg:w="291"/><text x="89.3664%" y="287.50"></text></g><g><title>`0x7FF98227FAFD (289 samples, 0.06%)</title><rect x="89.1168%" y="261" width="0.0551%" height="15" fill="rgb(236,23,11)" fg:x="467203" fg:w="289"/><text x="89.3668%" y="271.50"></text></g><g><title>`0x7FF9822A813F (289 samples, 0.06%)</title><rect x="89.1168%" y="245" width="0.0551%" height="15" fill="rgb(205,117,38)" fg:x="467203" fg:w="289"/><text x="89.3668%" y="255.50"></text></g><g><title>`0x7FF9823BFB94 (289 samples, 0.06%)</title><rect x="89.1168%" y="229" width="0.0551%" height="15" fill="rgb(237,72,25)" fg:x="467203" fg:w="289"/><text x="89.3668%" y="239.50"></text></g><g><title>QUEUE_TEST.exe`alloc::raw_vec::RawVec&lt;QUEUE_TEST::KeyVal,alloc::alloc::Global&gt;::grow_one&lt;QUEUE_TEST::KeyVal,alloc::alloc::Global&gt; (3,427 samples, 0.65%)</title><rect x="88.5185%" y="437" width="0.6537%" height="15" fill="rgb(244,70,9)" fg:x="464066" fg:w="3427"/><text x="88.7685%" y="447.50"></text></g><g><title>QUEUE_TEST.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (3,427 samples, 0.65%)</title><rect x="88.5185%" y="421" width="0.6537%" height="15" fill="rgb(217,125,39)" fg:x="464066" fg:w="3427"/><text x="88.7685%" y="431.50"></text></g><g><title>QUEUE_TEST.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (3,427 samples, 0.65%)</title><rect x="88.5185%" y="405" width="0.6537%" height="15" fill="rgb(235,36,10)" fg:x="464066" fg:w="3427"/><text x="88.7685%" y="415.50"></text></g><g><title>QUEUE_TEST.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (3,427 samples, 0.65%)</title><rect x="88.5185%" y="389" width="0.6537%" height="15" fill="rgb(251,123,47)" fg:x="464066" fg:w="3427"/><text x="88.7685%" y="399.50"></text></g><g><title>QUEUE_TEST.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (3,427 samples, 0.65%)</title><rect x="88.5185%" y="373" width="0.6537%" height="15" fill="rgb(221,13,13)" fg:x="464066" fg:w="3427"/><text x="88.7685%" y="383.50"></text></g><g><title>QUEUE_TEST.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (3,427 samples, 0.65%)</title><rect x="88.5185%" y="357" width="0.6537%" height="15" fill="rgb(238,131,9)" fg:x="464066" fg:w="3427"/><text x="88.7685%" y="367.50"></text></g><g><title>QUEUE_TEST.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (3,427 samples, 0.65%)</title><rect x="88.5185%" y="341" width="0.6537%" height="15" fill="rgb(211,50,8)" fg:x="464066" fg:w="3427"/><text x="88.7685%" y="351.50"></text></g><g><title>`0x7FF982289A86 (3,427 samples, 0.65%)</title><rect x="88.5185%" y="325" width="0.6537%" height="15" fill="rgb(245,182,24)" fg:x="464066" fg:w="3427"/><text x="88.7685%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`alloc::vec::Vec&lt;QUEUE_TEST::KeyVal,alloc::alloc::Global&gt;::push (5,031 samples, 0.96%)</title><rect x="88.5118%" y="453" width="0.9596%" height="15" fill="rgb(242,14,37)" fg:x="464031" fg:w="5031"/><text x="88.7618%" y="463.50"></text></g><g><title>QUEUE_TEST.exe`core::ptr::write (1,566 samples, 0.30%)</title><rect x="89.1727%" y="437" width="0.2987%" height="15" fill="rgb(246,228,12)" fg:x="467496" fg:w="1566"/><text x="89.4227%" y="447.50"></text></g><g><title>QUEUE_TEST.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;alloc::vec::Vec (100 samples, 0.02%)</title><rect x="89.4966%" y="453" width="0.0191%" height="15" fill="rgb(213,55,15)" fg:x="469194" fg:w="100"/><text x="89.7466%" y="463.50"></text></g><g><title>QUEUE_TEST.exe`alloc::vec::impl$25::drop(alloc::vec::Vec&lt;alloc::vec::Vec (100 samples, 0.02%)</title><rect x="89.4966%" y="437" width="0.0191%" height="15" fill="rgb(209,9,3)" fg:x="469194" fg:w="100"/><text x="89.7466%" y="447.50"></text></g><g><title>QUEUE_TEST.exe`core::ptr::drop_in_place(ptr_mut$&lt;slice2$&lt;alloc::vec::Vec (100 samples, 0.02%)</title><rect x="89.4966%" y="421" width="0.0191%" height="15" fill="rgb(230,59,30)" fg:x="469194" fg:w="100"/><text x="89.7466%" y="431.50"></text></g><g><title>QUEUE_TEST.exe`core::ptr::drop_in_place(alloc::vec::Vec (100 samples, 0.02%)</title><rect x="89.4966%" y="405" width="0.0191%" height="15" fill="rgb(209,121,21)" fg:x="469194" fg:w="100"/><text x="89.7466%" y="415.50"></text></g><g><title>QUEUE_TEST.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (100 samples, 0.02%)</title><rect x="89.4966%" y="389" width="0.0191%" height="15" fill="rgb(220,109,13)" fg:x="469194" fg:w="100"/><text x="89.7466%" y="399.50"></text></g><g><title>QUEUE_TEST.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (100 samples, 0.02%)</title><rect x="89.4966%" y="373" width="0.0191%" height="15" fill="rgb(232,18,1)" fg:x="469194" fg:w="100"/><text x="89.7466%" y="383.50"></text></g><g><title>QUEUE_TEST.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (100 samples, 0.02%)</title><rect x="89.4966%" y="357" width="0.0191%" height="15" fill="rgb(215,41,42)" fg:x="469194" fg:w="100"/><text x="89.7466%" y="367.50"></text></g><g><title>QUEUE_TEST.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (100 samples, 0.02%)</title><rect x="89.4966%" y="341" width="0.0191%" height="15" fill="rgb(224,123,36)" fg:x="469194" fg:w="100"/><text x="89.7466%" y="351.50"></text></g><g><title>QUEUE_TEST.exe`alloc::alloc::dealloc (100 samples, 0.02%)</title><rect x="89.4966%" y="325" width="0.0191%" height="15" fill="rgb(240,125,3)" fg:x="469194" fg:w="100"/><text x="89.7466%" y="335.50"></text></g><g><title>`0x7FF982286F81 (100 samples, 0.02%)</title><rect x="89.4966%" y="309" width="0.0191%" height="15" fill="rgb(205,98,50)" fg:x="469194" fg:w="100"/><text x="89.7466%" y="319.50"></text></g><g><title>`0x7FF98227FAFD (100 samples, 0.02%)</title><rect x="89.4966%" y="293" width="0.0191%" height="15" fill="rgb(205,185,37)" fg:x="469194" fg:w="100"/><text x="89.7466%" y="303.50"></text></g><g><title>`0x7FF9822A813F (100 samples, 0.02%)</title><rect x="89.4966%" y="277" width="0.0191%" height="15" fill="rgb(238,207,15)" fg:x="469194" fg:w="100"/><text x="89.7466%" y="287.50"></text></g><g><title>`0x7FF9823BFB94 (100 samples, 0.02%)</title><rect x="89.4966%" y="261" width="0.0191%" height="15" fill="rgb(213,199,42)" fg:x="469194" fg:w="100"/><text x="89.7466%" y="271.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::vec_deque::VecDeque&lt;QUEUE_TEST::csvreader::Rec,alloc::alloc::Global&gt;::ptr (1,096 samples, 0.21%)</title><rect x="89.5269%" y="389" width="0.2091%" height="15" fill="rgb(235,201,11)" fg:x="469353" fg:w="1096"/><text x="89.7769%" y="399.50"></text></g><g><title>`0x7FF9823C5113 (918 samples, 0.18%)</title><rect x="89.7423%" y="133" width="0.1751%" height="15" fill="rgb(207,46,11)" fg:x="470482" fg:w="918"/><text x="89.9923%" y="143.50"></text></g><g><title>`0x7FF9823C5117 (490 samples, 0.09%)</title><rect x="89.9174%" y="133" width="0.0935%" height="15" fill="rgb(241,35,35)" fg:x="471400" fg:w="490"/><text x="90.1674%" y="143.50"></text></g><g><title>`0x7FF98228AB69 (1,504 samples, 0.29%)</title><rect x="89.7364%" y="149" width="0.2869%" height="15" fill="rgb(243,32,47)" fg:x="470451" fg:w="1504"/><text x="89.9864%" y="159.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::vec_deque::VecDeque&lt;QUEUE_TEST::csvreader::Rec,alloc::alloc::Global&gt;::push_back (2,657 samples, 0.51%)</title><rect x="89.5185%" y="421" width="0.5068%" height="15" fill="rgb(247,202,23)" fg:x="469309" fg:w="2657"/><text x="89.7685%" y="431.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::vec_deque::VecDeque&lt;QUEUE_TEST::csvreader::Rec,alloc::alloc::Global&gt;::to_physical_idx (2,613 samples, 0.50%)</title><rect x="89.5269%" y="405" width="0.4984%" height="15" fill="rgb(219,102,11)" fg:x="469353" fg:w="2613"/><text x="89.7769%" y="415.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::vec_deque::VecDeque&lt;QUEUE_TEST::csvreader::Rec,alloc::alloc::Global&gt;::wrap_add (1,517 samples, 0.29%)</title><rect x="89.7360%" y="389" width="0.2894%" height="15" fill="rgb(243,110,44)" fg:x="470449" fg:w="1517"/><text x="89.9860%" y="399.50"></text></g><g><title>QUEUE_TEST.exe`core::num::impl$11::wrapping_add (1,517 samples, 0.29%)</title><rect x="89.7360%" y="373" width="0.2894%" height="15" fill="rgb(222,74,54)" fg:x="470449" fg:w="1517"/><text x="89.9860%" y="383.50"></text></g><g><title>QUEUE_TEST.exe`alloc::raw_vec::RawVec&lt;QUEUE_TEST::csvreader::Rec,alloc::alloc::Global&gt;::capacity (1,516 samples, 0.29%)</title><rect x="89.7362%" y="357" width="0.2892%" height="15" fill="rgb(216,99,12)" fg:x="470450" fg:w="1516"/><text x="89.9862%" y="367.50"></text></g><g><title>QUEUE_TEST.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::capacity (1,516 samples, 0.29%)</title><rect x="89.7362%" y="341" width="0.2892%" height="15" fill="rgb(226,22,26)" fg:x="470450" fg:w="1516"/><text x="89.9862%" y="351.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::vec_deque::VecDeque&lt;QUEUE_TEST::csvreader::Rec,alloc::alloc::Global&gt;::grow&lt;QUEUE_TEST::csvreader::Rec,alloc::alloc::Global&gt; (1,516 samples, 0.29%)</title><rect x="89.7362%" y="325" width="0.2892%" height="15" fill="rgb(217,163,10)" fg:x="470450" fg:w="1516"/><text x="89.9862%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`alloc::collections::vec_deque::VecDeque&lt;QUEUE_TEST::csvreader::Rec,alloc::alloc::Global&gt;::handle_capacity_increase (1,516 samples, 0.29%)</title><rect x="89.7362%" y="309" width="0.2892%" height="15" fill="rgb(213,25,53)" fg:x="470450" fg:w="1516"/><text x="89.9862%" y="319.50"></text></g><g><title>QUEUE_TEST.exe`alloc::raw_vec::RawVec&lt;QUEUE_TEST::csvreader::Rec,alloc::alloc::Global&gt;::grow_one&lt;QUEUE_TEST::csvreader::Rec,alloc::alloc::Global&gt; (1,516 samples, 0.29%)</title><rect x="89.7362%" y="293" width="0.2892%" height="15" fill="rgb(252,105,26)" fg:x="470450" fg:w="1516"/><text x="89.9862%" y="303.50"></text></g><g><title>QUEUE_TEST.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (1,516 samples, 0.29%)</title><rect x="89.7362%" y="277" width="0.2892%" height="15" fill="rgb(220,39,43)" fg:x="470450" fg:w="1516"/><text x="89.9862%" y="287.50"></text></g><g><title>QUEUE_TEST.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (1,516 samples, 0.29%)</title><rect x="89.7362%" y="261" width="0.2892%" height="15" fill="rgb(229,68,48)" fg:x="470450" fg:w="1516"/><text x="89.9862%" y="271.50"></text></g><g><title>QUEUE_TEST.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (1,516 samples, 0.29%)</title><rect x="89.7362%" y="245" width="0.2892%" height="15" fill="rgb(252,8,32)" fg:x="470450" fg:w="1516"/><text x="89.9862%" y="255.50"></text></g><g><title>QUEUE_TEST.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (1,516 samples, 0.29%)</title><rect x="89.7362%" y="229" width="0.2892%" height="15" fill="rgb(223,20,43)" fg:x="470450" fg:w="1516"/><text x="89.9862%" y="239.50"></text></g><g><title>QUEUE_TEST.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (1,516 samples, 0.29%)</title><rect x="89.7362%" y="213" width="0.2892%" height="15" fill="rgb(229,81,49)" fg:x="470450" fg:w="1516"/><text x="89.9862%" y="223.50"></text></g><g><title>QUEUE_TEST.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (1,516 samples, 0.29%)</title><rect x="89.7362%" y="197" width="0.2892%" height="15" fill="rgb(236,28,36)" fg:x="470450" fg:w="1516"/><text x="89.9862%" y="207.50"></text></g><g><title>`0x7FF982289A86 (1,516 samples, 0.29%)</title><rect x="89.7362%" y="181" width="0.2892%" height="15" fill="rgb(249,185,26)" fg:x="470450" fg:w="1516"/><text x="89.9862%" y="191.50"></text></g><g><title>`0x7FF982289BC5 (1,516 samples, 0.29%)</title><rect x="89.7362%" y="165" width="0.2892%" height="15" fill="rgb(249,174,33)" fg:x="470450" fg:w="1516"/><text x="89.9862%" y="175.50"></text></g><g><title>QUEUE_TEST.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, core::ops::range::RangeTo (825 samples, 0.16%)</title><rect x="90.0734%" y="357" width="0.1574%" height="15" fill="rgb(233,201,37)" fg:x="472218" fg:w="825"/><text x="90.3234%" y="367.50"></text></g><g><title>QUEUE_TEST.exe`core::slice::ascii::is_ascii(ref$&lt;slice2$ (787 samples, 0.15%)</title><rect x="90.0807%" y="341" width="0.1501%" height="15" fill="rgb(221,78,26)" fg:x="472256" fg:w="787"/><text x="90.3307%" y="351.50"></text></g><g><title>QUEUE_TEST.exe`core::slice::ascii::is_ascii::runtime(ref$&lt;slice2$ (787 samples, 0.15%)</title><rect x="90.0807%" y="325" width="0.1501%" height="15" fill="rgb(250,127,30)" fg:x="472256" fg:w="787"/><text x="90.3307%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`core::slice::ascii::contains_nonascii (70 samples, 0.01%)</title><rect x="90.2174%" y="309" width="0.0134%" height="15" fill="rgb(230,49,44)" fg:x="472973" fg:w="70"/><text x="90.4674%" y="319.50"></text></g><g><title>QUEUE_TEST.exe`csv::byte_record::ByteRecord::validate (917 samples, 0.17%)</title><rect x="90.0601%" y="373" width="0.1749%" height="15" fill="rgb(229,67,23)" fg:x="472148" fg:w="917"/><text x="90.3101%" y="383.50"></text></g><g><title>QUEUE_TEST.exe`csv_core::reader::Dfa::get_output (1,299 samples, 0.25%)</title><rect x="91.1492%" y="309" width="0.2478%" height="15" fill="rgb(249,83,47)" fg:x="477858" fg:w="1299"/><text x="91.3992%" y="319.50"></text></g><g><title>QUEUE_TEST.exe`csv_core::reader::Dfa::new_read_record_result (101 samples, 0.02%)</title><rect x="91.3970%" y="309" width="0.0193%" height="15" fill="rgb(215,43,3)" fg:x="479157" fg:w="101"/><text x="91.6470%" y="319.50"></text></g><g><title>QUEUE_TEST.exe`core::cmp::PartialOrd::ge (101 samples, 0.02%)</title><rect x="91.3970%" y="293" width="0.0193%" height="15" fill="rgb(238,154,13)" fg:x="479157" fg:w="101"/><text x="91.6470%" y="303.50"></text></g><g><title>QUEUE_TEST.exe`csv_core::reader::impl$55::partial_cmp (98 samples, 0.02%)</title><rect x="91.3976%" y="277" width="0.0187%" height="15" fill="rgb(219,56,2)" fg:x="479160" fg:w="98"/><text x="91.6476%" y="287.50"></text></g><g><title>QUEUE_TEST.exe`core::cmp::impls::impl$60::partial_cmp (98 samples, 0.02%)</title><rect x="91.3976%" y="261" width="0.0187%" height="15" fill="rgb(233,0,4)" fg:x="479160" fg:w="98"/><text x="91.6476%" y="271.50"></text></g><g><title>QUEUE_TEST.exe`csv_core::reader::DfaClasses::scan_and_copy(ref$&lt;slice2$&lt;u8&gt; &gt;, unsigned long long*, ref_mut$&lt;slice2$ (10,383 samples, 1.98%)</title><rect x="91.4163%" y="309" width="1.9805%" height="15" fill="rgb(235,30,7)" fg:x="479258" fg:w="10383"/><text x="91.6663%" y="319.50">Q..</text></g><g><title>QUEUE_TEST.exe`csv_core::reader::Reader::read_record(ref$&lt;slice2$&lt;u8&gt; &gt;, ref_mut$&lt;slice2$&lt;u8&gt; &gt;, ref_mut$&lt;slice2$ (16,816 samples, 3.21%)</title><rect x="90.2861%" y="341" width="3.2076%" height="15" fill="rgb(250,79,13)" fg:x="473333" fg:w="16816"/><text x="90.5361%" y="351.50">QUE..</text></g><g><title>QUEUE_TEST.exe`csv_core::reader::Reader::read_record_dfa(ref$&lt;slice2$&lt;u8&gt; &gt;, ref_mut$&lt;slice2$&lt;u8&gt; &gt;, ref_mut$&lt;slice2$ (16,666 samples, 3.18%)</title><rect x="90.3147%" y="325" width="3.1790%" height="15" fill="rgb(211,146,34)" fg:x="473483" fg:w="16666"/><text x="90.5647%" y="335.50">QUE..</text></g><g><title>QUEUE_TEST.exe`csv_core::reader::impl$54::eq (508 samples, 0.10%)</title><rect x="93.3968%" y="309" width="0.0969%" height="15" fill="rgb(228,22,38)" fg:x="489641" fg:w="508"/><text x="93.6468%" y="319.50"></text></g><g><title>QUEUE_TEST.exe`csv::reader::Reader&lt;std::fs::File&gt;::read_record (23,960 samples, 4.57%)</title><rect x="90.0494%" y="405" width="4.5703%" height="15" fill="rgb(235,168,5)" fg:x="472092" fg:w="23960"/><text x="90.2994%" y="415.50">QUEUE..</text></g><g><title>QUEUE_TEST.exe`csv::string_record::StringRecord::read(csv::reader::Reader (23,952 samples, 4.57%)</title><rect x="90.0509%" y="389" width="4.5687%" height="15" fill="rgb(221,155,16)" fg:x="472100" fg:w="23952"/><text x="90.3009%" y="399.50">QUEUE..</text></g><g><title>QUEUE_TEST.exe`csv::reader::Reader&lt;std::fs::File&gt;::read_byte_record (22,974 samples, 4.38%)</title><rect x="90.2375%" y="373" width="4.3822%" height="15" fill="rgb(215,215,53)" fg:x="473078" fg:w="22974"/><text x="90.4875%" y="383.50">QUEUE..</text></g><g><title>QUEUE_TEST.exe`csv::reader::Reader&lt;std::fs::File&gt;::read_byte_record_impl (22,906 samples, 4.37%)</title><rect x="90.2504%" y="357" width="4.3692%" height="15" fill="rgb(223,4,10)" fg:x="473146" fg:w="22906"/><text x="90.5004%" y="367.50">QUEUE..</text></g><g><title>QUEUE_TEST.exe`std::io::buffered::bufreader::impl$6::fill_buf(std::io::buffered::bufreader::BufReader (5,886 samples, 1.12%)</title><rect x="93.4969%" y="341" width="1.1227%" height="15" fill="rgb(234,103,6)" fg:x="490166" fg:w="5886"/><text x="93.7469%" y="351.50"></text></g><g><title>QUEUE_TEST.exe`std::io::buffered::bufreader::buffer::Buffer::fill_buf (5,886 samples, 1.12%)</title><rect x="93.4969%" y="325" width="1.1227%" height="15" fill="rgb(227,97,0)" fg:x="490166" fg:w="5886"/><text x="93.7469%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`std::sys::pal::windows::handle::Handle::read_buf (5,866 samples, 1.12%)</title><rect x="93.5007%" y="309" width="1.1189%" height="15" fill="rgb(234,150,53)" fg:x="490186" fg:w="5866"/><text x="93.7507%" y="319.50"></text></g><g><title>QUEUE_TEST.exe`std::sys::pal::windows::handle::Handle::synchronous_read (5,848 samples, 1.12%)</title><rect x="93.5042%" y="293" width="1.1155%" height="15" fill="rgb(228,201,54)" fg:x="490204" fg:w="5848"/><text x="93.7542%" y="303.50"></text></g><g><title>`0x7FF9823BF894 (5,792 samples, 1.10%)</title><rect x="93.5148%" y="277" width="1.1048%" height="15" fill="rgb(222,22,37)" fg:x="490260" fg:w="5792"/><text x="93.7648%" y="287.50"></text></g><g><title>QUEUE_TEST.exe`core::num::impl$11::checked_sub (290 samples, 0.06%)</title><rect x="95.0936%" y="133" width="0.0553%" height="15" fill="rgb(237,53,32)" fg:x="498537" fg:w="290"/><text x="95.3436%" y="143.50"></text></g><g><title>QUEUE_TEST.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, core::ops::range::Range (296 samples, 0.06%)</title><rect x="95.0936%" y="181" width="0.0565%" height="15" fill="rgb(233,25,53)" fg:x="498537" fg:w="296"/><text x="95.3436%" y="191.50"></text></g><g><title>QUEUE_TEST.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::Range (296 samples, 0.06%)</title><rect x="95.0936%" y="165" width="0.0565%" height="15" fill="rgb(210,40,34)" fg:x="498537" fg:w="296"/><text x="95.3436%" y="175.50"></text></g><g><title>QUEUE_TEST.exe`core::slice::index::impl$4::index(core::ops::range::Range&lt;usize&gt;, ref$&lt;slice2$ (296 samples, 0.06%)</title><rect x="95.0936%" y="149" width="0.0565%" height="15" fill="rgb(241,220,44)" fg:x="498537" fg:w="296"/><text x="95.3436%" y="159.50"></text></g><g><title>QUEUE_TEST.exe`csv::string_record::impl$14::next (648 samples, 0.12%)</title><rect x="95.0816%" y="213" width="0.1236%" height="15" fill="rgb(235,28,35)" fg:x="498474" fg:w="648"/><text x="95.3316%" y="223.50"></text></g><g><title>QUEUE_TEST.exe`csv::byte_record::impl$19::next (648 samples, 0.12%)</title><rect x="95.0816%" y="197" width="0.1236%" height="15" fill="rgb(210,56,17)" fg:x="498474" fg:w="648"/><text x="95.3316%" y="207.50"></text></g><g><title>QUEUE_TEST.exe`csv::byte_record::Bounds::ends (289 samples, 0.06%)</title><rect x="95.1501%" y="181" width="0.0551%" height="15" fill="rgb(224,130,29)" fg:x="498833" fg:w="289"/><text x="95.4001%" y="191.50"></text></g><g><title>QUEUE_TEST.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;*, core::ops::range::RangeTo (280 samples, 0.05%)</title><rect x="95.1518%" y="165" width="0.0534%" height="15" fill="rgb(235,212,8)" fg:x="498842" fg:w="280"/><text x="95.4018%" y="175.50"></text></g><g><title>QUEUE_TEST.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (280 samples, 0.05%)</title><rect x="95.1518%" y="149" width="0.0534%" height="15" fill="rgb(223,33,50)" fg:x="498842" fg:w="280"/><text x="95.4018%" y="159.50"></text></g><g><title>QUEUE_TEST.exe`core::slice::index::impl$6::index(core::ops::range::RangeTo&lt;usize&gt;, ref$&lt;slice2$ (261 samples, 0.05%)</title><rect x="95.1554%" y="133" width="0.0498%" height="15" fill="rgb(219,149,13)" fg:x="498861" fg:w="261"/><text x="95.4054%" y="143.50"></text></g><g><title>QUEUE_TEST.exe`core::slice::index::impl$4::index(core::ops::range::Range&lt;usize&gt;, ref$&lt;slice2$ (261 samples, 0.05%)</title><rect x="95.1554%" y="117" width="0.0498%" height="15" fill="rgb(250,156,29)" fg:x="498861" fg:w="261"/><text x="95.4054%" y="127.50"></text></g><g><title>QUEUE_TEST.exe`csv::deserializer::impl$0::next_field(csv::deserializer::DeRecordWrap (1,212 samples, 0.23%)</title><rect x="94.9746%" y="261" width="0.2312%" height="15" fill="rgb(216,193,19)" fg:x="497913" fg:w="1212"/><text x="95.2246%" y="271.50"></text></g><g><title>QUEUE_TEST.exe`csv::deserializer::impl$1::next_field (1,212 samples, 0.23%)</title><rect x="94.9746%" y="245" width="0.2312%" height="15" fill="rgb(216,135,14)" fg:x="497913" fg:w="1212"/><text x="95.2246%" y="255.50"></text></g><g><title>QUEUE_TEST.exe`core::iter::adapters::peekable::impl$1::next(core::iter::adapters::peekable::Peekable (935 samples, 0.18%)</title><rect x="95.0275%" y="229" width="0.1783%" height="15" fill="rgb(241,47,5)" fg:x="498190" fg:w="935"/><text x="95.2775%" y="239.50"></text></g><g><title>QUEUE_TEST.exe`core::num::dec2flt::lemire::full_multiplication (292 samples, 0.06%)</title><rect x="96.2978%" y="181" width="0.0557%" height="15" fill="rgb(233,42,35)" fg:x="504850" fg:w="292"/><text x="96.5478%" y="191.50"></text></g><g><title>QUEUE_TEST.exe`core::num::dec2flt::lemire::compute_product_approx (438 samples, 0.08%)</title><rect x="96.2707%" y="197" width="0.0835%" height="15" fill="rgb(231,13,6)" fg:x="504708" fg:w="438"/><text x="96.5207%" y="207.50"></text></g><g><title>QUEUE_TEST.exe`core::num::dec2flt::lemire::compute_float&lt;f64&gt; (2,534 samples, 0.48%)</title><rect x="95.8927%" y="213" width="0.4833%" height="15" fill="rgb(207,181,40)" fg:x="502726" fg:w="2534"/><text x="96.1427%" y="223.50"></text></g><g><title>QUEUE_TEST.exe`core::num::impl$9::leading_zeros (114 samples, 0.02%)</title><rect x="96.3543%" y="197" width="0.0217%" height="15" fill="rgb(254,173,49)" fg:x="505146" fg:w="114"/><text x="96.6043%" y="207.50"></text></g><g><title>QUEUE_TEST.exe`core::num::dec2flt::number::Number::is_fast_path (455 samples, 0.09%)</title><rect x="96.3968%" y="197" width="0.0868%" height="15" fill="rgb(221,1,38)" fg:x="505369" fg:w="455"/><text x="96.6468%" y="207.50"></text></g><g><title>QUEUE_TEST.exe`core::num::dec2flt::number::Number::try_fast_path (591 samples, 0.11%)</title><rect x="96.3760%" y="213" width="0.1127%" height="15" fill="rgb(206,124,46)" fg:x="505260" fg:w="591"/><text x="96.6260%" y="223.50"></text></g><g><title>QUEUE_TEST.exe`core::num::dec2flt::parse::try_parse_digits::closure$0 (1,189 samples, 0.23%)</title><rect x="97.8110%" y="149" width="0.2268%" height="15" fill="rgb(249,21,11)" fg:x="512783" fg:w="1189"/><text x="98.0610%" y="159.50"></text></g><g><title>QUEUE_TEST.exe`core::num::impl$9::wrapping_mul (371 samples, 0.07%)</title><rect x="97.9670%" y="133" width="0.0708%" height="15" fill="rgb(222,201,40)" fg:x="513601" fg:w="371"/><text x="98.2170%" y="143.50"></text></g><g><title>QUEUE_TEST.exe`core::num::impl$6::wrapping_sub (202 samples, 0.04%)</title><rect x="98.0378%" y="149" width="0.0385%" height="15" fill="rgb(235,61,29)" fg:x="513972" fg:w="202"/><text x="98.2878%" y="159.50"></text></g><g><title>QUEUE_TEST.exe`core::num::dec2flt::common::impl$0::parse_digits (3,210 samples, 0.61%)</title><rect x="97.7479%" y="165" width="0.6123%" height="15" fill="rgb(219,207,3)" fg:x="512452" fg:w="3210"/><text x="97.9979%" y="175.50"></text></g><g><title>QUEUE_TEST.exe`core::slice::impl$0::split_first (1,488 samples, 0.28%)</title><rect x="98.0763%" y="149" width="0.2838%" height="15" fill="rgb(222,56,46)" fg:x="514174" fg:w="1488"/><text x="98.3263%" y="159.50"></text></g><g><title>QUEUE_TEST.exe`core::num::dec2flt::common::impl$0::read_u64 (94 samples, 0.02%)</title><rect x="98.3602%" y="165" width="0.0179%" height="15" fill="rgb(239,76,54)" fg:x="515662" fg:w="94"/><text x="98.6102%" y="175.50"></text></g><g><title>QUEUE_TEST.exe`core::slice::impl$0::copy_from_slice (94 samples, 0.02%)</title><rect x="98.3602%" y="149" width="0.0179%" height="15" fill="rgb(231,124,27)" fg:x="515662" fg:w="94"/><text x="98.6102%" y="159.50"></text></g><g><title>QUEUE_TEST.exe`core::intrinsics::copy_nonoverlapping (94 samples, 0.02%)</title><rect x="98.3602%" y="133" width="0.0179%" height="15" fill="rgb(249,195,6)" fg:x="515662" fg:w="94"/><text x="98.6102%" y="143.50"></text></g><g><title>QUEUE_TEST.exe`core::num::impl$9::wrapping_add (365 samples, 0.07%)</title><rect x="98.3817%" y="149" width="0.0696%" height="15" fill="rgb(237,174,47)" fg:x="515775" fg:w="365"/><text x="98.6317%" y="159.50"></text></g><g><title>QUEUE_TEST.exe`core::num::dec2flt::common::is_8digits (662 samples, 0.13%)</title><rect x="98.3781%" y="165" width="0.1263%" height="15" fill="rgb(206,201,31)" fg:x="515756" fg:w="662"/><text x="98.6281%" y="175.50"></text></g><g><title>QUEUE_TEST.exe`core::num::impl$9::wrapping_sub (278 samples, 0.05%)</title><rect x="98.4513%" y="149" width="0.0530%" height="15" fill="rgb(231,57,52)" fg:x="516140" fg:w="278"/><text x="98.7013%" y="159.50"></text></g><g><title>QUEUE_TEST.exe`core::num::impl$9::wrapping_add (218 samples, 0.04%)</title><rect x="98.7916%" y="149" width="0.0416%" height="15" fill="rgb(248,177,22)" fg:x="517924" fg:w="218"/><text x="99.0416%" y="159.50"></text></g><g><title>QUEUE_TEST.exe`core::num::impl$9::wrapping_mul (1,904 samples, 0.36%)</title><rect x="98.5044%" y="165" width="0.3632%" height="15" fill="rgb(215,211,37)" fg:x="516418" fg:w="1904"/><text x="98.7544%" y="175.50"></text></g><g><title>QUEUE_TEST.exe`core::num::impl$9::wrapping_mul (180 samples, 0.03%)</title><rect x="98.8332%" y="149" width="0.0343%" height="15" fill="rgb(241,128,51)" fg:x="518142" fg:w="180"/><text x="99.0832%" y="159.50"></text></g><g><title>QUEUE_TEST.exe`core::num::dec2flt::parse::try_parse_digits (6,767 samples, 1.29%)</title><rect x="97.6197%" y="181" width="1.2908%" height="15" fill="rgb(227,165,31)" fg:x="511780" fg:w="6767"/><text x="97.8697%" y="191.50"></text></g><g><title>QUEUE_TEST.exe`core::slice::index::impl$0::index (225 samples, 0.04%)</title><rect x="98.8675%" y="165" width="0.0429%" height="15" fill="rgb(228,167,24)" fg:x="518322" fg:w="225"/><text x="99.1175%" y="175.50"></text></g><g><title>QUEUE_TEST.exe`core::slice::index::impl$7::index (225 samples, 0.04%)</title><rect x="98.8675%" y="149" width="0.0429%" height="15" fill="rgb(228,143,12)" fg:x="518322" fg:w="225"/><text x="99.1175%" y="159.50"></text></g><g><title>QUEUE_TEST.exe`core::slice::index::impl$7::get_unchecked (225 samples, 0.04%)</title><rect x="98.8675%" y="133" width="0.0429%" height="15" fill="rgb(249,149,8)" fg:x="518322" fg:w="225"/><text x="99.1175%" y="143.50"></text></g><g><title>QUEUE_TEST.exe`core::slice::index::impl$4::get_unchecked (225 samples, 0.04%)</title><rect x="98.8675%" y="117" width="0.0429%" height="15" fill="rgb(243,35,44)" fg:x="518322" fg:w="225"/><text x="99.1175%" y="127.50"></text></g><g><title>QUEUE_TEST.exe`core::num::impl$6::saturating_sub (1,022 samples, 0.19%)</title><rect x="98.9105%" y="181" width="0.1949%" height="15" fill="rgb(246,89,9)" fg:x="518547" fg:w="1022"/><text x="99.1605%" y="191.50"></text></g><g><title>QUEUE_TEST.exe`enum2$&lt;core::result::Result&lt;f64,core::num::dec2flt::ParseFloatError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;f64,core::num::dec2flt::ParseFloatError&gt; &gt;, csv::deserializer::impl$3::deserialize_f64::closure_env$0 (21,625 samples, 4.12%)</title><rect x="95.2058%" y="261" width="4.1249%" height="15" fill="rgb(233,213,13)" fg:x="499125" fg:w="21625"/><text x="95.4558%" y="271.50">QUEU..</text></g><g><title>QUEUE_TEST.exe`core::num::dec2flt::impl$3::from_str (21,599 samples, 4.12%)</title><rect x="95.2108%" y="245" width="4.1199%" height="15" fill="rgb(233,141,41)" fg:x="499151" fg:w="21599"/><text x="95.4608%" y="255.50">QUEU..</text></g><g><title>QUEUE_TEST.exe`core::num::dec2flt::dec2flt (20,830 samples, 3.97%)</title><rect x="95.3574%" y="229" width="3.9732%" height="15" fill="rgb(239,167,4)" fg:x="499920" fg:w="20830"/><text x="95.6074%" y="239.50">QUEU..</text></g><g><title>QUEUE_TEST.exe`core::num::dec2flt::parse::parse_number (14,899 samples, 2.84%)</title><rect x="96.4888%" y="213" width="2.8419%" height="15" fill="rgb(209,217,16)" fg:x="505851" fg:w="14899"/><text x="96.7388%" y="223.50">QU..</text></g><g><title>QUEUE_TEST.exe`core::num::dec2flt::parse::parse_partial_number (13,026 samples, 2.48%)</title><rect x="96.8460%" y="197" width="2.4846%" height="15" fill="rgb(219,88,35)" fg:x="507724" fg:w="13026"/><text x="97.0960%" y="207.50">QU..</text></g><g><title>QUEUE_TEST.exe`core::slice::impl$0::split_first (1,181 samples, 0.23%)</title><rect x="99.1054%" y="181" width="0.2253%" height="15" fill="rgb(220,193,23)" fg:x="519569" fg:w="1181"/><text x="99.3554%" y="191.50"></text></g><g><title>QUEUE_TEST.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result (25,175 samples, 4.80%)</title><rect x="94.7364%" y="325" width="4.8020%" height="15" fill="rgb(230,90,52)" fg:x="496664" fg:w="25175"/><text x="94.9864%" y="335.50">QUEUE_..</text></g><g><title>QUEUE_TEST.exe`serde::de::impl$5::deserialize&lt;f64,ref_mut$&lt;csv::deserializer::DeRecordWrap&lt;csv::deserializer::DeStringRecord&gt; &gt; &gt;(core::marker::PhantomData&lt;f64&gt;, csv::deserializer::DeRecordWrap (24,237 samples, 4.62%)</title><rect x="94.9153%" y="309" width="4.6231%" height="15" fill="rgb(252,106,19)" fg:x="497602" fg:w="24237"/><text x="95.1653%" y="319.50">QUEUE..</text></g><g><title>QUEUE_TEST.exe`serde::de::impls::impl$76::deserialize(csv::deserializer::DeRecordWrap (23,928 samples, 4.56%)</title><rect x="94.9742%" y="293" width="4.5642%" height="15" fill="rgb(206,74,20)" fg:x="497911" fg:w="23928"/><text x="95.2242%" y="303.50">QUEUE..</text></g><g><title>QUEUE_TEST.exe`csv::deserializer::impl$3::deserialize_f64(csv::deserializer::DeRecordWrap (23,928 samples, 4.56%)</title><rect x="94.9742%" y="277" width="4.5642%" height="15" fill="rgb(230,138,44)" fg:x="497911" fg:w="23928"/><text x="95.2242%" y="287.50">QUEUE..</text></g><g><title>QUEUE_TEST.exe`serde::de::impls::impl$76::deserialize::impl$0::visit_f64 (1,089 samples, 0.21%)</title><rect x="99.3307%" y="261" width="0.2077%" height="15" fill="rgb(235,182,43)" fg:x="520750" fg:w="1089"/><text x="99.5807%" y="271.50"></text></g><g><title>QUEUE_TEST.exe`enum2$&lt;core::option::Option&lt;f64&gt; &gt;::is_some (149 samples, 0.03%)</title><rect x="99.5384%" y="325" width="0.0284%" height="15" fill="rgb(242,16,51)" fg:x="521839" fg:w="149"/><text x="99.7884%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, core::ops::range::Range (111 samples, 0.02%)</title><rect x="99.6633%" y="181" width="0.0212%" height="15" fill="rgb(248,9,4)" fg:x="522494" fg:w="111"/><text x="99.9133%" y="191.50"></text></g><g><title>QUEUE_TEST.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::Range (87 samples, 0.02%)</title><rect x="99.6679%" y="165" width="0.0166%" height="15" fill="rgb(210,31,22)" fg:x="522518" fg:w="87"/><text x="99.9179%" y="175.50"></text></g><g><title>QUEUE_TEST.exe`core::slice::index::impl$4::index(core::ops::range::Range&lt;usize&gt;, ref$&lt;slice2$ (87 samples, 0.02%)</title><rect x="99.6679%" y="149" width="0.0166%" height="15" fill="rgb(239,54,39)" fg:x="522518" fg:w="87"/><text x="99.9179%" y="159.50"></text></g><g><title>QUEUE_TEST.exe`core::num::impl$11::checked_sub (86 samples, 0.02%)</title><rect x="99.6681%" y="133" width="0.0164%" height="15" fill="rgb(230,99,41)" fg:x="522519" fg:w="86"/><text x="99.9181%" y="143.50"></text></g><g><title>QUEUE_TEST.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::as_slice (67 samples, 0.01%)</title><rect x="99.7146%" y="133" width="0.0128%" height="15" fill="rgb(253,106,12)" fg:x="522763" fg:w="67"/><text x="99.9646%" y="143.50"></text></g><g><title>QUEUE_TEST.exe`csv::deserializer::impl$0::next_header_bytes(csv::deserializer::DeRecordWrap (849 samples, 0.16%)</title><rect x="99.5672%" y="293" width="0.1619%" height="15" fill="rgb(213,46,41)" fg:x="521990" fg:w="849"/><text x="99.8172%" y="303.50"></text></g><g><title>QUEUE_TEST.exe`csv::deserializer::impl$1::next_header_bytes (849 samples, 0.16%)</title><rect x="99.5672%" y="277" width="0.1619%" height="15" fill="rgb(215,133,35)" fg:x="521990" fg:w="849"/><text x="99.8172%" y="287.50"></text></g><g><title>QUEUE_TEST.exe`csv::deserializer::impl$1::next_header (849 samples, 0.16%)</title><rect x="99.5672%" y="261" width="0.1619%" height="15" fill="rgb(213,28,5)" fg:x="521990" fg:w="849"/><text x="99.8172%" y="271.50"></text></g><g><title>QUEUE_TEST.exe`enum2$&lt;core::option::Option&lt;ref_mut$&lt;csv::string_record::StringRecordIter&gt; &gt; &gt;::and_then(enum2$&lt;core::option::Option&lt;ref_mut$ (849 samples, 0.16%)</title><rect x="99.5672%" y="245" width="0.1619%" height="15" fill="rgb(215,77,49)" fg:x="521990" fg:w="849"/><text x="99.8172%" y="255.50"></text></g><g><title>QUEUE_TEST.exe`csv::deserializer::impl$1::next_header::closure$0 (849 samples, 0.16%)</title><rect x="99.5672%" y="229" width="0.1619%" height="15" fill="rgb(248,100,22)" fg:x="521990" fg:w="849"/><text x="99.8172%" y="239.50"></text></g><g><title>QUEUE_TEST.exe`csv::string_record::impl$14::next (849 samples, 0.16%)</title><rect x="99.5672%" y="213" width="0.1619%" height="15" fill="rgb(208,67,9)" fg:x="521990" fg:w="849"/><text x="99.8172%" y="223.50"></text></g><g><title>QUEUE_TEST.exe`csv::byte_record::impl$19::next (849 samples, 0.16%)</title><rect x="99.5672%" y="197" width="0.1619%" height="15" fill="rgb(219,133,21)" fg:x="521990" fg:w="849"/><text x="99.8172%" y="207.50"></text></g><g><title>QUEUE_TEST.exe`csv::byte_record::Bounds::ends (234 samples, 0.04%)</title><rect x="99.6845%" y="181" width="0.0446%" height="15" fill="rgb(246,46,29)" fg:x="522605" fg:w="234"/><text x="99.9345%" y="191.50"></text></g><g><title>QUEUE_TEST.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;*, core::ops::range::RangeTo (76 samples, 0.01%)</title><rect x="99.7146%" y="165" width="0.0145%" height="15" fill="rgb(246,185,52)" fg:x="522763" fg:w="76"/><text x="99.9646%" y="175.50"></text></g><g><title>QUEUE_TEST.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (76 samples, 0.01%)</title><rect x="99.7146%" y="149" width="0.0145%" height="15" fill="rgb(252,136,11)" fg:x="522763" fg:w="76"/><text x="99.9646%" y="159.50"></text></g><g><title>QUEUE_TEST.exe`serde::de::MapAccess::next_key(csv::deserializer::DeRecordWrap (1,641 samples, 0.31%)</title><rect x="99.5668%" y="325" width="0.3130%" height="15" fill="rgb(219,138,53)" fg:x="521988" fg:w="1641"/><text x="99.8168%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`csv::deserializer::impl$7::next_key_seed(csv::deserializer::DeRecordWrap&lt;csv::deserializer::DeStringRecord&gt;**, core::marker::PhantomData (1,641 samples, 0.31%)</title><rect x="99.5668%" y="309" width="0.3130%" height="15" fill="rgb(211,51,23)" fg:x="521988" fg:w="1641"/><text x="99.8168%" y="319.50"></text></g><g><title>QUEUE_TEST.exe`serde::de::impl$5::deserialize(core::marker::PhantomData&lt;QUEUE_TEST::csvreader::_::impl$0::deserialize::__Field&gt;, serde::de::value::BorrowedBytesDeserializer (790 samples, 0.15%)</title><rect x="99.7291%" y="293" width="0.1507%" height="15" fill="rgb(247,221,28)" fg:x="522839" fg:w="790"/><text x="99.9791%" y="303.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::csvreader::_::impl$0::deserialize::impl$1::deserialize(serde::de::value::BorrowedBytesDeserializer (790 samples, 0.15%)</title><rect x="99.7291%" y="277" width="0.1507%" height="15" fill="rgb(251,222,45)" fg:x="522839" fg:w="790"/><text x="99.9791%" y="287.50"></text></g><g><title>QUEUE_TEST.exe`serde::de::value::impl$40::deserialize_identifier(serde::de::value::BorrowedBytesDeserializer (790 samples, 0.15%)</title><rect x="99.7291%" y="261" width="0.1507%" height="15" fill="rgb(217,162,53)" fg:x="522839" fg:w="790"/><text x="99.9791%" y="271.50"></text></g><g><title>QUEUE_TEST.exe`serde::de::value::impl$40::deserialize_any(serde::de::value::BorrowedBytesDeserializer (790 samples, 0.15%)</title><rect x="99.7291%" y="245" width="0.1507%" height="15" fill="rgb(229,93,14)" fg:x="522839" fg:w="790"/><text x="99.9791%" y="255.50"></text></g><g><title>QUEUE_TEST.exe`serde::de::Visitor::visit_borrowed_bytes(QUEUE_TEST::csvreader::_::impl$0::deserialize::__FieldVisitor, ref$&lt;slice2$ (790 samples, 0.15%)</title><rect x="99.7291%" y="229" width="0.1507%" height="15" fill="rgb(209,67,49)" fg:x="522839" fg:w="790"/><text x="99.9791%" y="239.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::csvreader::_::impl$0::deserialize::impl$0::visit_bytes(QUEUE_TEST::csvreader::_::impl$0::deserialize::__FieldVisitor, ref$&lt;slice2$ (790 samples, 0.15%)</title><rect x="99.7291%" y="213" width="0.1507%" height="15" fill="rgb(213,87,29)" fg:x="522839" fg:w="790"/><text x="99.9791%" y="223.50"></text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::csvreader::_::impl$0::deserialize(csv::deserializer::DeRecordWrap (27,617 samples, 5.27%)</title><rect x="94.6299%" y="373" width="5.2678%" height="15" fill="rgb(205,151,52)" fg:x="496106" fg:w="27617"/><text x="94.8799%" y="383.50">QUEUE_..</text></g><g><title>QUEUE_TEST.exe`csv::deserializer::impl$3::deserialize_struct&lt;csv::deserializer::DeStringRecord,QUEUE_TEST::csvreader::_::impl$0::deserialize::__Visitor&gt;(csv::deserializer::DeRecordWrap&lt;csv::deserializer::DeStringRecord&gt;*, ref$&lt;str$&gt;, ref$&lt;slice2$&lt;ref$ (27,617 samples, 5.27%)</title><rect x="94.6299%" y="357" width="5.2678%" height="15" fill="rgb(253,215,39)" fg:x="496106" fg:w="27617"/><text x="94.8799%" y="367.50">QUEUE_..</text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::csvreader::_::impl$0::deserialize::impl$2::visit_map(QUEUE_TEST::csvreader::_::impl$0::deserialize::__Visitor, csv::deserializer::DeRecordWrap (27,495 samples, 5.24%)</title><rect x="94.6532%" y="341" width="5.2445%" height="15" fill="rgb(221,220,41)" fg:x="496228" fg:w="27495"/><text x="94.9032%" y="351.50">QUEUE_..</text></g><g><title>QUEUE_TEST.exe`serde::de::MapAccess::next_value(csv::deserializer::DeRecordWrap (94 samples, 0.02%)</title><rect x="99.8798%" y="325" width="0.0179%" height="15" fill="rgb(218,133,21)" fg:x="523629" fg:w="94"/><text x="100.1298%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`csv::deserializer::impl$7::next_value_seed(csv::deserializer::DeRecordWrap&lt;csv::deserializer::DeStringRecord&gt;**, core::marker::PhantomData (94 samples, 0.02%)</title><rect x="99.8798%" y="309" width="0.0179%" height="15" fill="rgb(221,193,43)" fg:x="523629" fg:w="94"/><text x="100.1298%" y="319.50"></text></g><g><title>QUEUE_TEST.exe`enum2$&lt;core::option::Option&lt;ref$&lt;csv::string_record::StringRecord&gt; &gt; &gt;::map(enum2$&lt;core::option::Option&lt;ref$&lt;csv::string_record::StringRecord&gt; &gt; &gt;, csv::deserializer::deserialize_string_record::closure_env$0 (147 samples, 0.03%)</title><rect x="99.9071%" y="373" width="0.0280%" height="15" fill="rgb(240,128,52)" fg:x="523772" fg:w="147"/><text x="100.1571%" y="383.50"></text></g><g><title>QUEUE_TEST.exe`csv::deserializer::deserialize_string_record::closure$0(csv::deserializer::deserialize_string_record::closure_env$0 (136 samples, 0.03%)</title><rect x="99.9092%" y="357" width="0.0259%" height="15" fill="rgb(253,114,12)" fg:x="523783" fg:w="136"/><text x="100.1592%" y="367.50"></text></g><g><title>QUEUE_TEST.exe`csv::string_record::StringRecord::iter (136 samples, 0.03%)</title><rect x="99.9092%" y="341" width="0.0259%" height="15" fill="rgb(215,223,47)" fg:x="523783" fg:w="136"/><text x="100.1592%" y="351.50"></text></g><g><title>QUEUE_TEST.exe`csv::string_record::impl$13::into_iter (136 samples, 0.03%)</title><rect x="99.9092%" y="325" width="0.0259%" height="15" fill="rgb(248,225,23)" fg:x="523783" fg:w="136"/><text x="100.1592%" y="335.50"></text></g><g><title>QUEUE_TEST.exe`csv::byte_record::ByteRecord::iter (136 samples, 0.03%)</title><rect x="99.9092%" y="309" width="0.0259%" height="15" fill="rgb(250,108,0)" fg:x="523783" fg:w="136"/><text x="100.1592%" y="319.50"></text></g><g><title>QUEUE_TEST.exe`csv::byte_record::impl$17::into_iter (136 samples, 0.03%)</title><rect x="99.9092%" y="293" width="0.0259%" height="15" fill="rgb(228,208,7)" fg:x="523783" fg:w="136"/><text x="100.1592%" y="303.50"></text></g><g><title>QUEUE_TEST.exe`csv::byte_record::ByteRecord::as_slice (115 samples, 0.02%)</title><rect x="99.9132%" y="277" width="0.0219%" height="15" fill="rgb(244,45,10)" fg:x="523804" fg:w="115"/><text x="100.1632%" y="287.50"></text></g><g><title>QUEUE_TEST.exe`csv::byte_record::Bounds::end (82 samples, 0.02%)</title><rect x="99.9195%" y="261" width="0.0156%" height="15" fill="rgb(207,125,25)" fg:x="523837" fg:w="82"/><text x="100.1695%" y="271.50"></text></g><g><title>QUEUE_TEST.exe`csv::byte_record::Bounds::ends (72 samples, 0.01%)</title><rect x="99.9214%" y="245" width="0.0137%" height="15" fill="rgb(210,195,18)" fg:x="523847" fg:w="72"/><text x="100.1714%" y="255.50"></text></g><g><title>`0x7FF9679A059B (104 samples, 0.02%)</title><rect x="99.9437%" y="357" width="0.0198%" height="15" fill="rgb(249,80,12)" fg:x="523964" fg:w="104"/><text x="100.1937%" y="367.50"></text></g><g><title>`0x7FF9679A05A2 (63 samples, 0.01%)</title><rect x="99.9636%" y="357" width="0.0120%" height="15" fill="rgb(221,65,9)" fg:x="524068" fg:w="63"/><text x="100.2136%" y="367.50"></text></g><g><title>QUEUE_TEST.exe`enum2$&lt;core::result::Result&lt;alloc::collections::vec_deque::VecDeque&lt;QUEUE_TEST::csvreader::Rec,alloc::alloc::Global&gt;,alloc::boxed::Box&lt;dyn$&lt;core::error::Error&gt;,alloc::alloc::Global&gt; &gt; &gt;::unwrap(enum2$&lt;core::result::Result&lt;alloc::collections::vec_deque::VecDeque&lt;QUEUE_TEST::csvreader::Rec,alloc::alloc::Global&gt;,alloc::boxed::Box&lt;dyn$ (54,888 samples, 10.47%)</title><rect x="89.5157%" y="453" width="10.4696%" height="15" fill="rgb(235,49,36)" fg:x="469294" fg:w="54888"/><text x="89.7657%" y="463.50">QUEUE_TEST.exe`..</text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::csvreader::csvcon (54,888 samples, 10.47%)</title><rect x="89.5157%" y="437" width="10.4696%" height="15" fill="rgb(225,32,20)" fg:x="469294" fg:w="54888"/><text x="89.7657%" y="447.50">QUEUE_TEST.exe`..</text></g><g><title>QUEUE_TEST.exe`csv::reader::impl$9::next&lt;std::fs::File,QUEUE_TEST::csvreader::Rec&gt;(csv::reader::DeserializeRecordsIter (52,214 samples, 9.96%)</title><rect x="90.0257%" y="421" width="9.9596%" height="15" fill="rgb(215,141,46)" fg:x="471968" fg:w="52214"/><text x="90.2757%" y="431.50">QUEUE_TEST.exe..</text></g><g><title>QUEUE_TEST.exe`enum2$&lt;core::option::Option&lt;csv::string_record::StringRecord&gt; &gt;::as_ref (28,130 samples, 5.37%)</title><rect x="94.6196%" y="405" width="5.3657%" height="15" fill="rgb(250,160,47)" fg:x="496052" fg:w="28130"/><text x="94.8696%" y="415.50">QUEUE_T..</text></g><g><title>QUEUE_TEST.exe`csv::deserializer::deserialize_string_record&lt;QUEUE_TEST::csvreader::Rec&gt;(csv::string_record::StringRecord*, enum2$&lt;core::option::Option&lt;ref$ (28,115 samples, 5.36%)</title><rect x="94.6225%" y="389" width="5.3628%" height="15" fill="rgb(216,222,40)" fg:x="496067" fg:w="28115"/><text x="94.8725%" y="399.50">QUEUE_T..</text></g><g><title>QUEUE_TEST.exe`enum2$&lt;core::result::Result&lt;QUEUE_TEST::csvreader::Rec,csv::deserializer::DeserializeError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;QUEUE_TEST::csvreader::Rec,csv::deserializer::DeserializeError&gt; &gt;, csv::deserializer::deserialize_string_record::closure_env$1 (263 samples, 0.05%)</title><rect x="99.9351%" y="373" width="0.0502%" height="15" fill="rgb(234,217,39)" fg:x="523919" fg:w="263"/><text x="100.1851%" y="383.50"></text></g><g><title>QUEUE_TEST.exe`invoke_main() (524,225 samples, 99.99%)</title><rect x="0.0017%" y="629" width="99.9935%" height="15" fill="rgb(207,178,40)" fg:x="9" fg:w="524225"/><text x="0.2517%" y="639.50">QUEUE_TEST.exe`invoke_main()</text></g><g><title>QUEUE_TEST.exe`main (524,225 samples, 99.99%)</title><rect x="0.0017%" y="613" width="99.9935%" height="15" fill="rgb(221,136,13)" fg:x="9" fg:w="524225"/><text x="0.2517%" y="623.50">QUEUE_TEST.exe`main</text></g><g><title>QUEUE_TEST.exe`std::rt::lang_start_internal (524,225 samples, 99.99%)</title><rect x="0.0017%" y="597" width="99.9935%" height="15" fill="rgb(249,199,10)" fg:x="9" fg:w="524225"/><text x="0.2517%" y="607.50">QUEUE_TEST.exe`std::rt::lang_start_internal</text></g><g><title>QUEUE_TEST.exe`std::panic::catch_unwind (524,225 samples, 99.99%)</title><rect x="0.0017%" y="581" width="99.9935%" height="15" fill="rgb(249,222,13)" fg:x="9" fg:w="524225"/><text x="0.2517%" y="591.50">QUEUE_TEST.exe`std::panic::catch_unwind</text></g><g><title>QUEUE_TEST.exe`std::panicking::try (524,225 samples, 99.99%)</title><rect x="0.0017%" y="565" width="99.9935%" height="15" fill="rgb(244,185,38)" fg:x="9" fg:w="524225"/><text x="0.2517%" y="575.50">QUEUE_TEST.exe`std::panicking::try</text></g><g><title>QUEUE_TEST.exe`std::panicking::try::do_call (524,225 samples, 99.99%)</title><rect x="0.0017%" y="549" width="99.9935%" height="15" fill="rgb(236,202,9)" fg:x="9" fg:w="524225"/><text x="0.2517%" y="559.50">QUEUE_TEST.exe`std::panicking::try::do_call</text></g><g><title>QUEUE_TEST.exe`std::rt::lang_start_internal::closure$1 (524,224 samples, 99.99%)</title><rect x="0.0019%" y="533" width="99.9933%" height="15" fill="rgb(250,229,37)" fg:x="10" fg:w="524224"/><text x="0.2519%" y="543.50">QUEUE_TEST.exe`std::rt::lang_start_internal::closure$1</text></g><g><title>QUEUE_TEST.exe`std::panic::catch_unwind (524,224 samples, 99.99%)</title><rect x="0.0019%" y="517" width="99.9933%" height="15" fill="rgb(206,174,23)" fg:x="10" fg:w="524224"/><text x="0.2519%" y="527.50">QUEUE_TEST.exe`std::panic::catch_unwind</text></g><g><title>QUEUE_TEST.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (524,224 samples, 99.99%)</title><rect x="0.0019%" y="501" width="99.9933%" height="15" fill="rgb(211,33,43)" fg:x="10" fg:w="524224"/><text x="0.2519%" y="511.50">QUEUE_TEST.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$</text></g><g><title>QUEUE_TEST.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (524,224 samples, 99.99%)</title><rect x="0.0019%" y="485" width="99.9933%" height="15" fill="rgb(245,58,50)" fg:x="10" fg:w="524224"/><text x="0.2519%" y="495.50">QUEUE_TEST.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>QUEUE_TEST.exe`QUEUE_TEST::main (524,224 samples, 99.99%)</title><rect x="0.0019%" y="469" width="99.9933%" height="15" fill="rgb(244,68,36)" fg:x="10" fg:w="524224"/><text x="0.2519%" y="479.50">QUEUE_TEST.exe`QUEUE_TEST::main</text></g><g><title>QUEUE_TEST.exe`__scrt_common_main_seh() (524,230 samples, 99.99%)</title><rect x="0.0017%" y="645" width="99.9945%" height="15" fill="rgb(232,229,15)" fg:x="9" fg:w="524230"/><text x="0.2517%" y="655.50">QUEUE_TEST.exe`__scrt_common_main_seh()</text></g><g><title>`0x7FF98231BF2C (524,231 samples, 99.99%)</title><rect x="0.0017%" y="677" width="99.9947%" height="15" fill="rgb(254,30,23)" fg:x="9" fg:w="524231"/><text x="0.2517%" y="687.50">`0x7FF98231BF2C</text></g><g><title>`0x7FF981A7E8D7 (524,231 samples, 99.99%)</title><rect x="0.0017%" y="661" width="99.9947%" height="15" fill="rgb(235,160,14)" fg:x="9" fg:w="524231"/><text x="0.2517%" y="671.50">`0x7FF981A7E8D7</text></g><g><title>all (524,259 samples, 100%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(212,155,44)" fg:x="0" fg:w="524259"/><text x="0.2500%" y="703.50"></text></g></svg></svg>