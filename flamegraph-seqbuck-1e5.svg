<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="549.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="5672590962"><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (22,730,254 samples, 0.40%)</title><rect x="1.4532%" y="453" width="0.4007%" height="15" fill="rgb(227,0,7)" fg:x="82431724" fg:w="22730254"/><text x="1.7032%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (2,813,910 samples, 0.05%)</title><rect x="1.8539%" y="453" width="0.0496%" height="15" fill="rgb(217,0,24)" fg:x="105161978" fg:w="2813910"/><text x="2.1039%" y="463.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (146,299,843 samples, 2.58%)</title><rect x="1.9035%" y="421" width="2.5791%" height="15" fill="rgb(221,193,54)" fg:x="107975888" fg:w="146299843"/><text x="2.1535%" y="431.50">&lt;c..</text></g><g><title>&lt;QUEUE_TEST::csvreader::_::&lt;impl serde::de::Deserialize for QUEUE_TEST::csvreader::Rec&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (146,299,843 samples, 2.58%)</title><rect x="1.9035%" y="405" width="2.5791%" height="15" fill="rgb(248,212,6)" fg:x="107975888" fg:w="146299843"/><text x="2.1535%" y="415.50">&lt;Q..</text></g><g><title>&lt;serde::de::value::BorrowedBytesDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_identifier (146,299,843 samples, 2.58%)</title><rect x="1.9035%" y="389" width="2.5791%" height="15" fill="rgb(208,68,35)" fg:x="107975888" fg:w="146299843"/><text x="2.1535%" y="399.50">&lt;s..</text></g><g><title>&lt;serde::de::value::BorrowedBytesDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (146,299,843 samples, 2.58%)</title><rect x="1.9035%" y="373" width="2.5791%" height="15" fill="rgb(232,128,0)" fg:x="107975888" fg:w="146299843"/><text x="2.1535%" y="383.50">&lt;s..</text></g><g><title>serde::de::Visitor::visit_borrowed_bytes (146,299,843 samples, 2.58%)</title><rect x="1.9035%" y="357" width="2.5791%" height="15" fill="rgb(207,160,47)" fg:x="107975888" fg:w="146299843"/><text x="2.1535%" y="367.50">se..</text></g><g><title>&lt;QUEUE_TEST::csvreader::_::&lt;impl serde::de::Deserialize for QUEUE_TEST::csvreader::Rec&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_bytes (146,299,843 samples, 2.58%)</title><rect x="1.9035%" y="341" width="2.5791%" height="15" fill="rgb(228,23,34)" fg:x="107975888" fg:w="146299843"/><text x="2.1535%" y="351.50">&lt;Q..</text></g><g><title>&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::has_headers (11,298,271 samples, 0.20%)</title><rect x="4.4825%" y="421" width="0.1992%" height="15" fill="rgb(218,30,26)" fg:x="254275731" fg:w="11298271"/><text x="4.7325%" y="431.50"></text></g><g><title>&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::has_headers (8,536,845 samples, 0.15%)</title><rect x="4.5312%" y="405" width="0.1505%" height="15" fill="rgb(220,122,19)" fg:x="257037157" fg:w="8536845"/><text x="4.7812%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (8,536,845 samples, 0.15%)</title><rect x="4.5312%" y="389" width="0.1505%" height="15" fill="rgb(250,228,42)" fg:x="257037157" fg:w="8536845"/><text x="4.7812%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (17,057,063 samples, 0.30%)</title><rect x="6.3856%" y="309" width="0.3007%" height="15" fill="rgb(240,193,28)" fg:x="362226801" fg:w="17057063"/><text x="6.6356%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (17,057,063 samples, 0.30%)</title><rect x="6.3856%" y="293" width="0.3007%" height="15" fill="rgb(216,20,37)" fg:x="362226801" fg:w="17057063"/><text x="6.6356%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (17,057,063 samples, 0.30%)</title><rect x="6.3856%" y="277" width="0.3007%" height="15" fill="rgb(206,188,39)" fg:x="362226801" fg:w="17057063"/><text x="6.6356%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5,698,451 samples, 0.10%)</title><rect x="6.9844%" y="277" width="0.1005%" height="15" fill="rgb(217,207,13)" fg:x="396194527" fg:w="5698451"/><text x="7.2344%" y="287.50"></text></g><g><title>serde::de::MapAccess::next_key (296,763,713 samples, 5.23%)</title><rect x="1.9035%" y="453" width="5.2315%" height="15" fill="rgb(231,73,38)" fg:x="107975888" fg:w="296763713"/><text x="2.1535%" y="463.50">serde:..</text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::MapAccess&gt;::next_key_seed (296,763,713 samples, 5.23%)</title><rect x="1.9035%" y="437" width="5.2315%" height="15" fill="rgb(225,20,46)" fg:x="107975888" fg:w="296763713"/><text x="2.1535%" y="447.50">&lt;&amp;mut ..</text></g><g><title>&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::next_header_bytes (139,165,599 samples, 2.45%)</title><rect x="4.6817%" y="421" width="2.4533%" height="15" fill="rgb(210,31,41)" fg:x="265574002" fg:w="139165599"/><text x="4.9317%" y="431.50">&lt;c..</text></g><g><title>&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_header_bytes (139,165,599 samples, 2.45%)</title><rect x="4.6817%" y="405" width="2.4533%" height="15" fill="rgb(221,200,47)" fg:x="265574002" fg:w="139165599"/><text x="4.9317%" y="415.50">&lt;c..</text></g><g><title>&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_header (139,165,599 samples, 2.45%)</title><rect x="4.6817%" y="389" width="2.4533%" height="15" fill="rgb(226,26,5)" fg:x="265574002" fg:w="139165599"/><text x="4.9317%" y="399.50">&lt;c..</text></g><g><title>core::option::Option&lt;T&gt;::and_then (139,165,599 samples, 2.45%)</title><rect x="4.6817%" y="373" width="2.4533%" height="15" fill="rgb(249,33,26)" fg:x="265574002" fg:w="139165599"/><text x="4.9317%" y="383.50">co..</text></g><g><title>&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_header::{{closure}} (139,165,599 samples, 2.45%)</title><rect x="4.6817%" y="357" width="2.4533%" height="15" fill="rgb(235,183,28)" fg:x="265574002" fg:w="139165599"/><text x="4.9317%" y="367.50">&lt;c..</text></g><g><title>&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (139,165,599 samples, 2.45%)</title><rect x="4.6817%" y="341" width="2.4533%" height="15" fill="rgb(221,5,38)" fg:x="265574002" fg:w="139165599"/><text x="4.9317%" y="351.50">&lt;c..</text></g><g><title>&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (139,165,599 samples, 2.45%)</title><rect x="4.6817%" y="325" width="2.4533%" height="15" fill="rgb(247,18,42)" fg:x="265574002" fg:w="139165599"/><text x="4.9317%" y="335.50">&lt;c..</text></g><g><title>csv::byte_record::Bounds::ends (25,455,737 samples, 0.45%)</title><rect x="6.6863%" y="309" width="0.4487%" height="15" fill="rgb(241,131,45)" fg:x="379283864" fg:w="25455737"/><text x="6.9363%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (8,545,074 samples, 0.15%)</title><rect x="6.9844%" y="293" width="0.1506%" height="15" fill="rgb(249,31,29)" fg:x="396194527" fg:w="8545074"/><text x="7.2344%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2,846,623 samples, 0.05%)</title><rect x="7.0848%" y="277" width="0.0502%" height="15" fill="rgb(225,111,53)" fg:x="401892978" fg:w="2846623"/><text x="7.3348%" y="287.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2,846,623 samples, 0.05%)</title><rect x="7.0848%" y="261" width="0.0502%" height="15" fill="rgb(238,160,17)" fg:x="401892978" fg:w="2846623"/><text x="7.3348%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2,846,623 samples, 0.05%)</title><rect x="7.0848%" y="245" width="0.0502%" height="15" fill="rgb(214,148,48)" fg:x="401892978" fg:w="2846623"/><text x="7.3348%" y="255.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_struct (427,423,618 samples, 7.53%)</title><rect x="0.0000%" y="485" width="7.5349%" height="15" fill="rgb(232,36,49)" fg:x="0" fg:w="427423618"/><text x="0.2500%" y="495.50">&lt;&amp;mut csv:..</text></g><g><title>&lt;QUEUE_TEST::csvreader::_::&lt;impl serde::de::Deserialize for QUEUE_TEST::csvreader::Rec&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (401,997,472 samples, 7.09%)</title><rect x="0.4482%" y="469" width="7.0867%" height="15" fill="rgb(209,103,24)" fg:x="25426146" fg:w="401997472"/><text x="0.6982%" y="479.50">&lt;QUEUE_TES..</text></g><g><title>serde::de::MapAccess::next_value (22,684,017 samples, 0.40%)</title><rect x="7.1350%" y="453" width="0.3999%" height="15" fill="rgb(229,88,8)" fg:x="404739601" fg:w="22684017"/><text x="7.3850%" y="463.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::MapAccess&gt;::next_value_seed (22,684,017 samples, 0.40%)</title><rect x="7.1350%" y="437" width="0.3999%" height="15" fill="rgb(213,181,19)" fg:x="404739601" fg:w="22684017"/><text x="7.3850%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (5,651,509 samples, 0.10%)</title><rect x="9.9401%" y="309" width="0.0996%" height="15" fill="rgb(254,191,54)" fg:x="563858444" fg:w="5651509"/><text x="10.1901%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (11,641,454 samples, 0.21%)</title><rect x="9.8897%" y="357" width="0.2052%" height="15" fill="rgb(241,83,37)" fg:x="561004185" fg:w="11641454"/><text x="10.1397%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (8,787,195 samples, 0.15%)</title><rect x="9.9401%" y="341" width="0.1549%" height="15" fill="rgb(233,36,39)" fg:x="563858444" fg:w="8787195"/><text x="10.1901%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8,787,195 samples, 0.15%)</title><rect x="9.9401%" y="325" width="0.1549%" height="15" fill="rgb(226,3,54)" fg:x="563858444" fg:w="8787195"/><text x="10.1901%" y="335.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (3,135,686 samples, 0.06%)</title><rect x="10.0397%" y="309" width="0.0553%" height="15" fill="rgb(245,192,40)" fg:x="569509953" fg:w="3135686"/><text x="10.2897%" y="319.50"></text></g><g><title>core::slice::index::get_noubcheck (3,135,686 samples, 0.06%)</title><rect x="10.0397%" y="293" width="0.0553%" height="15" fill="rgb(238,167,29)" fg:x="569509953" fg:w="3135686"/><text x="10.2897%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4,649,705 samples, 0.08%)</title><rect x="10.1425%" y="325" width="0.0820%" height="15" fill="rgb(232,182,51)" fg:x="575341835" fg:w="4649705"/><text x="10.3925%" y="335.50"></text></g><g><title>&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (77,223,698 samples, 1.36%)</title><rect x="8.8845%" y="389" width="1.3613%" height="15" fill="rgb(231,60,39)" fg:x="503979455" fg:w="77223698"/><text x="9.1345%" y="399.50"></text></g><g><title>&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (77,223,698 samples, 1.36%)</title><rect x="8.8845%" y="373" width="1.3613%" height="15" fill="rgb(208,69,12)" fg:x="503979455" fg:w="77223698"/><text x="9.1345%" y="383.50"></text></g><g><title>csv::byte_record::Bounds::ends (8,557,514 samples, 0.15%)</title><rect x="10.0950%" y="357" width="0.1509%" height="15" fill="rgb(235,93,37)" fg:x="572645639" fg:w="8557514"/><text x="10.3450%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5,861,318 samples, 0.10%)</title><rect x="10.1425%" y="341" width="0.1033%" height="15" fill="rgb(213,116,39)" fg:x="575341835" fg:w="5861318"/><text x="10.3925%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,211,613 samples, 0.02%)</title><rect x="10.2245%" y="325" width="0.0214%" height="15" fill="rgb(222,207,29)" fg:x="579991540" fg:w="1211613"/><text x="10.4745%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,211,613 samples, 0.02%)</title><rect x="10.2245%" y="309" width="0.0214%" height="15" fill="rgb(206,96,30)" fg:x="579991540" fg:w="1211613"/><text x="10.4745%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,211,613 samples, 0.02%)</title><rect x="10.2245%" y="293" width="0.0214%" height="15" fill="rgb(218,138,4)" fg:x="579991540" fg:w="1211613"/><text x="10.4745%" y="303.50"></text></g><g><title>core::ptr::read (2,905,453 samples, 0.05%)</title><rect x="10.2458%" y="357" width="0.0512%" height="15" fill="rgb(250,191,14)" fg:x="581203153" fg:w="2905453"/><text x="10.4958%" y="367.50"></text></g><g><title>&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::next_field (125,260,632 samples, 2.21%)</title><rect x="8.4874%" y="437" width="2.2082%" height="15" fill="rgb(239,60,40)" fg:x="481453036" fg:w="125260632"/><text x="8.7374%" y="447.50">&lt;..</text></g><g><title>&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_field (125,260,632 samples, 2.21%)</title><rect x="8.4874%" y="421" width="2.2082%" height="15" fill="rgb(206,27,48)" fg:x="481453036" fg:w="125260632"/><text x="8.7374%" y="431.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (108,317,299 samples, 1.91%)</title><rect x="8.7860%" y="405" width="1.9095%" height="15" fill="rgb(225,35,8)" fg:x="498396369" fg:w="108317299"/><text x="9.0360%" y="415.50">&lt;..</text></g><g><title>core::option::Option&lt;T&gt;::take (25,510,515 samples, 0.45%)</title><rect x="10.2458%" y="389" width="0.4497%" height="15" fill="rgb(250,213,24)" fg:x="581203153" fg:w="25510515"/><text x="10.4958%" y="399.50"></text></g><g><title>core::mem::replace (25,510,515 samples, 0.45%)</title><rect x="10.2458%" y="373" width="0.4497%" height="15" fill="rgb(247,123,22)" fg:x="581203153" fg:w="25510515"/><text x="10.4958%" y="383.50"></text></g><g><title>core::ptr::write (22,605,062 samples, 0.40%)</title><rect x="10.2970%" y="357" width="0.3985%" height="15" fill="rgb(231,138,38)" fg:x="584108606" fg:w="22605062"/><text x="10.5470%" y="367.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for f64&gt;::deserialize::PrimitiveVisitor as serde::de::Visitor&gt;::visit_f64 (20,075,826 samples, 0.35%)</title><rect x="10.6955%" y="437" width="0.3539%" height="15" fill="rgb(231,145,46)" fg:x="606713668" fg:w="20075826"/><text x="10.9455%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (19,671,403 samples, 0.35%)</title><rect x="11.0494%" y="437" width="0.3468%" height="15" fill="rgb(251,118,11)" fg:x="626789494" fg:w="19671403"/><text x="11.2994%" y="447.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (239,144,210 samples, 4.22%)</title><rect x="7.5349%" y="485" width="4.2158%" height="15" fill="rgb(217,147,25)" fg:x="427423618" fg:w="239144210"/><text x="7.7849%" y="495.50">&lt;core..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for f64&gt;::deserialize (185,114,792 samples, 3.26%)</title><rect x="8.4874%" y="469" width="3.2633%" height="15" fill="rgb(247,81,37)" fg:x="481453036" fg:w="185114792"/><text x="8.7374%" y="479.50">ser..</text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_f64 (185,114,792 samples, 3.26%)</title><rect x="8.4874%" y="453" width="3.2633%" height="15" fill="rgb(209,12,38)" fg:x="481453036" fg:w="185114792"/><text x="8.7374%" y="463.50">&lt;&amp;m..</text></g><g><title>core::str::&lt;impl str&gt;::parse (20,106,931 samples, 0.35%)</title><rect x="11.3962%" y="437" width="0.3545%" height="15" fill="rgb(227,1,9)" fg:x="646460897" fg:w="20106931"/><text x="11.6462%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (5,885,013 samples, 0.10%)</title><rect x="11.9999%" y="469" width="0.1037%" height="15" fill="rgb(248,47,43)" fg:x="680703456" fg:w="5885013"/><text x="12.2499%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (5,751,085 samples, 0.10%)</title><rect x="12.7029%" y="389" width="0.1014%" height="15" fill="rgb(221,10,30)" fg:x="720583813" fg:w="5751085"/><text x="12.9529%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (11,322,489 samples, 0.20%)</title><rect x="12.7029%" y="405" width="0.1996%" height="15" fill="rgb(210,229,1)" fg:x="720583813" fg:w="11322489"/><text x="12.9529%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (5,571,404 samples, 0.10%)</title><rect x="12.8043%" y="389" width="0.0982%" height="15" fill="rgb(222,148,37)" fg:x="726334898" fg:w="5571404"/><text x="13.0543%" y="399.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (5,571,404 samples, 0.10%)</title><rect x="12.8043%" y="373" width="0.0982%" height="15" fill="rgb(234,67,33)" fg:x="726334898" fg:w="5571404"/><text x="13.0543%" y="383.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (2,776,340 samples, 0.05%)</title><rect x="12.8536%" y="357" width="0.0489%" height="15" fill="rgb(247,98,35)" fg:x="729129962" fg:w="2776340"/><text x="13.1036%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (2,776,340 samples, 0.05%)</title><rect x="12.8536%" y="341" width="0.0489%" height="15" fill="rgb(247,138,52)" fg:x="729129962" fg:w="2776340"/><text x="13.1036%" y="351.50"></text></g><g><title>core::slice::index::get_offset_len_mut_noubcheck (2,776,340 samples, 0.05%)</title><rect x="12.8536%" y="325" width="0.0489%" height="15" fill="rgb(213,79,30)" fg:x="729129962" fg:w="2776340"/><text x="13.1036%" y="335.50"></text></g><g><title>core::slice::index::get_mut_noubcheck (2,776,340 samples, 0.05%)</title><rect x="12.8536%" y="309" width="0.0489%" height="15" fill="rgb(246,177,23)" fg:x="729129962" fg:w="2776340"/><text x="13.1036%" y="319.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (2,811,931 samples, 0.05%)</title><rect x="12.9025%" y="405" width="0.0496%" height="15" fill="rgb(230,62,27)" fg:x="731906302" fg:w="2811931"/><text x="13.1525%" y="415.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (2,811,931 samples, 0.05%)</title><rect x="12.9025%" y="389" width="0.0496%" height="15" fill="rgb(216,154,8)" fg:x="731906302" fg:w="2811931"/><text x="13.1525%" y="399.50"></text></g><g><title>&lt;std::sys::pal::unix::fd::FileDesc as std::os::fd::raw::AsRawFd&gt;::as_raw_fd (2,954,331 samples, 0.05%)</title><rect x="12.9521%" y="293" width="0.0521%" height="15" fill="rgb(244,35,45)" fg:x="734718233" fg:w="2954331"/><text x="13.2021%" y="303.50"></text></g><g><title>&lt;std::os::fd::owned::OwnedFd as std::os::fd::raw::AsRawFd&gt;::as_raw_fd (2,954,331 samples, 0.05%)</title><rect x="12.9521%" y="277" width="0.0521%" height="15" fill="rgb(251,115,12)" fg:x="734718233" fg:w="2954331"/><text x="13.2021%" y="287.50"></text></g><g><title>entry_SYSCALL_64 (5,625,067 samples, 0.10%)</title><rect x="13.0552%" y="277" width="0.0992%" height="15" fill="rgb(240,54,50)" fg:x="740567180" fg:w="5625067"/><text x="13.3052%" y="287.50"></text></g><g><title>activate_page (2,857,093 samples, 0.05%)</title><rect x="13.8358%" y="117" width="0.0504%" height="15" fill="rgb(233,84,52)" fg:x="784848580" fg:w="2857093"/><text x="14.0858%" y="127.50"></text></g><g><title>copy_page_to_iter (85,692,631 samples, 1.51%)</title><rect x="13.8862%" y="117" width="1.5106%" height="15" fill="rgb(207,117,47)" fg:x="787705673" fg:w="85692631"/><text x="14.1362%" y="127.50"></text></g><g><title>copy_user_enhanced_fast_string (80,079,868 samples, 1.41%)</title><rect x="13.9851%" y="101" width="1.4117%" height="15" fill="rgb(249,43,39)" fg:x="793318436" fg:w="80079868"/><text x="14.2351%" y="111.50"></text></g><g><title>__x86_indirect_thunk_rax (2,871,699 samples, 0.05%)</title><rect x="15.4959%" y="85" width="0.0506%" height="15" fill="rgb(209,38,44)" fg:x="879018534" fg:w="2871699"/><text x="15.7459%" y="95.50"></text></g><g><title>activate_page (14,194,304 samples, 0.25%)</title><rect x="15.4959%" y="101" width="0.2502%" height="15" fill="rgb(236,212,23)" fg:x="879018534" fg:w="14194304"/><text x="15.7459%" y="111.50"></text></g><g><title>pagevec_lru_move_fn (11,322,605 samples, 0.20%)</title><rect x="15.5465%" y="85" width="0.1996%" height="15" fill="rgb(242,79,21)" fg:x="881890233" fg:w="11322605"/><text x="15.7965%" y="95.50"></text></g><g><title>__activate_page (11,322,605 samples, 0.20%)</title><rect x="15.5465%" y="69" width="0.1996%" height="15" fill="rgb(211,96,35)" fg:x="881890233" fg:w="11322605"/><text x="15.7965%" y="79.50"></text></g><g><title>__mod_lruvec_state (5,670,819 samples, 0.10%)</title><rect x="15.6461%" y="53" width="0.1000%" height="15" fill="rgb(253,215,40)" fg:x="887542019" fg:w="5670819"/><text x="15.8961%" y="63.50"></text></g><g><title>__mod_memcg_state (5,670,819 samples, 0.10%)</title><rect x="15.6461%" y="37" width="0.1000%" height="15" fill="rgb(211,81,21)" fg:x="887542019" fg:w="5670819"/><text x="15.8961%" y="47.50"></text></g><g><title>mark_page_accessed (25,530,369 samples, 0.45%)</title><rect x="15.3968%" y="117" width="0.4501%" height="15" fill="rgb(208,190,38)" fg:x="873398304" fg:w="25530369"/><text x="15.6468%" y="127.50"></text></g><g><title>workingset_activation (5,715,835 samples, 0.10%)</title><rect x="15.7461%" y="101" width="0.1008%" height="15" fill="rgb(235,213,38)" fg:x="893212838" fg:w="5715835"/><text x="15.9961%" y="111.50"></text></g><g><title>xas_load (2,844,510 samples, 0.05%)</title><rect x="16.2445%" y="85" width="0.0501%" height="15" fill="rgb(237,122,38)" fg:x="921486466" fg:w="2844510"/><text x="16.4945%" y="95.50"></text></g><g><title>generic_file_buffered_read (153,652,451 samples, 2.71%)</title><rect x="13.6355%" y="133" width="2.7087%" height="15" fill="rgb(244,218,35)" fg:x="773486277" fg:w="153652451"/><text x="13.8855%" y="143.50">ge..</text></g><g><title>pagecache_get_page (28,210,055 samples, 0.50%)</title><rect x="15.8469%" y="117" width="0.4973%" height="15" fill="rgb(240,68,47)" fg:x="898928673" fg:w="28210055"/><text x="16.0969%" y="127.50"></text></g><g><title>find_get_entry (28,210,055 samples, 0.50%)</title><rect x="15.8469%" y="101" width="0.4973%" height="15" fill="rgb(210,16,53)" fg:x="898928673" fg:w="28210055"/><text x="16.0969%" y="111.50"></text></g><g><title>xas_start (2,807,752 samples, 0.05%)</title><rect x="16.2947%" y="85" width="0.0495%" height="15" fill="rgb(235,124,12)" fg:x="924330976" fg:w="2807752"/><text x="16.5447%" y="95.50"></text></g><g><title>mark_page_accessed (2,851,883 samples, 0.05%)</title><rect x="16.3442%" y="133" width="0.0503%" height="15" fill="rgb(224,169,11)" fg:x="927138728" fg:w="2851883"/><text x="16.5942%" y="143.50"></text></g><g><title>__vfs_read (165,249,229 samples, 2.91%)</title><rect x="13.5308%" y="197" width="2.9131%" height="15" fill="rgb(250,166,2)" fg:x="767545636" fg:w="165249229"/><text x="13.7808%" y="207.50">__..</text></g><g><title>new_sync_read (165,249,229 samples, 2.91%)</title><rect x="13.5308%" y="181" width="2.9131%" height="15" fill="rgb(242,216,29)" fg:x="767545636" fg:w="165249229"/><text x="13.7808%" y="191.50">ne..</text></g><g><title>ext4_file_read_iter (162,144,716 samples, 2.86%)</title><rect x="13.5855%" y="165" width="2.8584%" height="15" fill="rgb(230,116,27)" fg:x="770650149" fg:w="162144716"/><text x="13.8355%" y="175.50">ex..</text></g><g><title>generic_file_read_iter (159,308,588 samples, 2.81%)</title><rect x="13.6355%" y="149" width="2.8084%" height="15" fill="rgb(228,99,48)" fg:x="773486277" fg:w="159308588"/><text x="13.8855%" y="159.50">ge..</text></g><g><title>pagecache_get_page (2,804,254 samples, 0.05%)</title><rect x="16.3945%" y="133" width="0.0494%" height="15" fill="rgb(253,11,6)" fg:x="929990611" fg:w="2804254"/><text x="16.6445%" y="143.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (189,460,609 samples, 3.34%)</title><rect x="13.1543%" y="277" width="3.3399%" height="15" fill="rgb(247,143,39)" fg:x="746192247" fg:w="189460609"/><text x="13.4043%" y="287.50">ent..</text></g><g><title>do_syscall_64 (186,605,506 samples, 3.29%)</title><rect x="13.2047%" y="261" width="3.2896%" height="15" fill="rgb(236,97,10)" fg:x="749047350" fg:w="186605506"/><text x="13.4547%" y="271.50">do_..</text></g><g><title>__x64_sys_read (174,013,517 samples, 3.07%)</title><rect x="13.4267%" y="245" width="3.0676%" height="15" fill="rgb(233,208,19)" fg:x="761639339" fg:w="174013517"/><text x="13.6767%" y="255.50">__x..</text></g><g><title>ksys_read (174,013,517 samples, 3.07%)</title><rect x="13.4267%" y="229" width="3.0676%" height="15" fill="rgb(216,164,2)" fg:x="761639339" fg:w="174013517"/><text x="13.6767%" y="239.50">ksy..</text></g><g><title>vfs_read (174,013,517 samples, 3.07%)</title><rect x="13.4267%" y="213" width="3.0676%" height="15" fill="rgb(220,129,5)" fg:x="761639339" fg:w="174013517"/><text x="13.6767%" y="223.50">vfs..</text></g><g><title>rw_verify_area (2,857,991 samples, 0.05%)</title><rect x="16.4439%" y="197" width="0.0504%" height="15" fill="rgb(242,17,10)" fg:x="932794865" fg:w="2857991"/><text x="16.6939%" y="207.50"></text></g><g><title>security_file_permission (2,857,991 samples, 0.05%)</title><rect x="16.4439%" y="181" width="0.0504%" height="15" fill="rgb(242,107,0)" fg:x="932794865" fg:w="2857991"/><text x="16.6939%" y="191.50"></text></g><g><title>fsnotify (2,857,991 samples, 0.05%)</title><rect x="16.4439%" y="165" width="0.0504%" height="15" fill="rgb(251,28,31)" fg:x="932794865" fg:w="2857991"/><text x="16.6939%" y="175.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (206,672,567 samples, 3.64%)</title><rect x="12.9521%" y="405" width="3.6434%" height="15" fill="rgb(233,223,10)" fg:x="734718233" fg:w="206672567"/><text x="13.2021%" y="415.50">&lt;std..</text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (206,672,567 samples, 3.64%)</title><rect x="12.9521%" y="389" width="3.6434%" height="15" fill="rgb(215,21,27)" fg:x="734718233" fg:w="206672567"/><text x="13.2021%" y="399.50">std:..</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (206,672,567 samples, 3.64%)</title><rect x="12.9521%" y="373" width="3.6434%" height="15" fill="rgb(232,23,21)" fg:x="734718233" fg:w="206672567"/><text x="13.2021%" y="383.50">std:..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (206,672,567 samples, 3.64%)</title><rect x="12.9521%" y="357" width="3.6434%" height="15" fill="rgb(244,5,23)" fg:x="734718233" fg:w="206672567"/><text x="13.2021%" y="367.50">&lt;std..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (206,672,567 samples, 3.64%)</title><rect x="12.9521%" y="341" width="3.6434%" height="15" fill="rgb(226,81,46)" fg:x="734718233" fg:w="206672567"/><text x="13.2021%" y="351.50">&lt;&amp;st..</text></g><g><title>std::sys::pal::unix::fs::File::read_buf (206,672,567 samples, 3.64%)</title><rect x="12.9521%" y="325" width="3.6434%" height="15" fill="rgb(247,70,30)" fg:x="734718233" fg:w="206672567"/><text x="13.2021%" y="335.50">std:..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::read_buf (206,672,567 samples, 3.64%)</title><rect x="12.9521%" y="309" width="3.6434%" height="15" fill="rgb(212,68,19)" fg:x="734718233" fg:w="206672567"/><text x="13.2021%" y="319.50">std:..</text></g><g><title>__libc_read (203,718,236 samples, 3.59%)</title><rect x="13.0042%" y="293" width="3.5913%" height="15" fill="rgb(240,187,13)" fg:x="737672564" fg:w="203718236"/><text x="13.2542%" y="303.50">__li..</text></g><g><title>syscall_return_via_sysret (5,737,944 samples, 0.10%)</title><rect x="16.4943%" y="277" width="0.1012%" height="15" fill="rgb(223,113,26)" fg:x="935652856" fg:w="5737944"/><text x="16.7443%" y="287.50"></text></g><g><title>csv::byte_record::ByteRecord::clear (8,399,040 samples, 0.15%)</title><rect x="16.5954%" y="405" width="0.1481%" height="15" fill="rgb(206,192,2)" fg:x="941390800" fg:w="8399040"/><text x="16.8454%" y="415.50"></text></g><g><title>csv::byte_record::ByteRecord::truncate (8,399,040 samples, 0.15%)</title><rect x="16.5954%" y="389" width="0.1481%" height="15" fill="rgb(241,108,4)" fg:x="941390800" fg:w="8399040"/><text x="16.8454%" y="399.50"></text></g><g><title>csv::byte_record::ByteRecord::set_position (2,833,152 samples, 0.05%)</title><rect x="16.7435%" y="405" width="0.0499%" height="15" fill="rgb(247,173,49)" fg:x="949789840" fg:w="2833152"/><text x="16.9935%" y="415.50"></text></g><g><title>&lt;csv::reader::DeserializeRecordsIter&lt;R,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (291,829,220 samples, 5.14%)</title><rect x="11.7507%" y="485" width="5.1445%" height="15" fill="rgb(224,114,35)" fg:x="666567828" fg:w="291829220"/><text x="12.0007%" y="495.50">&lt;csv::..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_record (271,808,579 samples, 4.79%)</title><rect x="12.1036%" y="469" width="4.7916%" height="15" fill="rgb(245,159,27)" fg:x="686588469" fg:w="271808579"/><text x="12.3536%" y="479.50">csv::r..</text></g><g><title>csv::string_record::StringRecord::read (271,808,579 samples, 4.79%)</title><rect x="12.1036%" y="453" width="4.7916%" height="15" fill="rgb(245,172,44)" fg:x="686588469" fg:w="271808579"/><text x="12.3536%" y="463.50">csv::s..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (271,808,579 samples, 4.79%)</title><rect x="12.1036%" y="437" width="4.7916%" height="15" fill="rgb(236,23,11)" fg:x="686588469" fg:w="271808579"/><text x="12.3536%" y="447.50">csv::r..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record_impl (257,822,218 samples, 4.55%)</title><rect x="12.3502%" y="421" width="4.5451%" height="15" fill="rgb(205,117,38)" fg:x="700574830" fg:w="257822218"/><text x="12.6002%" y="431.50">csv::..</text></g><g><title>csv::reader::ReaderState::add_record (5,774,056 samples, 0.10%)</title><rect x="16.7934%" y="405" width="0.1018%" height="15" fill="rgb(237,72,25)" fg:x="952622992" fg:w="5774056"/><text x="17.0434%" y="415.50"></text></g><g><title>&lt;QUEUE_TEST::vectors::Vector as core::ops::arith::Sub&gt;::sub (3,059,643 samples, 0.05%)</title><rect x="16.8952%" y="469" width="0.0539%" height="15" fill="rgb(244,70,9)" fg:x="958397048" fg:w="3059643"/><text x="17.1452%" y="479.50"></text></g><g><title>&lt;QUEUE_TEST::vectors::Vector as core::ops::arith::AddAssign&gt;::add_assign (2,928,204 samples, 0.05%)</title><rect x="17.0007%" y="453" width="0.0516%" height="15" fill="rgb(217,125,39)" fg:x="964382305" fg:w="2928204"/><text x="17.2507%" y="463.50"></text></g><g><title>QUEUE_TEST::collisionhandling::fast_forward (11,816,235 samples, 0.21%)</title><rect x="16.9492%" y="469" width="0.2083%" height="15" fill="rgb(235,36,10)" fg:x="961456691" fg:w="11816235"/><text x="17.1992%" y="479.50"></text></g><g><title>&lt;QUEUE_TEST::vectors::Vector as core::ops::arith::Mul&lt;f64&gt;&gt;::mul (5,962,417 samples, 0.11%)</title><rect x="17.0524%" y="453" width="0.1051%" height="15" fill="rgb(251,123,47)" fg:x="967310509" fg:w="5962417"/><text x="17.3024%" y="463.50"></text></g><g><title>&lt;QUEUE_TEST::vectors::Vector as core::ops::arith::Mul&lt;f64&gt;&gt;::mul (8,818,260 samples, 0.16%)</title><rect x="17.1575%" y="453" width="0.1555%" height="15" fill="rgb(221,13,13)" fg:x="973272926" fg:w="8818260"/><text x="17.4075%" y="463.50"></text></g><g><title>&lt;QUEUE_TEST::vectors::Vector as core::ops::arith::Div&lt;f64&gt;&gt;::div (5,982,322 samples, 0.11%)</title><rect x="17.3649%" y="437" width="0.1055%" height="15" fill="rgb(238,131,9)" fg:x="985040071" fg:w="5982322"/><text x="17.6149%" y="447.50"></text></g><g><title>&lt;QUEUE_TEST::vectors::Vector as core::ops::arith::Mul&lt;f64&gt;&gt;::mul (6,058,503 samples, 0.11%)</title><rect x="17.4704%" y="437" width="0.1068%" height="15" fill="rgb(211,50,8)" fg:x="991022393" fg:w="6058503"/><text x="17.7204%" y="447.50"></text></g><g><title>QUEUE_TEST::collisionhandling::beta2 (11,921,654 samples, 0.21%)</title><rect x="17.6287%" y="421" width="0.2102%" height="15" fill="rgb(245,182,24)" fg:x="1000005700" fg:w="11921654"/><text x="17.8787%" y="431.50"></text></g><g><title>QUEUE_TEST::collisionhandling::b_and_k2 (17,921,063 samples, 0.32%)</title><rect x="17.5772%" y="437" width="0.3159%" height="15" fill="rgb(242,14,37)" fg:x="997080896" fg:w="17921063"/><text x="17.8272%" y="447.50"></text></g><g><title>QUEUE_TEST::collisionhandling::omega_0_sq (3,074,605 samples, 0.05%)</title><rect x="17.8389%" y="421" width="0.0542%" height="15" fill="rgb(246,228,12)" fg:x="1011927354" fg:w="3074605"/><text x="18.0889%" y="431.50"></text></g><g><title>&lt;QUEUE_TEST::vectors::Vector as core::ops::arith::Mul&gt;::mul (2,926,080 samples, 0.05%)</title><rect x="17.8931%" y="421" width="0.0516%" height="15" fill="rgb(213,55,15)" fg:x="1015001959" fg:w="2926080"/><text x="18.1431%" y="431.50"></text></g><g><title>QUEUE_TEST::vectors::Vector::dot (2,926,080 samples, 0.05%)</title><rect x="17.8931%" y="405" width="0.0516%" height="15" fill="rgb(209,9,3)" fg:x="1015001959" fg:w="2926080"/><text x="18.1431%" y="415.50"></text></g><g><title>&lt;&amp;QUEUE_TEST::vectors::Vector as core::ops::arith::Div&lt;f64&gt;&gt;::div (9,203,897 samples, 0.16%)</title><rect x="17.9447%" y="405" width="0.1623%" height="15" fill="rgb(230,59,30)" fg:x="1017928039" fg:w="9203897"/><text x="18.1947%" y="415.50"></text></g><g><title>QUEUE_TEST::particle::Particle::relative_speed (18,051,875 samples, 0.32%)</title><rect x="17.8931%" y="437" width="0.3182%" height="15" fill="rgb(209,121,21)" fg:x="1015001959" fg:w="18051875"/><text x="18.1431%" y="447.50"></text></g><g><title>QUEUE_TEST::vectors::Vector::unit_vector (15,125,795 samples, 0.27%)</title><rect x="17.9447%" y="421" width="0.2666%" height="15" fill="rgb(220,109,13)" fg:x="1017928039" fg:w="15125795"/><text x="18.1947%" y="431.50"></text></g><g><title>QUEUE_TEST::vectors::Vector::mag (5,921,898 samples, 0.10%)</title><rect x="18.1069%" y="405" width="0.1044%" height="15" fill="rgb(232,18,1)" fg:x="1027131936" fg:w="5921898"/><text x="18.3569%" y="415.50"></text></g><g><title>QUEUE_TEST::vectors::square (2,955,393 samples, 0.05%)</title><rect x="18.1592%" y="389" width="0.0521%" height="15" fill="rgb(215,41,42)" fg:x="1030098441" fg:w="2955393"/><text x="18.4092%" y="399.50"></text></g><g><title>QUEUE_TEST::particle::calc_pp_accel (2,930,152 samples, 0.05%)</title><rect x="18.2113%" y="437" width="0.0517%" height="15" fill="rgb(224,123,36)" fg:x="1033053834" fg:w="2930152"/><text x="18.4613%" y="447.50"></text></g><g><title>&lt;QUEUE_TEST::vectors::Vector as core::ops::arith::Mul&lt;f64&gt;&gt;::mul (2,930,152 samples, 0.05%)</title><rect x="18.2113%" y="421" width="0.0517%" height="15" fill="rgb(240,125,3)" fg:x="1033053834" fg:w="2930152"/><text x="18.4613%" y="431.50"></text></g><g><title>QUEUE_TEST::collisionhandling::compute_acc (56,798,574 samples, 1.00%)</title><rect x="17.3129%" y="453" width="1.0013%" height="15" fill="rgb(205,98,50)" fg:x="982091186" fg:w="56798574"/><text x="17.5629%" y="463.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (2,905,774 samples, 0.05%)</title><rect x="18.2630%" y="437" width="0.0512%" height="15" fill="rgb(205,185,37)" fg:x="1035983986" fg:w="2905774"/><text x="18.5130%" y="447.50"></text></g><g><title>QUEUE_TEST::collisionhandling::omega_0_from_k (5,993,182 samples, 0.11%)</title><rect x="19.1086%" y="421" width="0.1057%" height="15" fill="rgb(238,207,15)" fg:x="1083954196" fg:w="5993182"/><text x="19.3586%" y="431.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (5,993,182 samples, 0.11%)</title><rect x="19.1086%" y="405" width="0.1057%" height="15" fill="rgb(213,199,42)" fg:x="1083954196" fg:w="5993182"/><text x="19.3586%" y="415.50"></text></g><g><title>QUEUE_TEST::collisionhandling::omega_l (14,843,340 samples, 0.26%)</title><rect x="19.0582%" y="437" width="0.2617%" height="15" fill="rgb(235,201,11)" fg:x="1081092863" fg:w="14843340"/><text x="19.3082%" y="447.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (5,988,825 samples, 0.11%)</title><rect x="19.2143%" y="421" width="0.1056%" height="15" fill="rgb(207,46,11)" fg:x="1089947378" fg:w="5988825"/><text x="19.4643%" y="431.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (11,954,898 samples, 0.21%)</title><rect x="19.3199%" y="437" width="0.2107%" height="15" fill="rgb(241,35,35)" fg:x="1095936203" fg:w="11954898"/><text x="19.5699%" y="447.50"></text></g><g><title>QUEUE_TEST::collisionhandling::process_pair_get_dv (137,499,540 samples, 2.42%)</title><rect x="17.1575%" y="469" width="2.4239%" height="15" fill="rgb(243,32,47)" fg:x="973272926" fg:w="137499540"/><text x="17.4075%" y="479.50">QU..</text></g><g><title>QUEUE_TEST::collisionhandling::get_next_time (71,882,706 samples, 1.27%)</title><rect x="18.3142%" y="453" width="1.2672%" height="15" fill="rgb(247,202,23)" fg:x="1038889760" fg:w="71882706"/><text x="18.5642%" y="463.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (2,881,365 samples, 0.05%)</title><rect x="19.5306%" y="437" width="0.0508%" height="15" fill="rgb(219,102,11)" fg:x="1107891101" fg:w="2881365"/><text x="19.7806%" y="447.50"></text></g><g><title>QUEUE_TEST::particle::Particle::apply_dv (12,095,110 samples, 0.21%)</title><rect x="19.5814%" y="469" width="0.2132%" height="15" fill="rgb(243,110,44)" fg:x="1110772466" fg:w="12095110"/><text x="19.8314%" y="479.50"></text></g><g><title>QUEUE_TEST::collisionhandling::process_collision (170,518,500 samples, 3.01%)</title><rect x="16.8952%" y="485" width="3.0060%" height="15" fill="rgb(222,74,54)" fg:x="958397048" fg:w="170518500"/><text x="17.1452%" y="495.50">QUE..</text></g><g><title>QUEUE_TEST::vectors::Vector::mag (6,047,972 samples, 0.11%)</title><rect x="19.7946%" y="469" width="0.1066%" height="15" fill="rgb(216,99,12)" fg:x="1122867576" fg:w="6047972"/><text x="20.0446%" y="479.50"></text></g><g><title>QUEUE_TEST::vectors::square (2,975,320 samples, 0.05%)</title><rect x="19.8488%" y="453" width="0.0525%" height="15" fill="rgb(226,22,26)" fg:x="1125940228" fg:w="2975320"/><text x="20.0988%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (11,397,467 samples, 0.20%)</title><rect x="20.0016%" y="437" width="0.2009%" height="15" fill="rgb(217,163,10)" fg:x="1134606396" fg:w="11397467"/><text x="20.2516%" y="447.50"></text></g><g><title>entry_SYSCALL_64 (2,782,546 samples, 0.05%)</title><rect x="20.4516%" y="421" width="0.0491%" height="15" fill="rgb(213,25,53)" fg:x="1160138039" fg:w="2782546"/><text x="20.7016%" y="431.50"></text></g><g><title>find_vma (2,850,597 samples, 0.05%)</title><rect x="20.7025%" y="357" width="0.0503%" height="15" fill="rgb(252,105,26)" fg:x="1174369029" fg:w="2850597"/><text x="20.9525%" y="367.50"></text></g><g><title>vmacache_find (2,850,597 samples, 0.05%)</title><rect x="20.7025%" y="341" width="0.0503%" height="15" fill="rgb(220,39,43)" fg:x="1174369029" fg:w="2850597"/><text x="20.9525%" y="351.50"></text></g><g><title>clear_page_erms (22,681,399 samples, 0.40%)</title><rect x="20.8519%" y="261" width="0.3998%" height="15" fill="rgb(229,68,48)" fg:x="1182840340" fg:w="22681399"/><text x="21.1019%" y="271.50"></text></g><g><title>alloc_pages_vma (31,116,845 samples, 0.55%)</title><rect x="20.8031%" y="309" width="0.5485%" height="15" fill="rgb(252,8,32)" fg:x="1180074778" fg:w="31116845"/><text x="21.0531%" y="319.50"></text></g><g><title>__alloc_pages_nodemask (31,116,845 samples, 0.55%)</title><rect x="20.8031%" y="293" width="0.5485%" height="15" fill="rgb(223,20,43)" fg:x="1180074778" fg:w="31116845"/><text x="21.0531%" y="303.50"></text></g><g><title>get_page_from_freelist (31,116,845 samples, 0.55%)</title><rect x="20.8031%" y="277" width="0.5485%" height="15" fill="rgb(229,81,49)" fg:x="1180074778" fg:w="31116845"/><text x="21.0531%" y="287.50"></text></g><g><title>rmqueue (5,669,884 samples, 0.10%)</title><rect x="21.2517%" y="261" width="0.1000%" height="15" fill="rgb(236,28,36)" fg:x="1205521739" fg:w="5669884"/><text x="21.5017%" y="271.50"></text></g><g><title>lru_cache_add_active_or_unevictable (2,842,412 samples, 0.05%)</title><rect x="21.3516%" y="309" width="0.0501%" height="15" fill="rgb(249,185,26)" fg:x="1211191623" fg:w="2842412"/><text x="21.6016%" y="319.50"></text></g><g><title>__lru_cache_add (2,842,412 samples, 0.05%)</title><rect x="21.3516%" y="293" width="0.0501%" height="15" fill="rgb(249,174,33)" fg:x="1211191623" fg:w="2842412"/><text x="21.6016%" y="303.50"></text></g><g><title>pagevec_lru_move_fn (2,842,412 samples, 0.05%)</title><rect x="21.3516%" y="277" width="0.0501%" height="15" fill="rgb(233,201,37)" fg:x="1211191623" fg:w="2842412"/><text x="21.6016%" y="287.50"></text></g><g><title>mem_cgroup_commit_charge (3,130,689 samples, 0.06%)</title><rect x="21.4018%" y="309" width="0.0552%" height="15" fill="rgb(221,78,26)" fg:x="1214034035" fg:w="3130689"/><text x="21.6518%" y="319.50"></text></g><g><title>mem_cgroup_charge_statistics (3,130,689 samples, 0.06%)</title><rect x="21.4018%" y="293" width="0.0552%" height="15" fill="rgb(250,127,30)" fg:x="1214034035" fg:w="3130689"/><text x="21.6518%" y="303.50"></text></g><g><title>__count_memcg_events (3,130,689 samples, 0.06%)</title><rect x="21.4018%" y="277" width="0.0552%" height="15" fill="rgb(230,49,44)" fg:x="1214034035" fg:w="3130689"/><text x="21.6518%" y="287.50"></text></g><g><title>mem_cgroup_try_charge_delay (11,322,398 samples, 0.20%)</title><rect x="21.4569%" y="309" width="0.1996%" height="15" fill="rgb(229,67,23)" fg:x="1217164724" fg:w="11322398"/><text x="21.7069%" y="319.50"></text></g><g><title>mem_cgroup_try_charge (5,664,605 samples, 0.10%)</title><rect x="21.5567%" y="293" width="0.0999%" height="15" fill="rgb(249,83,47)" fg:x="1222822517" fg:w="5664605"/><text x="21.8067%" y="303.50"></text></g><g><title>get_mem_cgroup_from_mm (2,853,831 samples, 0.05%)</title><rect x="21.6062%" y="277" width="0.0503%" height="15" fill="rgb(215,43,3)" fg:x="1225633291" fg:w="2853831"/><text x="21.8562%" y="287.50"></text></g><g><title>page_fault (68,296,851 samples, 1.20%)</title><rect x="20.5007%" y="421" width="1.2040%" height="15" fill="rgb(238,154,13)" fg:x="1162920585" fg:w="68296851"/><text x="20.7507%" y="431.50"></text></g><g><title>do_page_fault (68,296,851 samples, 1.20%)</title><rect x="20.5007%" y="405" width="1.2040%" height="15" fill="rgb(219,56,2)" fg:x="1162920585" fg:w="68296851"/><text x="20.7507%" y="415.50"></text></g><g><title>__do_page_fault (68,296,851 samples, 1.20%)</title><rect x="20.5007%" y="389" width="1.2040%" height="15" fill="rgb(233,0,4)" fg:x="1162920585" fg:w="68296851"/><text x="20.7507%" y="399.50"></text></g><g><title>do_user_addr_fault (65,446,491 samples, 1.15%)</title><rect x="20.5509%" y="373" width="1.1537%" height="15" fill="rgb(235,30,7)" fg:x="1165770945" fg:w="65446491"/><text x="20.8009%" y="383.50"></text></g><g><title>handle_mm_fault (53,997,810 samples, 0.95%)</title><rect x="20.7528%" y="357" width="0.9519%" height="15" fill="rgb(250,79,13)" fg:x="1177219626" fg:w="53997810"/><text x="21.0028%" y="367.50"></text></g><g><title>__handle_mm_fault (51,142,658 samples, 0.90%)</title><rect x="20.8031%" y="341" width="0.9016%" height="15" fill="rgb(211,146,34)" fg:x="1180074778" fg:w="51142658"/><text x="21.0531%" y="351.50"></text></g><g><title>do_anonymous_page (51,142,658 samples, 0.90%)</title><rect x="20.8031%" y="325" width="0.9016%" height="15" fill="rgb(228,22,38)" fg:x="1180074778" fg:w="51142658"/><text x="21.0531%" y="335.50"></text></g><g><title>page_add_new_anon_rmap (2,730,314 samples, 0.05%)</title><rect x="21.6565%" y="309" width="0.0481%" height="15" fill="rgb(235,168,5)" fg:x="1228487122" fg:w="2730314"/><text x="21.9065%" y="319.50"></text></g><g><title>QUEUE_TEST::csvreader::csvcon (125,071,487 samples, 2.20%)</title><rect x="19.9012%" y="485" width="2.2048%" height="15" fill="rgb(221,155,16)" fg:x="1128915548" fg:w="125071487"/><text x="20.1512%" y="495.50">Q..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (125,071,487 samples, 2.20%)</title><rect x="19.9012%" y="469" width="2.2048%" height="15" fill="rgb(215,215,53)" fg:x="1128915548" fg:w="125071487"/><text x="20.1512%" y="479.50">a..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (119,380,639 samples, 2.10%)</title><rect x="20.0016%" y="453" width="2.1045%" height="15" fill="rgb(223,4,10)" fg:x="1134606396" fg:w="119380639"/><text x="20.2516%" y="463.50">a..</text></g><g><title>core::ptr::write (107,983,172 samples, 1.90%)</title><rect x="20.2025%" y="437" width="1.9036%" height="15" fill="rgb(234,103,6)" fg:x="1146003863" fg:w="107983172"/><text x="20.4525%" y="447.50">c..</text></g><g><title>swapgs_restore_regs_and_return_to_usermode (22,769,599 samples, 0.40%)</title><rect x="21.7047%" y="421" width="0.4014%" height="15" fill="rgb(227,97,0)" fg:x="1231217436" fg:w="22769599"/><text x="21.9547%" y="431.50"></text></g><g><title>prepare_exit_to_usermode (11,464,404 samples, 0.20%)</title><rect x="21.9040%" y="405" width="0.2021%" height="15" fill="rgb(234,150,53)" fg:x="1242522631" fg:w="11464404"/><text x="22.1540%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2,868,517 samples, 0.05%)</title><rect x="22.6082%" y="469" width="0.0506%" height="15" fill="rgb(228,201,54)" fg:x="1282470493" fg:w="2868517"/><text x="22.8582%" y="479.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2,868,517 samples, 0.05%)</title><rect x="22.6082%" y="453" width="0.0506%" height="15" fill="rgb(222,22,37)" fg:x="1282470493" fg:w="2868517"/><text x="22.8582%" y="463.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2,868,517 samples, 0.05%)</title><rect x="22.6082%" y="437" width="0.0506%" height="15" fill="rgb(237,53,32)" fg:x="1282470493" fg:w="2868517"/><text x="22.8582%" y="447.50"></text></g><g><title>&lt;QUEUE_TEST::sequentialbucketqueue::Bqueue&lt;&amp;E&gt; as QUEUE_TEST::SeqentialPriorityQueue&lt;E&gt;&gt;::is_empty (2,939,115 samples, 0.05%)</title><rect x="22.8650%" y="453" width="0.0518%" height="15" fill="rgb(233,25,53)" fg:x="1297035867" fg:w="2939115"/><text x="23.1150%" y="463.50"></text></g><g><title>QUEUE_TEST::sequentialbucketqueue::Bqueue&lt;&amp;T&gt;::is_empty (2,939,115 samples, 0.05%)</title><rect x="22.8650%" y="437" width="0.0518%" height="15" fill="rgb(210,40,34)" fg:x="1297035867" fg:w="2939115"/><text x="23.1150%" y="447.50"></text></g><g><title>&lt;QUEUE_TEST::sequentialbucketqueue::Bqueue&lt;&amp;E&gt; as QUEUE_TEST::SeqentialPriorityQueue&lt;E&gt;&gt;::pop (3,143,425 samples, 0.06%)</title><rect x="22.9168%" y="453" width="0.0554%" height="15" fill="rgb(241,220,44)" fg:x="1299974982" fg:w="3143425"/><text x="23.1668%" y="463.50"></text></g><g><title>QUEUE_TEST::sequentialbucketqueue::Bqueue&lt;&amp;T&gt;::pop (3,143,425 samples, 0.06%)</title><rect x="22.9168%" y="437" width="0.0554%" height="15" fill="rgb(235,28,35)" fg:x="1299974982" fg:w="3143425"/><text x="23.1668%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3,143,425 samples, 0.06%)</title><rect x="22.9168%" y="421" width="0.0554%" height="15" fill="rgb(210,56,17)" fg:x="1299974982" fg:w="3143425"/><text x="23.1668%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (3,143,425 samples, 0.06%)</title><rect x="22.9168%" y="405" width="0.0554%" height="15" fill="rgb(224,130,29)" fg:x="1299974982" fg:w="3143425"/><text x="23.1668%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (3,143,425 samples, 0.06%)</title><rect x="22.9168%" y="389" width="0.0554%" height="15" fill="rgb(235,212,8)" fg:x="1299974982" fg:w="3143425"/><text x="23.1668%" y="399.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (2,911,633 samples, 0.05%)</title><rect x="23.0278%" y="405" width="0.0513%" height="15" fill="rgb(223,33,50)" fg:x="1306275343" fg:w="2911633"/><text x="23.2778%" y="415.50"></text></g><g><title>core::ptr::write (2,911,633 samples, 0.05%)</title><rect x="23.0278%" y="389" width="0.0513%" height="15" fill="rgb(219,149,13)" fg:x="1306275343" fg:w="2911633"/><text x="23.2778%" y="399.50"></text></g><g><title>&lt;QUEUE_TEST::sequentialbucketqueue::Bqueue&lt;&amp;E&gt; as QUEUE_TEST::SeqentialPriorityQueue&lt;E&gt;&gt;::push (8,963,168 samples, 0.16%)</title><rect x="22.9722%" y="453" width="0.1580%" height="15" fill="rgb(250,156,29)" fg:x="1303118407" fg:w="8963168"/><text x="23.2222%" y="463.50"></text></g><g><title>QUEUE_TEST::sequentialbucketqueue::Bqueue&lt;&amp;T&gt;::push (8,963,168 samples, 0.16%)</title><rect x="22.9722%" y="437" width="0.1580%" height="15" fill="rgb(216,193,19)" fg:x="1303118407" fg:w="8963168"/><text x="23.2222%" y="447.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (5,806,232 samples, 0.10%)</title><rect x="23.0278%" y="421" width="0.1024%" height="15" fill="rgb(216,135,14)" fg:x="1306275343" fg:w="5806232"/><text x="23.2778%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (2,894,599 samples, 0.05%)</title><rect x="23.0792%" y="405" width="0.0510%" height="15" fill="rgb(241,47,5)" fg:x="1309186976" fg:w="2894599"/><text x="23.3292%" y="415.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (2,894,599 samples, 0.05%)</title><rect x="23.0792%" y="389" width="0.0510%" height="15" fill="rgb(233,42,35)" fg:x="1309186976" fg:w="2894599"/><text x="23.3292%" y="399.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (2,894,599 samples, 0.05%)</title><rect x="23.0792%" y="373" width="0.0510%" height="15" fill="rgb(231,13,6)" fg:x="1309186976" fg:w="2894599"/><text x="23.3292%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3,126,744 samples, 0.06%)</title><rect x="23.1302%" y="453" width="0.0551%" height="15" fill="rgb(207,181,40)" fg:x="1312081575" fg:w="3126744"/><text x="23.3802%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3,126,744 samples, 0.06%)</title><rect x="23.1302%" y="437" width="0.0551%" height="15" fill="rgb(254,173,49)" fg:x="1312081575" fg:w="3126744"/><text x="23.3802%" y="447.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,126,744 samples, 0.06%)</title><rect x="23.1302%" y="421" width="0.0551%" height="15" fill="rgb(221,1,38)" fg:x="1312081575" fg:w="3126744"/><text x="23.3802%" y="431.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3,126,744 samples, 0.06%)</title><rect x="23.1302%" y="405" width="0.0551%" height="15" fill="rgb(206,124,46)" fg:x="1312081575" fg:w="3126744"/><text x="23.3802%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3,126,744 samples, 0.06%)</title><rect x="23.1302%" y="389" width="0.0551%" height="15" fill="rgb(249,21,11)" fg:x="1312081575" fg:w="3126744"/><text x="23.3802%" y="399.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (3,126,744 samples, 0.06%)</title><rect x="23.1302%" y="373" width="0.0551%" height="15" fill="rgb(222,201,40)" fg:x="1312081575" fg:w="3126744"/><text x="23.3802%" y="383.50"></text></g><g><title>core::slice::index::get_noubcheck (3,126,744 samples, 0.06%)</title><rect x="23.1302%" y="357" width="0.0551%" height="15" fill="rgb(235,61,29)" fg:x="1312081575" fg:w="3126744"/><text x="23.3802%" y="367.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (5,763,657 samples, 0.10%)</title><rect x="23.1853%" y="421" width="0.1016%" height="15" fill="rgb(219,207,3)" fg:x="1315208319" fg:w="5763657"/><text x="23.4353%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (21,278,839 samples, 0.38%)</title><rect x="23.1853%" y="437" width="0.3751%" height="15" fill="rgb(222,56,46)" fg:x="1315208319" fg:w="21278839"/><text x="23.4353%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (15,515,182 samples, 0.27%)</title><rect x="23.2869%" y="421" width="0.2735%" height="15" fill="rgb(239,76,54)" fg:x="1320971976" fg:w="15515182"/><text x="23.5369%" y="431.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (15,515,182 samples, 0.27%)</title><rect x="23.2869%" y="405" width="0.2735%" height="15" fill="rgb(231,124,27)" fg:x="1320971976" fg:w="15515182"/><text x="23.5369%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (878,474,254 samples, 15.49%)</title><rect x="23.1853%" y="453" width="15.4863%" height="15" fill="rgb(249,195,6)" fg:x="1315208319" fg:w="878474254"/><text x="23.4353%" y="463.50">&lt;core::slice::iter::Iter..</text></g><g><title>QUEUE_TEST::time_seqential::{{closure}} (857,195,415 samples, 15.11%)</title><rect x="23.5604%" y="437" width="15.1112%" height="15" fill="rgb(237,174,47)" fg:x="1336487158" fg:w="857195415"/><text x="23.8104%" y="447.50">QUEUE_TEST::time_seqent..</text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (857,195,415 samples, 15.11%)</title><rect x="23.5604%" y="421" width="15.1112%" height="15" fill="rgb(206,201,31)" fg:x="1336487158" fg:w="857195415"/><text x="23.8104%" y="431.50">core::tuple::&lt;impl core..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (3,062,477 samples, 0.05%)</title><rect x="38.6176%" y="405" width="0.0540%" height="15" fill="rgb(231,57,52)" fg:x="2190620096" fg:w="3062477"/><text x="38.8676%" y="415.50"></text></g><g><title>QUEUE_TEST::csvreader::Rec::p1 (6,134,022 samples, 0.11%)</title><rect x="38.6716%" y="453" width="0.1081%" height="15" fill="rgb(248,177,22)" fg:x="2193682573" fg:w="6134022"/><text x="38.9216%" y="463.50"></text></g><g><title>QUEUE_TEST::particle::Particle::new (3,015,167 samples, 0.05%)</title><rect x="38.7266%" y="437" width="0.0532%" height="15" fill="rgb(215,211,37)" fg:x="2196801428" fg:w="3015167"/><text x="38.9766%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (6,088,784 samples, 0.11%)</title><rect x="38.9919%" y="357" width="0.1073%" height="15" fill="rgb(241,128,51)" fg:x="2211851001" fg:w="6088784"/><text x="39.2419%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (6,088,784 samples, 0.11%)</title><rect x="38.9919%" y="341" width="0.1073%" height="15" fill="rgb(227,165,31)" fg:x="2211851001" fg:w="6088784"/><text x="39.2419%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (6,088,784 samples, 0.11%)</title><rect x="38.9919%" y="325" width="0.1073%" height="15" fill="rgb(228,167,24)" fg:x="2211851001" fg:w="6088784"/><text x="39.2419%" y="335.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::ops::arith::Div&lt;T&gt;&gt;::div (5,941,263 samples, 0.10%)</title><rect x="39.0992%" y="357" width="0.1047%" height="15" fill="rgb(228,143,12)" fg:x="2217939785" fg:w="5941263"/><text x="39.3492%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (5,941,263 samples, 0.10%)</title><rect x="39.0992%" y="341" width="0.1047%" height="15" fill="rgb(249,149,8)" fg:x="2217939785" fg:w="5941263"/><text x="39.3492%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_full (6,078,266 samples, 0.11%)</title><rect x="39.2040%" y="341" width="0.1072%" height="15" fill="rgb(243,35,44)" fg:x="2223881048" fg:w="6078266"/><text x="39.4540%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::capacity (3,000,019 samples, 0.05%)</title><rect x="39.2582%" y="325" width="0.0529%" height="15" fill="rgb(246,89,9)" fg:x="2226959295" fg:w="3000019"/><text x="39.5082%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (3,000,019 samples, 0.05%)</title><rect x="39.2582%" y="309" width="0.0529%" height="15" fill="rgb(233,213,13)" fg:x="2226959295" fg:w="3000019"/><text x="39.5082%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (2,899,709 samples, 0.05%)</title><rect x="39.3111%" y="309" width="0.0511%" height="15" fill="rgb(233,141,41)" fg:x="2229959314" fg:w="2899709"/><text x="39.5611%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (36,012,124 samples, 0.63%)</title><rect x="38.7798%" y="453" width="0.6348%" height="15" fill="rgb(239,167,4)" fg:x="2199816595" fg:w="36012124"/><text x="39.0298%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (36,012,124 samples, 0.63%)</title><rect x="38.7798%" y="437" width="0.6348%" height="15" fill="rgb(209,217,16)" fg:x="2199816595" fg:w="36012124"/><text x="39.0298%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (36,012,124 samples, 0.63%)</title><rect x="38.7798%" y="421" width="0.6348%" height="15" fill="rgb(219,88,35)" fg:x="2199816595" fg:w="36012124"/><text x="39.0298%" y="431.50"></text></g><g><title>QUEUE_TEST::time_seqential::{{closure}} (36,012,124 samples, 0.63%)</title><rect x="38.7798%" y="405" width="0.6348%" height="15" fill="rgb(220,193,23)" fg:x="2199816595" fg:w="36012124"/><text x="39.0298%" y="415.50"></text></g><g><title>&lt;QUEUE_TEST::sequentialbucketqueue::Bqueue&lt;&amp;E&gt; as QUEUE_TEST::SeqentialPriorityQueue&lt;E&gt;&gt;::push (36,012,124 samples, 0.63%)</title><rect x="38.7798%" y="389" width="0.6348%" height="15" fill="rgb(230,90,52)" fg:x="2199816595" fg:w="36012124"/><text x="39.0298%" y="399.50"></text></g><g><title>QUEUE_TEST::sequentialbucketqueue::Bqueue&lt;&amp;T&gt;::push (36,012,124 samples, 0.63%)</title><rect x="38.7798%" y="373" width="0.6348%" height="15" fill="rgb(252,106,19)" fg:x="2199816595" fg:w="36012124"/><text x="39.0298%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (11,947,671 samples, 0.21%)</title><rect x="39.2040%" y="357" width="0.2106%" height="15" fill="rgb(206,74,20)" fg:x="2223881048" fg:w="11947671"/><text x="39.4540%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (5,869,405 samples, 0.10%)</title><rect x="39.3111%" y="341" width="0.1035%" height="15" fill="rgb(230,138,44)" fg:x="2229959314" fg:w="5869405"/><text x="39.5611%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (5,869,405 samples, 0.10%)</title><rect x="39.3111%" y="325" width="0.1035%" height="15" fill="rgb(235,182,43)" fg:x="2229959314" fg:w="5869405"/><text x="39.5611%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (2,969,696 samples, 0.05%)</title><rect x="39.3622%" y="309" width="0.0524%" height="15" fill="rgb(242,16,51)" fg:x="2232859023" fg:w="2969696"/><text x="39.6122%" y="319.50"></text></g><g><title>apic_timer_interrupt (2,969,696 samples, 0.05%)</title><rect x="39.3622%" y="293" width="0.0524%" height="15" fill="rgb(248,9,4)" fg:x="2232859023" fg:w="2969696"/><text x="39.6122%" y="303.50"></text></g><g><title>smp_apic_timer_interrupt (2,969,696 samples, 0.05%)</title><rect x="39.3622%" y="277" width="0.0524%" height="15" fill="rgb(210,31,22)" fg:x="2232859023" fg:w="2969696"/><text x="39.6122%" y="287.50"></text></g><g><title>hrtimer_interrupt (2,969,696 samples, 0.05%)</title><rect x="39.3622%" y="261" width="0.0524%" height="15" fill="rgb(239,54,39)" fg:x="2232859023" fg:w="2969696"/><text x="39.6122%" y="271.50"></text></g><g><title>__hrtimer_run_queues (2,969,696 samples, 0.05%)</title><rect x="39.3622%" y="245" width="0.0524%" height="15" fill="rgb(230,99,41)" fg:x="2232859023" fg:w="2969696"/><text x="39.6122%" y="255.50"></text></g><g><title>enqueue_hrtimer (2,969,696 samples, 0.05%)</title><rect x="39.3622%" y="229" width="0.0524%" height="15" fill="rgb(253,106,12)" fg:x="2232859023" fg:w="2969696"/><text x="39.6122%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6,273,348 samples, 0.11%)</title><rect x="39.4678%" y="309" width="0.1106%" height="15" fill="rgb(213,46,41)" fg:x="2238848215" fg:w="6273348"/><text x="39.7178%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3,096,535 samples, 0.05%)</title><rect x="39.5238%" y="293" width="0.0546%" height="15" fill="rgb(215,133,35)" fg:x="2242025028" fg:w="3096535"/><text x="39.7738%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (20,977,365 samples, 0.37%)</title><rect x="39.4146%" y="357" width="0.3698%" height="15" fill="rgb(213,28,5)" fg:x="2235828719" fg:w="20977365"/><text x="39.6646%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (20,977,365 samples, 0.37%)</title><rect x="39.4146%" y="341" width="0.3698%" height="15" fill="rgb(215,77,49)" fg:x="2235828719" fg:w="20977365"/><text x="39.6646%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (20,977,365 samples, 0.37%)</title><rect x="39.4146%" y="325" width="0.3698%" height="15" fill="rgb(248,100,22)" fg:x="2235828719" fg:w="20977365"/><text x="39.6646%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (11,684,521 samples, 0.21%)</title><rect x="39.5784%" y="309" width="0.2060%" height="15" fill="rgb(208,67,9)" fg:x="2245121563" fg:w="11684521"/><text x="39.8284%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (8,856,159 samples, 0.16%)</title><rect x="39.6283%" y="293" width="0.1561%" height="15" fill="rgb(219,133,21)" fg:x="2247949925" fg:w="8856159"/><text x="39.8783%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (35,649,514 samples, 0.63%)</title><rect x="39.4146%" y="389" width="0.6285%" height="15" fill="rgb(246,46,29)" fg:x="2235828719" fg:w="35649514"/><text x="39.6646%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (35,649,514 samples, 0.63%)</title><rect x="39.4146%" y="373" width="0.6285%" height="15" fill="rgb(246,185,52)" fg:x="2235828719" fg:w="35649514"/><text x="39.6646%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (14,672,149 samples, 0.26%)</title><rect x="39.7844%" y="357" width="0.2586%" height="15" fill="rgb(252,136,11)" fg:x="2256806084" fg:w="14672149"/><text x="40.0344%" y="367.50"></text></g><g><title>QUEUE_TEST::time_seqential (989,108,775 samples, 17.44%)</title><rect x="22.6588%" y="469" width="17.4366%" height="15" fill="rgb(219,138,53)" fg:x="1285339010" fg:w="989108775"/><text x="22.9088%" y="479.50">QUEUE_TEST::time_seqential</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (38,619,066 samples, 0.68%)</title><rect x="39.4146%" y="453" width="0.6808%" height="15" fill="rgb(211,51,23)" fg:x="2235828719" fg:w="38619066"/><text x="39.6646%" y="463.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (38,619,066 samples, 0.68%)</title><rect x="39.4146%" y="437" width="0.6808%" height="15" fill="rgb(247,221,28)" fg:x="2235828719" fg:w="38619066"/><text x="39.6646%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (38,619,066 samples, 0.68%)</title><rect x="39.4146%" y="421" width="0.6808%" height="15" fill="rgb(251,222,45)" fg:x="2235828719" fg:w="38619066"/><text x="39.6646%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (38,619,066 samples, 0.68%)</title><rect x="39.4146%" y="405" width="0.6808%" height="15" fill="rgb(217,162,53)" fg:x="2235828719" fg:w="38619066"/><text x="39.6646%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2,969,552 samples, 0.05%)</title><rect x="40.0430%" y="389" width="0.0523%" height="15" fill="rgb(229,93,14)" fg:x="2271478233" fg:w="2969552"/><text x="40.2930%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2,969,552 samples, 0.05%)</title><rect x="40.0430%" y="373" width="0.0523%" height="15" fill="rgb(209,67,49)" fg:x="2271478233" fg:w="2969552"/><text x="40.2930%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2,969,552 samples, 0.05%)</title><rect x="40.0430%" y="357" width="0.0523%" height="15" fill="rgb(213,87,29)" fg:x="2271478233" fg:w="2969552"/><text x="40.2930%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2,865,816 samples, 0.05%)</title><rect x="40.0954%" y="437" width="0.0505%" height="15" fill="rgb(205,151,52)" fg:x="2274447785" fg:w="2865816"/><text x="40.3454%" y="447.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (17,225,705 samples, 0.30%)</title><rect x="40.0954%" y="469" width="0.3037%" height="15" fill="rgb(253,215,39)" fg:x="2274447785" fg:w="17225705"/><text x="40.3454%" y="479.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (17,225,705 samples, 0.30%)</title><rect x="40.0954%" y="453" width="0.3037%" height="15" fill="rgb(221,220,41)" fg:x="2274447785" fg:w="17225705"/><text x="40.3454%" y="463.50"></text></g><g><title>core::ptr::read (14,359,889 samples, 0.25%)</title><rect x="40.1459%" y="437" width="0.2531%" height="15" fill="rgb(218,133,21)" fg:x="2277313601" fg:w="14359889"/><text x="40.3959%" y="447.50"></text></g><g><title>error_entry (5,712,846 samples, 0.10%)</title><rect x="40.9510%" y="437" width="0.1007%" height="15" fill="rgb(221,193,43)" fg:x="2322980324" fg:w="5712846"/><text x="41.2010%" y="447.50"></text></g><g><title>error_exit (2,855,505 samples, 0.05%)</title><rect x="41.0517%" y="437" width="0.0503%" height="15" fill="rgb(240,128,52)" fg:x="2328693170" fg:w="2855505"/><text x="41.3017%" y="447.50"></text></g><g><title>__lru_cache_add (2,883,379 samples, 0.05%)</title><rect x="41.4545%" y="325" width="0.0508%" height="15" fill="rgb(253,114,12)" fg:x="2351546162" fg:w="2883379"/><text x="41.7045%" y="335.50"></text></g><g><title>__mod_node_page_state (2,809,924 samples, 0.05%)</title><rect x="41.5054%" y="325" width="0.0495%" height="15" fill="rgb(215,223,47)" fg:x="2354429541" fg:w="2809924"/><text x="41.7554%" y="335.50"></text></g><g><title>clear_page_erms (28,295,298 samples, 0.50%)</title><rect x="41.7059%" y="277" width="0.4988%" height="15" fill="rgb(248,225,23)" fg:x="2365804632" fg:w="28295298"/><text x="41.9559%" y="287.50"></text></g><g><title>alloc_pages_vma (42,612,150 samples, 0.75%)</title><rect x="41.5549%" y="325" width="0.7512%" height="15" fill="rgb(250,108,0)" fg:x="2357239465" fg:w="42612150"/><text x="41.8049%" y="335.50"></text></g><g><title>__alloc_pages_nodemask (42,612,150 samples, 0.75%)</title><rect x="41.5549%" y="309" width="0.7512%" height="15" fill="rgb(228,208,7)" fg:x="2357239465" fg:w="42612150"/><text x="41.8049%" y="319.50"></text></g><g><title>get_page_from_freelist (36,908,070 samples, 0.65%)</title><rect x="41.6555%" y="293" width="0.6506%" height="15" fill="rgb(244,45,10)" fg:x="2362943545" fg:w="36908070"/><text x="41.9055%" y="303.50"></text></g><g><title>rmqueue (5,751,685 samples, 0.10%)</title><rect x="42.2047%" y="277" width="0.1014%" height="15" fill="rgb(207,125,25)" fg:x="2394099930" fg:w="5751685"/><text x="42.4547%" y="287.50"></text></g><g><title>__x86_indirect_thunk_rax (2,866,286 samples, 0.05%)</title><rect x="42.3061%" y="293" width="0.0505%" height="15" fill="rgb(210,195,18)" fg:x="2399851615" fg:w="2866286"/><text x="42.5561%" y="303.50"></text></g><g><title>lru_cache_add_active_or_unevictable (5,713,979 samples, 0.10%)</title><rect x="42.3061%" y="325" width="0.1007%" height="15" fill="rgb(249,80,12)" fg:x="2399851615" fg:w="5713979"/><text x="42.5561%" y="335.50"></text></g><g><title>__lru_cache_add (5,713,979 samples, 0.10%)</title><rect x="42.3061%" y="309" width="0.1007%" height="15" fill="rgb(221,65,9)" fg:x="2399851615" fg:w="5713979"/><text x="42.5561%" y="319.50"></text></g><g><title>pagevec_lru_move_fn (2,847,693 samples, 0.05%)</title><rect x="42.3566%" y="293" width="0.0502%" height="15" fill="rgb(235,49,36)" fg:x="2402717901" fg:w="2847693"/><text x="42.6066%" y="303.50"></text></g><g><title>__pagevec_lru_add_fn (2,847,693 samples, 0.05%)</title><rect x="42.3566%" y="277" width="0.0502%" height="15" fill="rgb(225,32,20)" fg:x="2402717901" fg:w="2847693"/><text x="42.6066%" y="287.50"></text></g><g><title>__mod_lruvec_state (2,847,693 samples, 0.05%)</title><rect x="42.3566%" y="261" width="0.0502%" height="15" fill="rgb(215,141,46)" fg:x="2402717901" fg:w="2847693"/><text x="42.6066%" y="271.50"></text></g><g><title>__mod_node_page_state (2,847,693 samples, 0.05%)</title><rect x="42.3566%" y="245" width="0.0502%" height="15" fill="rgb(250,160,47)" fg:x="2402717901" fg:w="2847693"/><text x="42.6066%" y="255.50"></text></g><g><title>mem_cgroup_throttle_swaprate (2,752,263 samples, 0.05%)</title><rect x="42.4068%" y="325" width="0.0485%" height="15" fill="rgb(216,222,40)" fg:x="2405565594" fg:w="2752263"/><text x="42.6568%" y="335.50"></text></g><g><title>handle_mm_fault (76,770,300 samples, 1.35%)</title><rect x="41.2025%" y="373" width="1.3534%" height="15" fill="rgb(234,217,39)" fg:x="2337251888" fg:w="76770300"/><text x="41.4525%" y="383.50"></text></g><g><title>__handle_mm_fault (73,903,671 samples, 1.30%)</title><rect x="41.2531%" y="357" width="1.3028%" height="15" fill="rgb(207,178,40)" fg:x="2340118517" fg:w="73903671"/><text x="41.5031%" y="367.50"></text></g><g><title>do_anonymous_page (65,328,238 samples, 1.15%)</title><rect x="41.4043%" y="341" width="1.1516%" height="15" fill="rgb(221,136,13)" fg:x="2348693950" fg:w="65328238"/><text x="41.6543%" y="351.50"></text></g><g><title>mem_cgroup_try_charge_delay (5,704,331 samples, 0.10%)</title><rect x="42.4553%" y="325" width="0.1006%" height="15" fill="rgb(249,199,10)" fg:x="2408317857" fg:w="5704331"/><text x="42.7053%" y="335.50"></text></g><g><title>mem_cgroup_try_charge (5,704,331 samples, 0.10%)</title><rect x="42.4553%" y="309" width="0.1006%" height="15" fill="rgb(249,222,13)" fg:x="2408317857" fg:w="5704331"/><text x="42.7053%" y="319.50"></text></g><g><title>try_charge (5,704,331 samples, 0.10%)</title><rect x="42.4553%" y="293" width="0.1006%" height="15" fill="rgb(244,185,38)" fg:x="2408317857" fg:w="5704331"/><text x="42.7053%" y="303.50"></text></g><g><title>page_fault (85,333,057 samples, 1.50%)</title><rect x="41.1020%" y="437" width="1.5043%" height="15" fill="rgb(236,202,9)" fg:x="2331548675" fg:w="85333057"/><text x="41.3520%" y="447.50"></text></g><g><title>do_page_fault (85,333,057 samples, 1.50%)</title><rect x="41.1020%" y="421" width="1.5043%" height="15" fill="rgb(250,229,37)" fg:x="2331548675" fg:w="85333057"/><text x="41.3520%" y="431.50"></text></g><g><title>__do_page_fault (85,333,057 samples, 1.50%)</title><rect x="41.1020%" y="405" width="1.5043%" height="15" fill="rgb(206,174,23)" fg:x="2331548675" fg:w="85333057"/><text x="41.3520%" y="415.50"></text></g><g><title>do_user_addr_fault (82,436,157 samples, 1.45%)</title><rect x="41.1531%" y="389" width="1.4532%" height="15" fill="rgb(211,33,43)" fg:x="2334445575" fg:w="82436157"/><text x="41.4031%" y="399.50"></text></g><g><title>vmacache_find (2,859,544 samples, 0.05%)</title><rect x="42.5559%" y="373" width="0.0504%" height="15" fill="rgb(245,58,50)" fg:x="2414022188" fg:w="2859544"/><text x="42.8059%" y="383.50"></text></g><g><title>QUEUE_TEST::main (1,182,928,837 samples, 20.85%)</title><rect x="22.1061%" y="485" width="20.8534%" height="15" fill="rgb(244,68,36)" fg:x="1253987035" fg:w="1182928837"/><text x="22.3561%" y="495.50">QUEUE_TEST::main</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (145,242,382 samples, 2.56%)</title><rect x="40.3991%" y="469" width="2.5604%" height="15" fill="rgb(232,229,15)" fg:x="2291673490" fg:w="145242382"/><text x="40.6491%" y="479.50">al..</text></g><g><title>core::ptr::write (142,376,311 samples, 2.51%)</title><rect x="40.4496%" y="453" width="2.5099%" height="15" fill="rgb(254,30,23)" fg:x="2294539561" fg:w="142376311"/><text x="40.6996%" y="463.50">co..</text></g><g><title>swapgs_restore_regs_and_return_to_usermode (20,034,140 samples, 0.35%)</title><rect x="42.6063%" y="437" width="0.3532%" height="15" fill="rgb(235,160,14)" fg:x="2416881732" fg:w="20034140"/><text x="42.8563%" y="447.50"></text></g><g><title>prepare_exit_to_usermode (14,302,012 samples, 0.25%)</title><rect x="42.7074%" y="421" width="0.2521%" height="15" fill="rgb(212,155,44)" fg:x="2422613860" fg:w="14302012"/><text x="42.9574%" y="431.50"></text></g><g><title>[unknown] (11,233,864 samples, 0.20%)</title><rect x="42.9595%" y="485" width="0.1980%" height="15" fill="rgb(226,2,50)" fg:x="2436915872" fg:w="11233864"/><text x="43.2095%" y="495.50"></text></g><g><title>__libc_read (11,233,864 samples, 0.20%)</title><rect x="42.9595%" y="469" width="0.1980%" height="15" fill="rgb(234,177,6)" fg:x="2436915872" fg:w="11233864"/><text x="43.2095%" y="479.50"></text></g><g><title>error_entry (8,408,453 samples, 0.15%)</title><rect x="43.0093%" y="453" width="0.1482%" height="15" fill="rgb(217,24,9)" fg:x="2439741283" fg:w="8408453"/><text x="43.2593%" y="463.50"></text></g><g><title>_start (1,080,690 samples, 0.02%)</title><rect x="43.1575%" y="485" width="0.0191%" height="15" fill="rgb(220,13,46)" fg:x="2448149736" fg:w="1080690"/><text x="43.4075%" y="495.50"></text></g><g><title>_dl_start (1,080,690 samples, 0.02%)</title><rect x="43.1575%" y="469" width="0.0191%" height="15" fill="rgb(239,221,27)" fg:x="2448149736" fg:w="1080690"/><text x="43.4075%" y="479.50"></text></g><g><title>_dl_sysdep_start (1,080,690 samples, 0.02%)</title><rect x="43.1575%" y="453" width="0.0191%" height="15" fill="rgb(222,198,25)" fg:x="2448149736" fg:w="1080690"/><text x="43.4075%" y="463.50"></text></g><g><title>dl_main (1,080,690 samples, 0.02%)</title><rect x="43.1575%" y="437" width="0.0191%" height="15" fill="rgb(211,99,13)" fg:x="2448149736" fg:w="1080690"/><text x="43.4075%" y="447.50"></text></g><g><title>_dl_map_object_deps (1,080,690 samples, 0.02%)</title><rect x="43.1575%" y="421" width="0.0191%" height="15" fill="rgb(232,111,31)" fg:x="2448149736" fg:w="1080690"/><text x="43.4075%" y="431.50"></text></g><g><title>_dl_catch_exception (1,080,690 samples, 0.02%)</title><rect x="43.1575%" y="405" width="0.0191%" height="15" fill="rgb(245,82,37)" fg:x="2448149736" fg:w="1080690"/><text x="43.4075%" y="415.50"></text></g><g><title>openaux (1,080,690 samples, 0.02%)</title><rect x="43.1575%" y="389" width="0.0191%" height="15" fill="rgb(227,149,46)" fg:x="2448149736" fg:w="1080690"/><text x="43.4075%" y="399.50"></text></g><g><title>_dl_map_object (1,080,690 samples, 0.02%)</title><rect x="43.1575%" y="373" width="0.0191%" height="15" fill="rgb(218,36,50)" fg:x="2448149736" fg:w="1080690"/><text x="43.4075%" y="383.50"></text></g><g><title>_dl_load_cache_lookup (1,080,690 samples, 0.02%)</title><rect x="43.1575%" y="357" width="0.0191%" height="15" fill="rgb(226,80,48)" fg:x="2448149736" fg:w="1080690"/><text x="43.4075%" y="367.50"></text></g><g><title>_dl_sysdep_read_whole_file (1,080,690 samples, 0.02%)</title><rect x="43.1575%" y="341" width="0.0191%" height="15" fill="rgb(238,224,15)" fg:x="2448149736" fg:w="1080690"/><text x="43.4075%" y="351.50"></text></g><g><title>error_entry (1,439,343 samples, 0.03%)</title><rect x="43.2311%" y="373" width="0.0254%" height="15" fill="rgb(241,136,10)" fg:x="2452325873" fg:w="1439343"/><text x="43.4811%" y="383.50"></text></g><g><title>alloc_pages_vma (8,559,041 samples, 0.15%)</title><rect x="43.2565%" y="261" width="0.1509%" height="15" fill="rgb(208,32,45)" fg:x="2453765216" fg:w="8559041"/><text x="43.5065%" y="271.50"></text></g><g><title>__alloc_pages_nodemask (8,559,041 samples, 0.15%)</title><rect x="43.2565%" y="245" width="0.1509%" height="15" fill="rgb(207,135,9)" fg:x="2453765216" fg:w="8559041"/><text x="43.5065%" y="255.50"></text></g><g><title>get_page_from_freelist (8,559,041 samples, 0.15%)</title><rect x="43.2565%" y="229" width="0.1509%" height="15" fill="rgb(206,86,44)" fg:x="2453765216" fg:w="8559041"/><text x="43.5065%" y="239.50"></text></g><g><title>clear_page_erms (8,559,041 samples, 0.15%)</title><rect x="43.2565%" y="213" width="0.1509%" height="15" fill="rgb(245,177,15)" fg:x="2453765216" fg:w="8559041"/><text x="43.5065%" y="223.50"></text></g><g><title>page_fault (11,411,804 samples, 0.20%)</title><rect x="43.2565%" y="373" width="0.2012%" height="15" fill="rgb(206,64,50)" fg:x="2453765216" fg:w="11411804"/><text x="43.5065%" y="383.50"></text></g><g><title>do_page_fault (11,411,804 samples, 0.20%)</title><rect x="43.2565%" y="357" width="0.2012%" height="15" fill="rgb(234,36,40)" fg:x="2453765216" fg:w="11411804"/><text x="43.5065%" y="367.50"></text></g><g><title>__do_page_fault (11,411,804 samples, 0.20%)</title><rect x="43.2565%" y="341" width="0.2012%" height="15" fill="rgb(213,64,8)" fg:x="2453765216" fg:w="11411804"/><text x="43.5065%" y="351.50"></text></g><g><title>do_user_addr_fault (11,411,804 samples, 0.20%)</title><rect x="43.2565%" y="325" width="0.2012%" height="15" fill="rgb(210,75,36)" fg:x="2453765216" fg:w="11411804"/><text x="43.5065%" y="335.50"></text></g><g><title>handle_mm_fault (11,411,804 samples, 0.20%)</title><rect x="43.2565%" y="309" width="0.2012%" height="15" fill="rgb(229,88,21)" fg:x="2453765216" fg:w="11411804"/><text x="43.5065%" y="319.50"></text></g><g><title>__handle_mm_fault (11,411,804 samples, 0.20%)</title><rect x="43.2565%" y="293" width="0.2012%" height="15" fill="rgb(252,204,47)" fg:x="2453765216" fg:w="11411804"/><text x="43.5065%" y="303.50"></text></g><g><title>do_anonymous_page (11,411,804 samples, 0.20%)</title><rect x="43.2565%" y="277" width="0.2012%" height="15" fill="rgb(208,77,27)" fg:x="2453765216" fg:w="11411804"/><text x="43.5065%" y="287.50"></text></g><g><title>lru_cache_add_active_or_unevictable (2,852,763 samples, 0.05%)</title><rect x="43.4074%" y="261" width="0.0503%" height="15" fill="rgb(221,76,26)" fg:x="2462324257" fg:w="2852763"/><text x="43.6574%" y="271.50"></text></g><g><title>__lru_cache_add (2,852,763 samples, 0.05%)</title><rect x="43.4074%" y="245" width="0.0503%" height="15" fill="rgb(225,139,18)" fg:x="2462324257" fg:w="2852763"/><text x="43.6574%" y="255.50"></text></g><g><title>pagevec_lru_move_fn (2,852,763 samples, 0.05%)</title><rect x="43.4074%" y="229" width="0.0503%" height="15" fill="rgb(230,137,11)" fg:x="2462324257" fg:w="2852763"/><text x="43.6574%" y="239.50"></text></g><g><title>__pagevec_lru_add_fn (2,852,763 samples, 0.05%)</title><rect x="43.4074%" y="213" width="0.0503%" height="15" fill="rgb(212,28,1)" fg:x="2462324257" fg:w="2852763"/><text x="43.6574%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (15,719,707 samples, 0.28%)</title><rect x="43.2311%" y="389" width="0.2771%" height="15" fill="rgb(248,164,17)" fg:x="2452325873" fg:w="15719707"/><text x="43.4811%" y="399.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (2,868,560 samples, 0.05%)</title><rect x="43.4577%" y="373" width="0.0506%" height="15" fill="rgb(222,171,42)" fg:x="2465177020" fg:w="2868560"/><text x="43.7077%" y="383.50"></text></g><g><title>prepare_exit_to_usermode (2,868,560 samples, 0.05%)</title><rect x="43.4577%" y="357" width="0.0506%" height="15" fill="rgb(243,84,45)" fg:x="2465177020" fg:w="2868560"/><text x="43.7077%" y="367.50"></text></g><g><title>__alloc_pages_nodemask (3,020,906 samples, 0.05%)</title><rect x="43.5083%" y="245" width="0.0533%" height="15" fill="rgb(252,49,23)" fg:x="2468045580" fg:w="3020906"/><text x="43.7583%" y="255.50"></text></g><g><title>get_page_from_freelist (3,020,906 samples, 0.05%)</title><rect x="43.5083%" y="229" width="0.0533%" height="15" fill="rgb(215,19,7)" fg:x="2468045580" fg:w="3020906"/><text x="43.7583%" y="239.50"></text></g><g><title>clear_page_erms (3,020,906 samples, 0.05%)</title><rect x="43.5083%" y="213" width="0.0533%" height="15" fill="rgb(238,81,41)" fg:x="2468045580" fg:w="3020906"/><text x="43.7583%" y="223.50"></text></g><g><title>_int_realloc (21,739,144 samples, 0.38%)</title><rect x="43.2311%" y="405" width="0.3832%" height="15" fill="rgb(210,199,37)" fg:x="2452325873" fg:w="21739144"/><text x="43.4811%" y="415.50"></text></g><g><title>_int_malloc (6,019,437 samples, 0.11%)</title><rect x="43.5083%" y="389" width="0.1061%" height="15" fill="rgb(244,192,49)" fg:x="2468045580" fg:w="6019437"/><text x="43.7583%" y="399.50"></text></g><g><title>page_fault (6,019,437 samples, 0.11%)</title><rect x="43.5083%" y="373" width="0.1061%" height="15" fill="rgb(226,211,11)" fg:x="2468045580" fg:w="6019437"/><text x="43.7583%" y="383.50"></text></g><g><title>do_page_fault (6,019,437 samples, 0.11%)</title><rect x="43.5083%" y="357" width="0.1061%" height="15" fill="rgb(236,162,54)" fg:x="2468045580" fg:w="6019437"/><text x="43.7583%" y="367.50"></text></g><g><title>__do_page_fault (6,019,437 samples, 0.11%)</title><rect x="43.5083%" y="341" width="0.1061%" height="15" fill="rgb(220,229,9)" fg:x="2468045580" fg:w="6019437"/><text x="43.7583%" y="351.50"></text></g><g><title>do_user_addr_fault (6,019,437 samples, 0.11%)</title><rect x="43.5083%" y="325" width="0.1061%" height="15" fill="rgb(250,87,22)" fg:x="2468045580" fg:w="6019437"/><text x="43.7583%" y="335.50"></text></g><g><title>handle_mm_fault (6,019,437 samples, 0.11%)</title><rect x="43.5083%" y="309" width="0.1061%" height="15" fill="rgb(239,43,17)" fg:x="2468045580" fg:w="6019437"/><text x="43.7583%" y="319.50"></text></g><g><title>__handle_mm_fault (6,019,437 samples, 0.11%)</title><rect x="43.5083%" y="293" width="0.1061%" height="15" fill="rgb(231,177,25)" fg:x="2468045580" fg:w="6019437"/><text x="43.7583%" y="303.50"></text></g><g><title>do_anonymous_page (6,019,437 samples, 0.11%)</title><rect x="43.5083%" y="277" width="0.1061%" height="15" fill="rgb(219,179,1)" fg:x="2468045580" fg:w="6019437"/><text x="43.7583%" y="287.50"></text></g><g><title>alloc_pages_vma (6,019,437 samples, 0.11%)</title><rect x="43.5083%" y="261" width="0.1061%" height="15" fill="rgb(238,219,53)" fg:x="2468045580" fg:w="6019437"/><text x="43.7583%" y="271.50"></text></g><g><title>get_vma_policy.part.0 (2,998,531 samples, 0.05%)</title><rect x="43.5615%" y="245" width="0.0529%" height="15" fill="rgb(232,167,36)" fg:x="2471066486" fg:w="2998531"/><text x="43.8115%" y="255.50"></text></g><g><title>get_task_policy.part.0 (2,998,531 samples, 0.05%)</title><rect x="43.5615%" y="229" width="0.0529%" height="15" fill="rgb(244,19,51)" fg:x="2471066486" fg:w="2998531"/><text x="43.8115%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (33,370,902 samples, 0.59%)</title><rect x="43.1766%" y="485" width="0.5883%" height="15" fill="rgb(224,6,22)" fg:x="2449230426" fg:w="33370902"/><text x="43.4266%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (33,370,902 samples, 0.59%)</title><rect x="43.1766%" y="469" width="0.5883%" height="15" fill="rgb(224,145,5)" fg:x="2449230426" fg:w="33370902"/><text x="43.4266%" y="479.50"></text></g><g><title>alloc::alloc::Global::grow_impl (33,370,902 samples, 0.59%)</title><rect x="43.1766%" y="453" width="0.5883%" height="15" fill="rgb(234,130,49)" fg:x="2449230426" fg:w="33370902"/><text x="43.4266%" y="463.50"></text></g><g><title>alloc::alloc::realloc (33,370,902 samples, 0.59%)</title><rect x="43.1766%" y="437" width="0.5883%" height="15" fill="rgb(254,6,2)" fg:x="2449230426" fg:w="33370902"/><text x="43.4266%" y="447.50"></text></g><g><title>__GI___libc_realloc (33,370,902 samples, 0.59%)</title><rect x="43.1766%" y="421" width="0.5883%" height="15" fill="rgb(208,96,46)" fg:x="2449230426" fg:w="33370902"/><text x="43.4266%" y="431.50"></text></g><g><title>mremap_chunk (8,536,311 samples, 0.15%)</title><rect x="43.6144%" y="405" width="0.1505%" height="15" fill="rgb(239,3,39)" fg:x="2474065017" fg:w="8536311"/><text x="43.8644%" y="415.50"></text></g><g><title>__GI___mremap (8,536,311 samples, 0.15%)</title><rect x="43.6144%" y="389" width="0.1505%" height="15" fill="rgb(233,210,1)" fg:x="2474065017" fg:w="8536311"/><text x="43.8644%" y="399.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (8,536,311 samples, 0.15%)</title><rect x="43.6144%" y="373" width="0.1505%" height="15" fill="rgb(244,137,37)" fg:x="2474065017" fg:w="8536311"/><text x="43.8644%" y="383.50"></text></g><g><title>do_syscall_64 (8,536,311 samples, 0.15%)</title><rect x="43.6144%" y="357" width="0.1505%" height="15" fill="rgb(240,136,2)" fg:x="2474065017" fg:w="8536311"/><text x="43.8644%" y="367.50"></text></g><g><title>__x64_sys_mremap (5,684,944 samples, 0.10%)</title><rect x="43.6646%" y="341" width="0.1002%" height="15" fill="rgb(239,18,37)" fg:x="2476916384" fg:w="5684944"/><text x="43.9146%" y="351.50"></text></g><g><title>move_vma (5,684,944 samples, 0.10%)</title><rect x="43.6646%" y="325" width="0.1002%" height="15" fill="rgb(218,185,22)" fg:x="2476916384" fg:w="5684944"/><text x="43.9146%" y="335.50"></text></g><g><title>move_page_tables.part.0 (5,684,944 samples, 0.10%)</title><rect x="43.6646%" y="309" width="0.1002%" height="15" fill="rgb(225,218,4)" fg:x="2476916384" fg:w="5684944"/><text x="43.9146%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2,930,424 samples, 0.05%)</title><rect x="43.7649%" y="469" width="0.0517%" height="15" fill="rgb(230,182,32)" fg:x="2482601328" fg:w="2930424"/><text x="44.0149%" y="479.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2,930,424 samples, 0.05%)</title><rect x="43.7649%" y="453" width="0.0517%" height="15" fill="rgb(242,56,43)" fg:x="2482601328" fg:w="2930424"/><text x="44.0149%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2,930,424 samples, 0.05%)</title><rect x="43.7649%" y="437" width="0.0517%" height="15" fill="rgb(233,99,24)" fg:x="2482601328" fg:w="2930424"/><text x="44.0149%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,930,424 samples, 0.05%)</title><rect x="43.7649%" y="421" width="0.0517%" height="15" fill="rgb(234,209,42)" fg:x="2482601328" fg:w="2930424"/><text x="44.0149%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2,930,424 samples, 0.05%)</title><rect x="43.7649%" y="405" width="0.0517%" height="15" fill="rgb(227,7,12)" fg:x="2482601328" fg:w="2930424"/><text x="44.0149%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6,079,106 samples, 0.11%)</title><rect x="43.7649%" y="485" width="0.1072%" height="15" fill="rgb(245,203,43)" fg:x="2482601328" fg:w="6079106"/><text x="44.0149%" y="495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,148,682 samples, 0.06%)</title><rect x="43.8165%" y="469" width="0.0555%" height="15" fill="rgb(238,205,33)" fg:x="2485531752" fg:w="3148682"/><text x="44.0665%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (3,148,682 samples, 0.06%)</title><rect x="43.8165%" y="453" width="0.0555%" height="15" fill="rgb(231,56,7)" fg:x="2485531752" fg:w="3148682"/><text x="44.0665%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (3,148,682 samples, 0.06%)</title><rect x="43.8165%" y="437" width="0.0555%" height="15" fill="rgb(244,186,29)" fg:x="2485531752" fg:w="3148682"/><text x="44.0665%" y="447.50"></text></g><g><title>core::hash::Hasher::write_u32 (3,148,682 samples, 0.06%)</title><rect x="43.8165%" y="421" width="0.0555%" height="15" fill="rgb(234,111,31)" fg:x="2485531752" fg:w="3148682"/><text x="44.0665%" y="431.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3,148,682 samples, 0.06%)</title><rect x="43.8165%" y="405" width="0.0555%" height="15" fill="rgb(241,149,10)" fg:x="2485531752" fg:w="3148682"/><text x="44.0665%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3,148,682 samples, 0.06%)</title><rect x="43.8165%" y="389" width="0.0555%" height="15" fill="rgb(249,206,44)" fg:x="2485531752" fg:w="3148682"/><text x="44.0665%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,148,682 samples, 0.06%)</title><rect x="43.8165%" y="373" width="0.0555%" height="15" fill="rgb(251,153,30)" fg:x="2485531752" fg:w="3148682"/><text x="44.0665%" y="383.50"></text></g><g><title>core::num::dec2flt::biased_fp_to_float (2,447,171 samples, 0.04%)</title><rect x="47.8867%" y="453" width="0.0431%" height="15" fill="rgb(239,152,38)" fg:x="2716414326" fg:w="2447171"/><text x="48.1367%" y="463.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64_bits (2,447,171 samples, 0.04%)</title><rect x="47.8867%" y="437" width="0.0431%" height="15" fill="rgb(249,139,47)" fg:x="2716414326" fg:w="2447171"/><text x="48.1367%" y="447.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::from_bits (2,447,171 samples, 0.04%)</title><rect x="47.8867%" y="421" width="0.0431%" height="15" fill="rgb(244,64,35)" fg:x="2716414326" fg:w="2447171"/><text x="48.1367%" y="431.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::from_bits::rt_u64_to_f64 (2,447,171 samples, 0.04%)</title><rect x="47.8867%" y="405" width="0.0431%" height="15" fill="rgb(216,46,15)" fg:x="2716414326" fg:w="2447171"/><text x="48.1367%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (25,494,337 samples, 0.45%)</title><rect x="47.9845%" y="437" width="0.4494%" height="15" fill="rgb(250,74,19)" fg:x="2721965499" fg:w="25494337"/><text x="48.2345%" y="447.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::pow10_fast_path (2,798,904 samples, 0.05%)</title><rect x="48.4339%" y="437" width="0.0493%" height="15" fill="rgb(249,42,33)" fg:x="2747459836" fg:w="2798904"/><text x="48.6839%" y="447.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (22,984,060 samples, 0.41%)</title><rect x="48.4833%" y="437" width="0.4052%" height="15" fill="rgb(242,149,17)" fg:x="2750258740" fg:w="22984060"/><text x="48.7333%" y="447.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (85,671,961 samples, 1.51%)</title><rect x="47.9298%" y="453" width="1.5103%" height="15" fill="rgb(244,29,21)" fg:x="2718861497" fg:w="85671961"/><text x="48.1798%" y="463.50"></text></g><g><title>core::num::dec2flt::number::Number::is_fast_path (31,290,658 samples, 0.55%)</title><rect x="48.8885%" y="437" width="0.5516%" height="15" fill="rgb(220,130,37)" fg:x="2773242800" fg:w="31290658"/><text x="49.1385%" y="447.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (14,062,113 samples, 0.25%)</title><rect x="49.4401%" y="453" width="0.2479%" height="15" fill="rgb(211,67,2)" fg:x="2804533458" fg:w="14062113"/><text x="49.6901%" y="463.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (14,062,113 samples, 0.25%)</title><rect x="49.4401%" y="437" width="0.2479%" height="15" fill="rgb(235,68,52)" fg:x="2804533458" fg:w="14062113"/><text x="49.6901%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (332,708,610 samples, 5.87%)</title><rect x="43.8720%" y="485" width="5.8652%" height="15" fill="rgb(246,142,3)" fg:x="2488680434" fg:w="332708610"/><text x="44.1220%" y="495.50">core::n..</text></g><g><title>core::num::dec2flt::dec2flt (240,801,604 samples, 4.25%)</title><rect x="45.4922%" y="469" width="4.2450%" height="15" fill="rgb(241,25,7)" fg:x="2580587440" fg:w="240801604"/><text x="45.7422%" y="479.50">core:..</text></g><g><title>core::slice::&lt;impl [T]&gt;::first (2,793,473 samples, 0.05%)</title><rect x="49.6880%" y="453" width="0.0492%" height="15" fill="rgb(242,119,39)" fg:x="2818595571" fg:w="2793473"/><text x="49.9380%" y="463.50"></text></g><g><title>apic_timer_interrupt (2,839,074 samples, 0.05%)</title><rect x="52.6184%" y="469" width="0.0500%" height="15" fill="rgb(241,98,45)" fg:x="2984828210" fg:w="2839074"/><text x="52.8684%" y="479.50"></text></g><g><title>smp_apic_timer_interrupt (2,839,074 samples, 0.05%)</title><rect x="52.6184%" y="453" width="0.0500%" height="15" fill="rgb(254,28,30)" fg:x="2984828210" fg:w="2839074"/><text x="52.8684%" y="463.50"></text></g><g><title>hrtimer_interrupt (2,839,074 samples, 0.05%)</title><rect x="52.6184%" y="437" width="0.0500%" height="15" fill="rgb(241,142,54)" fg:x="2984828210" fg:w="2839074"/><text x="52.8684%" y="447.50"></text></g><g><title>__hrtimer_run_queues (2,839,074 samples, 0.05%)</title><rect x="52.6184%" y="421" width="0.0500%" height="15" fill="rgb(222,85,15)" fg:x="2984828210" fg:w="2839074"/><text x="52.8684%" y="431.50"></text></g><g><title>tick_sched_timer (2,839,074 samples, 0.05%)</title><rect x="52.6184%" y="405" width="0.0500%" height="15" fill="rgb(210,85,47)" fg:x="2984828210" fg:w="2839074"/><text x="52.8684%" y="415.50"></text></g><g><title>tick_sched_do_timer (2,839,074 samples, 0.05%)</title><rect x="52.6184%" y="389" width="0.0500%" height="15" fill="rgb(224,206,25)" fg:x="2984828210" fg:w="2839074"/><text x="52.8684%" y="399.50"></text></g><g><title>tick_do_update_jiffies64 (2,839,074 samples, 0.05%)</title><rect x="52.6184%" y="373" width="0.0500%" height="15" fill="rgb(243,201,19)" fg:x="2984828210" fg:w="2839074"/><text x="52.8684%" y="383.50"></text></g><g><title>update_wall_time (2,839,074 samples, 0.05%)</title><rect x="52.6184%" y="357" width="0.0500%" height="15" fill="rgb(236,59,4)" fg:x="2984828210" fg:w="2839074"/><text x="52.8684%" y="367.50"></text></g><g><title>timekeeping_advance (2,839,074 samples, 0.05%)</title><rect x="52.6184%" y="341" width="0.0500%" height="15" fill="rgb(254,179,45)" fg:x="2984828210" fg:w="2839074"/><text x="52.8684%" y="351.50"></text></g><g><title>raw_notifier_call_chain (2,839,074 samples, 0.05%)</title><rect x="52.6184%" y="325" width="0.0500%" height="15" fill="rgb(226,14,10)" fg:x="2984828210" fg:w="2839074"/><text x="52.8684%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (17,075,304 samples, 0.30%)</title><rect x="52.6685%" y="469" width="0.3010%" height="15" fill="rgb(244,27,41)" fg:x="2987667284" fg:w="17075304"/><text x="52.9185%" y="479.50"></text></g><g><title>core::num::dec2flt::lemire::compute_product_approx (30,724,189 samples, 0.54%)</title><rect x="52.9695%" y="469" width="0.5416%" height="15" fill="rgb(235,35,32)" fg:x="3004742588" fg:w="30724189"/><text x="53.2195%" y="479.50"></text></g><g><title>core::num::dec2flt::lemire::full_multiplication (13,868,704 samples, 0.24%)</title><rect x="53.2666%" y="453" width="0.2445%" height="15" fill="rgb(218,68,31)" fg:x="3021598073" fg:w="13868704"/><text x="53.5166%" y="463.50"></text></g><g><title>core::num::dec2flt::lemire::compute_float (236,890,165 samples, 4.18%)</title><rect x="49.7372%" y="485" width="4.1760%" height="15" fill="rgb(207,120,37)" fg:x="2821389044" fg:w="236890165"/><text x="49.9872%" y="495.50">core:..</text></g><g><title>core::num::dec2flt::lemire::power (22,812,432 samples, 0.40%)</title><rect x="53.5111%" y="469" width="0.4022%" height="15" fill="rgb(227,98,0)" fg:x="3035466777" fg:w="22812432"/><text x="53.7611%" y="479.50"></text></g><g><title>core::num::&lt;impl i32&gt;::wrapping_mul (22,812,432 samples, 0.40%)</title><rect x="53.5111%" y="453" width="0.4022%" height="15" fill="rgb(207,7,3)" fg:x="3035466777" fg:w="22812432"/><text x="53.7611%" y="463.50"></text></g><g><title>core::num::&lt;impl u8&gt;::saturating_sub (129,989,142 samples, 2.29%)</title><rect x="61.9108%" y="453" width="2.2915%" height="15" fill="rgb(206,98,19)" fg:x="3511948757" fg:w="129989142"/><text x="62.1608%" y="463.50">c..</text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (25,488,735 samples, 0.45%)</title><rect x="69.6228%" y="421" width="0.4493%" height="15" fill="rgb(217,5,26)" fg:x="3949418109" fg:w="25488735"/><text x="69.8728%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (42,177,136 samples, 0.74%)</title><rect x="70.5709%" y="405" width="0.7435%" height="15" fill="rgb(235,190,38)" fg:x="4003196541" fg:w="42177136"/><text x="70.8209%" y="415.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (293,888,514 samples, 5.18%)</title><rect x="66.3395%" y="437" width="5.1809%" height="15" fill="rgb(247,86,24)" fg:x="3763166719" fg:w="293888514"/><text x="66.5895%" y="447.50">&lt;[u8] ..</text></g><g><title>core::num::dec2flt::parse::try_parse_digits::{{closure}} (82,148,389 samples, 1.45%)</title><rect x="70.0722%" y="421" width="1.4482%" height="15" fill="rgb(205,101,16)" fg:x="3974906844" fg:w="82148389"/><text x="70.3222%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (11,681,556 samples, 0.21%)</title><rect x="71.3144%" y="405" width="0.2059%" height="15" fill="rgb(246,168,33)" fg:x="4045373677" fg:w="11681556"/><text x="71.5644%" y="415.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::read_u64 (42,554,155 samples, 0.75%)</title><rect x="71.5203%" y="437" width="0.7502%" height="15" fill="rgb(231,114,1)" fg:x="4057055233" fg:w="42554155"/><text x="71.7703%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (42,554,155 samples, 0.75%)</title><rect x="71.5203%" y="421" width="0.7502%" height="15" fill="rgb(207,184,53)" fg:x="4057055233" fg:w="42554155"/><text x="71.7703%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (42,554,155 samples, 0.75%)</title><rect x="71.5203%" y="405" width="0.7502%" height="15" fill="rgb(224,95,51)" fg:x="4057055233" fg:w="42554155"/><text x="71.7703%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (8,565,802 samples, 0.15%)</title><rect x="72.2705%" y="437" width="0.1510%" height="15" fill="rgb(212,188,45)" fg:x="4099609388" fg:w="8565802"/><text x="72.5205%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (11,220,244 samples, 0.20%)</title><rect x="72.4215%" y="437" width="0.1978%" height="15" fill="rgb(223,154,38)" fg:x="4108175190" fg:w="11220244"/><text x="72.6715%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (11,627,864 samples, 0.20%)</title><rect x="72.8689%" y="421" width="0.2050%" height="15" fill="rgb(251,22,52)" fg:x="4133554433" fg:w="11627864"/><text x="73.1189%" y="431.50"></text></g><g><title>core::num::dec2flt::common::is_8digits (45,578,263 samples, 0.80%)</title><rect x="72.6193%" y="437" width="0.8035%" height="15" fill="rgb(229,209,22)" fg:x="4119395434" fg:w="45578263"/><text x="72.8693%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_sub (19,791,400 samples, 0.35%)</title><rect x="73.0739%" y="421" width="0.3489%" height="15" fill="rgb(234,138,34)" fg:x="4145182297" fg:w="19791400"/><text x="73.3239%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (11,419,766 samples, 0.20%)</title><rect x="74.0189%" y="421" width="0.2013%" height="15" fill="rgb(212,95,11)" fg:x="4198790258" fg:w="11419766"/><text x="74.2689%" y="431.50"></text></g><g><title>core::num::dec2flt::parse::parse_8digits (99,036,350 samples, 1.75%)</title><rect x="73.4228%" y="437" width="1.7459%" height="15" fill="rgb(240,179,47)" fg:x="4164973697" fg:w="99036350"/><text x="73.6728%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (53,800,023 samples, 0.95%)</title><rect x="74.2202%" y="421" width="0.9484%" height="15" fill="rgb(240,163,11)" fg:x="4210210024" fg:w="53800023"/><text x="74.4702%" y="431.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (624,952,402 samples, 11.02%)</title><rect x="64.2024%" y="453" width="11.0171%" height="15" fill="rgb(236,37,12)" fg:x="3641937899" fg:w="624952402"/><text x="64.4524%" y="463.50">core::num::dec2f..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2,880,254 samples, 0.05%)</title><rect x="75.1687%" y="437" width="0.0508%" height="15" fill="rgb(232,164,16)" fg:x="4264010047" fg:w="2880254"/><text x="75.4187%" y="447.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2,880,254 samples, 0.05%)</title><rect x="75.1687%" y="421" width="0.0508%" height="15" fill="rgb(244,205,15)" fg:x="4264010047" fg:w="2880254"/><text x="75.4187%" y="431.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2,880,254 samples, 0.05%)</title><rect x="75.1687%" y="405" width="0.0508%" height="15" fill="rgb(223,117,47)" fg:x="4264010047" fg:w="2880254"/><text x="75.4187%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2,880,254 samples, 0.05%)</title><rect x="75.1687%" y="389" width="0.0508%" height="15" fill="rgb(244,107,35)" fg:x="4264010047" fg:w="2880254"/><text x="75.4187%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1,242,434,522 samples, 21.90%)</title><rect x="53.9133%" y="485" width="21.9024%" height="15" fill="rgb(205,140,8)" fg:x="3058279209" fg:w="1242434522"/><text x="54.1633%" y="495.50">core::num::dec2flt::parse::parse_nu..</text></g><g><title>core::num::dec2flt::parse::parse_partial_number (1,134,692,551 samples, 20.00%)</title><rect x="55.8126%" y="469" width="20.0031%" height="15" fill="rgb(228,84,46)" fg:x="3166021180" fg:w="1134692551"/><text x="56.0626%" y="479.50">core::num::dec2flt::parse::pars..</text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (33,823,430 samples, 0.60%)</title><rect x="75.2194%" y="453" width="0.5963%" height="15" fill="rgb(254,188,9)" fg:x="4266890301" fg:w="33823430"/><text x="75.4694%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5,904,031 samples, 0.10%)</title><rect x="75.9145%" y="469" width="0.1041%" height="15" fill="rgb(206,112,54)" fg:x="4306320521" fg:w="5904031"/><text x="76.1645%" y="479.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5,904,031 samples, 0.10%)</title><rect x="75.9145%" y="453" width="0.1041%" height="15" fill="rgb(216,84,49)" fg:x="4306320521" fg:w="5904031"/><text x="76.1645%" y="463.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5,904,031 samples, 0.10%)</title><rect x="75.9145%" y="437" width="0.1041%" height="15" fill="rgb(214,194,35)" fg:x="4306320521" fg:w="5904031"/><text x="76.1645%" y="447.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5,904,031 samples, 0.10%)</title><rect x="75.9145%" y="421" width="0.1041%" height="15" fill="rgb(249,28,3)" fg:x="4306320521" fg:w="5904031"/><text x="76.1645%" y="431.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::is_ascii (48,532,676 samples, 0.86%)</title><rect x="76.0186%" y="469" width="0.8556%" height="15" fill="rgb(222,56,52)" fg:x="4312224552" fg:w="48532676"/><text x="76.2686%" y="479.50"></text></g><g><title>core::slice::ascii::is_ascii (48,532,676 samples, 0.86%)</title><rect x="76.0186%" y="453" width="0.8556%" height="15" fill="rgb(245,217,50)" fg:x="4312224552" fg:w="48532676"/><text x="76.2686%" y="463.50"></text></g><g><title>csv::byte_record::ByteRecord::validate (62,825,288 samples, 1.11%)</title><rect x="75.8157%" y="485" width="1.1075%" height="15" fill="rgb(213,201,24)" fg:x="4300713731" fg:w="62825288"/><text x="76.0657%" y="495.50"></text></g><g><title>csv::byte_record::Bounds::end (2,781,791 samples, 0.05%)</title><rect x="76.8742%" y="469" width="0.0490%" height="15" fill="rgb(248,116,28)" fg:x="4360757228" fg:w="2781791"/><text x="77.1242%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2,781,791 samples, 0.05%)</title><rect x="76.8742%" y="453" width="0.0490%" height="15" fill="rgb(219,72,43)" fg:x="4360757228" fg:w="2781791"/><text x="77.1242%" y="463.50"></text></g><g><title>csv::byte_record::Bounds::end::{{closure}} (2,781,791 samples, 0.05%)</title><rect x="76.8742%" y="437" width="0.0490%" height="15" fill="rgb(209,138,14)" fg:x="4360757228" fg:w="2781791"/><text x="77.1242%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2,769,523 samples, 0.05%)</title><rect x="76.9232%" y="357" width="0.0488%" height="15" fill="rgb(222,18,33)" fg:x="4363539019" fg:w="2769523"/><text x="77.1732%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2,769,523 samples, 0.05%)</title><rect x="76.9232%" y="341" width="0.0488%" height="15" fill="rgb(213,199,7)" fg:x="4363539019" fg:w="2769523"/><text x="77.1732%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2,769,523 samples, 0.05%)</title><rect x="76.9232%" y="325" width="0.0488%" height="15" fill="rgb(250,110,10)" fg:x="4363539019" fg:w="2769523"/><text x="77.1732%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2,769,523 samples, 0.05%)</title><rect x="76.9232%" y="309" width="0.0488%" height="15" fill="rgb(248,123,6)" fg:x="4363539019" fg:w="2769523"/><text x="77.1732%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5,566,256 samples, 0.10%)</title><rect x="76.9232%" y="469" width="0.0981%" height="15" fill="rgb(206,91,31)" fg:x="4363539019" fg:w="5566256"/><text x="77.1732%" y="479.50"></text></g><g><title>csv::deserializer::deserialize_string_record::{{closure}} (5,566,256 samples, 0.10%)</title><rect x="76.9232%" y="453" width="0.0981%" height="15" fill="rgb(211,154,13)" fg:x="4363539019" fg:w="5566256"/><text x="77.1732%" y="463.50"></text></g><g><title>csv::string_record::StringRecord::iter (5,566,256 samples, 0.10%)</title><rect x="76.9232%" y="437" width="0.0981%" height="15" fill="rgb(225,148,7)" fg:x="4363539019" fg:w="5566256"/><text x="77.1732%" y="447.50"></text></g><g><title>&lt;&amp;csv::string_record::StringRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (5,566,256 samples, 0.10%)</title><rect x="76.9232%" y="421" width="0.0981%" height="15" fill="rgb(220,160,43)" fg:x="4363539019" fg:w="5566256"/><text x="77.1732%" y="431.50"></text></g><g><title>csv::byte_record::ByteRecord::iter (5,566,256 samples, 0.10%)</title><rect x="76.9232%" y="405" width="0.0981%" height="15" fill="rgb(213,52,39)" fg:x="4363539019" fg:w="5566256"/><text x="77.1732%" y="415.50"></text></g><g><title>&lt;&amp;csv::byte_record::ByteRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (5,566,256 samples, 0.10%)</title><rect x="76.9232%" y="389" width="0.0981%" height="15" fill="rgb(243,137,7)" fg:x="4363539019" fg:w="5566256"/><text x="77.1732%" y="399.50"></text></g><g><title>csv::byte_record::ByteRecord::as_slice (5,566,256 samples, 0.10%)</title><rect x="76.9232%" y="373" width="0.0981%" height="15" fill="rgb(230,79,13)" fg:x="4363539019" fg:w="5566256"/><text x="77.1732%" y="383.50"></text></g><g><title>csv::byte_record::Bounds::end (2,796,733 samples, 0.05%)</title><rect x="76.9720%" y="357" width="0.0493%" height="15" fill="rgb(247,105,23)" fg:x="4366308542" fg:w="2796733"/><text x="77.2220%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2,796,733 samples, 0.05%)</title><rect x="76.9720%" y="341" width="0.0493%" height="15" fill="rgb(223,179,41)" fg:x="4366308542" fg:w="2796733"/><text x="77.2220%" y="351.50"></text></g><g><title>csv::byte_record::Bounds::end::{{closure}} (2,796,733 samples, 0.05%)</title><rect x="76.9720%" y="325" width="0.0493%" height="15" fill="rgb(218,9,34)" fg:x="4366308542" fg:w="2796733"/><text x="77.2220%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (30,890,887 samples, 0.54%)</title><rect x="77.0213%" y="469" width="0.5446%" height="15" fill="rgb(222,106,8)" fg:x="4369105275" fg:w="30890887"/><text x="77.2713%" y="479.50"></text></g><g><title>__memmove_avx_unaligned_erms (22,584,953 samples, 0.40%)</title><rect x="77.1678%" y="453" width="0.3981%" height="15" fill="rgb(211,220,0)" fg:x="4377411209" fg:w="22584953"/><text x="77.4178%" y="463.50"></text></g><g><title>csv::deserializer::deserialize_string_record (44,816,166 samples, 0.79%)</title><rect x="76.9232%" y="485" width="0.7900%" height="15" fill="rgb(229,52,16)" fg:x="4363539019" fg:w="44816166"/><text x="77.1732%" y="495.50"></text></g><g><title>csv::string_record::StringRecord::iter (8,359,023 samples, 0.15%)</title><rect x="77.5659%" y="469" width="0.1474%" height="15" fill="rgb(212,155,18)" fg:x="4399996162" fg:w="8359023"/><text x="77.8159%" y="479.50"></text></g><g><title>&lt;&amp;csv::string_record::StringRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (8,359,023 samples, 0.15%)</title><rect x="77.5659%" y="453" width="0.1474%" height="15" fill="rgb(242,21,14)" fg:x="4399996162" fg:w="8359023"/><text x="77.8159%" y="463.50"></text></g><g><title>csv::byte_record::ByteRecord::iter (8,359,023 samples, 0.15%)</title><rect x="77.5659%" y="437" width="0.1474%" height="15" fill="rgb(222,19,48)" fg:x="4399996162" fg:w="8359023"/><text x="77.8159%" y="447.50"></text></g><g><title>&lt;&amp;csv::byte_record::ByteRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (8,359,023 samples, 0.15%)</title><rect x="77.5659%" y="421" width="0.1474%" height="15" fill="rgb(232,45,27)" fg:x="4399996162" fg:w="8359023"/><text x="77.8159%" y="431.50"></text></g><g><title>csv::byte_record::ByteRecord::as_slice (8,359,023 samples, 0.15%)</title><rect x="77.5659%" y="405" width="0.1474%" height="15" fill="rgb(249,103,42)" fg:x="4399996162" fg:w="8359023"/><text x="77.8159%" y="415.50"></text></g><g><title>csv::byte_record::Bounds::end (8,359,023 samples, 0.15%)</title><rect x="77.5659%" y="389" width="0.1474%" height="15" fill="rgb(246,81,33)" fg:x="4399996162" fg:w="8359023"/><text x="77.8159%" y="399.50"></text></g><g><title>csv::byte_record::Bounds::ends (8,359,023 samples, 0.15%)</title><rect x="77.5659%" y="373" width="0.1474%" height="15" fill="rgb(252,33,42)" fg:x="4399996162" fg:w="8359023"/><text x="77.8159%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5,518,320 samples, 0.10%)</title><rect x="77.6160%" y="357" width="0.0973%" height="15" fill="rgb(209,212,41)" fg:x="4402836865" fg:w="5518320"/><text x="77.8660%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5,518,320 samples, 0.10%)</title><rect x="77.6160%" y="341" width="0.0973%" height="15" fill="rgb(207,154,6)" fg:x="4402836865" fg:w="5518320"/><text x="77.8660%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5,518,320 samples, 0.10%)</title><rect x="77.6160%" y="325" width="0.0973%" height="15" fill="rgb(223,64,47)" fg:x="4402836865" fg:w="5518320"/><text x="77.8660%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5,518,320 samples, 0.10%)</title><rect x="77.6160%" y="309" width="0.0973%" height="15" fill="rgb(211,161,38)" fg:x="4402836865" fg:w="5518320"/><text x="77.8660%" y="319.50"></text></g><g><title>&lt;csv_core::reader::DfaState as core::cmp::PartialEq&gt;::eq (2,821,186 samples, 0.05%)</title><rect x="81.0782%" y="453" width="0.0497%" height="15" fill="rgb(219,138,40)" fg:x="4599232452" fg:w="2821186"/><text x="81.3282%" y="463.50"></text></g><g><title>core::cmp::PartialOrd::ge (20,053,244 samples, 0.35%)</title><rect x="81.1279%" y="453" width="0.3535%" height="15" fill="rgb(241,228,46)" fg:x="4602053638" fg:w="20053244"/><text x="81.3779%" y="463.50"></text></g><g><title>core::cmp::PartialOrd::gt (22,780,011 samples, 0.40%)</title><rect x="81.4814%" y="453" width="0.4016%" height="15" fill="rgb(223,209,38)" fg:x="4622106882" fg:w="22780011"/><text x="81.7314%" y="463.50"></text></g><g><title>csv_core::reader::Dfa::get_output (207,347,092 samples, 3.66%)</title><rect x="81.8830%" y="453" width="3.6552%" height="15" fill="rgb(236,164,45)" fg:x="4644886893" fg:w="207347092"/><text x="82.1330%" y="463.50">csv_..</text></g><g><title>csv_core::reader::Reader::read_record (1,219,127,078 samples, 21.49%)</title><rect x="77.7133%" y="485" width="21.4915%" height="15" fill="rgb(231,15,5)" fg:x="4408355185" fg:w="1219127078"/><text x="77.9633%" y="495.50">csv_core::reader::Reader::read_rec..</text></g><g><title>csv_core::reader::Reader::read_record_dfa (1,207,769,612 samples, 21.29%)</title><rect x="77.9135%" y="469" width="21.2913%" height="15" fill="rgb(252,35,15)" fg:x="4419712651" fg:w="1207769612"/><text x="78.1635%" y="479.50">csv_core::reader::Reader::read_rec..</text></g><g><title>csv_core::reader::DfaClasses::scan_and_copy (775,248,278 samples, 13.67%)</title><rect x="85.5382%" y="453" width="13.6666%" height="15" fill="rgb(248,181,18)" fg:x="4852233985" fg:w="775248278"/><text x="85.7882%" y="463.50">csv_core::reader::Dfa..</text></g><g><title>entry_SYSCALL_64 (2,801,840 samples, 0.05%)</title><rect x="99.2048%" y="485" width="0.0494%" height="15" fill="rgb(233,39,42)" fg:x="5627482263" fg:w="2801840"/><text x="99.4548%" y="495.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2,948,893 samples, 0.05%)</title><rect x="99.2587%" y="437" width="0.0520%" height="15" fill="rgb(238,110,33)" fg:x="5630539260" fg:w="2948893"/><text x="99.5087%" y="447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2,948,893 samples, 0.05%)</title><rect x="99.2587%" y="421" width="0.0520%" height="15" fill="rgb(233,195,10)" fg:x="5630539260" fg:w="2948893"/><text x="99.5087%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2,948,893 samples, 0.05%)</title><rect x="99.2587%" y="405" width="0.0520%" height="15" fill="rgb(254,105,3)" fg:x="5630539260" fg:w="2948893"/><text x="99.5087%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,948,893 samples, 0.05%)</title><rect x="99.2587%" y="389" width="0.0520%" height="15" fill="rgb(221,225,9)" fg:x="5630539260" fg:w="2948893"/><text x="99.5087%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2,948,893 samples, 0.05%)</title><rect x="99.2587%" y="373" width="0.0520%" height="15" fill="rgb(224,227,45)" fg:x="5630539260" fg:w="2948893"/><text x="99.5087%" y="383.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (3,052,121 samples, 0.05%)</title><rect x="99.3107%" y="437" width="0.0538%" height="15" fill="rgb(229,198,43)" fg:x="5633488153" fg:w="3052121"/><text x="99.5607%" y="447.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (3,052,121 samples, 0.05%)</title><rect x="99.3107%" y="421" width="0.0538%" height="15" fill="rgb(206,209,35)" fg:x="5633488153" fg:w="3052121"/><text x="99.5607%" y="431.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (3,052,121 samples, 0.05%)</title><rect x="99.3107%" y="405" width="0.0538%" height="15" fill="rgb(245,195,53)" fg:x="5633488153" fg:w="3052121"/><text x="99.5607%" y="415.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (3,052,121 samples, 0.05%)</title><rect x="99.3107%" y="389" width="0.0538%" height="15" fill="rgb(240,92,26)" fg:x="5633488153" fg:w="3052121"/><text x="99.5607%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (11,755,260 samples, 0.21%)</title><rect x="99.2587%" y="485" width="0.2072%" height="15" fill="rgb(207,40,23)" fg:x="5630539260" fg:w="11755260"/><text x="99.5087%" y="495.50"></text></g><g><title>hashbrown::map::make_hash (11,755,260 samples, 0.21%)</title><rect x="99.2587%" y="469" width="0.2072%" height="15" fill="rgb(223,111,35)" fg:x="5630539260" fg:w="11755260"/><text x="99.5087%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (11,755,260 samples, 0.21%)</title><rect x="99.2587%" y="453" width="0.2072%" height="15" fill="rgb(229,147,28)" fg:x="5630539260" fg:w="11755260"/><text x="99.5087%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5,754,246 samples, 0.10%)</title><rect x="99.3645%" y="437" width="0.1014%" height="15" fill="rgb(211,29,28)" fg:x="5636540274" fg:w="5754246"/><text x="99.6145%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (5,754,246 samples, 0.10%)</title><rect x="99.3645%" y="421" width="0.1014%" height="15" fill="rgb(228,72,33)" fg:x="5636540274" fg:w="5754246"/><text x="99.6145%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (5,754,246 samples, 0.10%)</title><rect x="99.3645%" y="405" width="0.1014%" height="15" fill="rgb(205,214,31)" fg:x="5636540274" fg:w="5754246"/><text x="99.6145%" y="415.50"></text></g><g><title>core::hash::Hasher::write_u32 (5,754,246 samples, 0.10%)</title><rect x="99.3645%" y="389" width="0.1014%" height="15" fill="rgb(224,111,15)" fg:x="5636540274" fg:w="5754246"/><text x="99.6145%" y="399.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5,754,246 samples, 0.10%)</title><rect x="99.3645%" y="373" width="0.1014%" height="15" fill="rgb(253,21,26)" fg:x="5636540274" fg:w="5754246"/><text x="99.6145%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5,754,246 samples, 0.10%)</title><rect x="99.3645%" y="357" width="0.1014%" height="15" fill="rgb(245,139,43)" fg:x="5636540274" fg:w="5754246"/><text x="99.6145%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5,754,246 samples, 0.10%)</title><rect x="99.3645%" y="341" width="0.1014%" height="15" fill="rgb(252,170,7)" fg:x="5636540274" fg:w="5754246"/><text x="99.6145%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,876,243 samples, 0.05%)</title><rect x="99.4659%" y="437" width="0.0507%" height="15" fill="rgb(231,118,14)" fg:x="5642294520" fg:w="2876243"/><text x="99.7159%" y="447.50"></text></g><g><title>page_fault (2,876,243 samples, 0.05%)</title><rect x="99.4659%" y="421" width="0.0507%" height="15" fill="rgb(238,83,0)" fg:x="5642294520" fg:w="2876243"/><text x="99.7159%" y="431.50"></text></g><g><title>do_page_fault (2,876,243 samples, 0.05%)</title><rect x="99.4659%" y="405" width="0.0507%" height="15" fill="rgb(221,39,39)" fg:x="5642294520" fg:w="2876243"/><text x="99.7159%" y="415.50"></text></g><g><title>__do_page_fault (2,876,243 samples, 0.05%)</title><rect x="99.4659%" y="389" width="0.0507%" height="15" fill="rgb(222,119,46)" fg:x="5642294520" fg:w="2876243"/><text x="99.7159%" y="399.50"></text></g><g><title>do_user_addr_fault (2,876,243 samples, 0.05%)</title><rect x="99.4659%" y="373" width="0.0507%" height="15" fill="rgb(222,165,49)" fg:x="5642294520" fg:w="2876243"/><text x="99.7159%" y="383.50"></text></g><g><title>handle_mm_fault (2,876,243 samples, 0.05%)</title><rect x="99.4659%" y="357" width="0.0507%" height="15" fill="rgb(219,113,52)" fg:x="5642294520" fg:w="2876243"/><text x="99.7159%" y="367.50"></text></g><g><title>__handle_mm_fault (2,876,243 samples, 0.05%)</title><rect x="99.4659%" y="341" width="0.0507%" height="15" fill="rgb(214,7,15)" fg:x="5642294520" fg:w="2876243"/><text x="99.7159%" y="351.50"></text></g><g><title>do_anonymous_page (2,876,243 samples, 0.05%)</title><rect x="99.4659%" y="325" width="0.0507%" height="15" fill="rgb(235,32,4)" fg:x="5642294520" fg:w="2876243"/><text x="99.7159%" y="335.50"></text></g><g><title>mem_cgroup_try_charge_delay (2,876,243 samples, 0.05%)</title><rect x="99.4659%" y="309" width="0.0507%" height="15" fill="rgb(238,90,54)" fg:x="5642294520" fg:w="2876243"/><text x="99.7159%" y="319.50"></text></g><g><title>mem_cgroup_throttle_swaprate (2,876,243 samples, 0.05%)</title><rect x="99.4659%" y="293" width="0.0507%" height="15" fill="rgb(213,208,19)" fg:x="5642294520" fg:w="2876243"/><text x="99.7159%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5,968,819 samples, 0.11%)</title><rect x="99.4659%" y="485" width="0.1052%" height="15" fill="rgb(233,156,4)" fg:x="5642294520" fg:w="5968819"/><text x="99.7159%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (5,968,819 samples, 0.11%)</title><rect x="99.4659%" y="469" width="0.1052%" height="15" fill="rgb(207,194,5)" fg:x="5642294520" fg:w="5968819"/><text x="99.7159%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (5,968,819 samples, 0.11%)</title><rect x="99.4659%" y="453" width="0.1052%" height="15" fill="rgb(206,111,30)" fg:x="5642294520" fg:w="5968819"/><text x="99.7159%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (3,092,576 samples, 0.05%)</title><rect x="99.5166%" y="437" width="0.0545%" height="15" fill="rgb(243,70,54)" fg:x="5645170763" fg:w="3092576"/><text x="99.7666%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (3,092,576 samples, 0.05%)</title><rect x="99.5166%" y="421" width="0.0545%" height="15" fill="rgb(242,28,8)" fg:x="5645170763" fg:w="3092576"/><text x="99.7666%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (3,092,576 samples, 0.05%)</title><rect x="99.5166%" y="405" width="0.0545%" height="15" fill="rgb(219,106,18)" fg:x="5645170763" fg:w="3092576"/><text x="99.7666%" y="415.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (3,092,576 samples, 0.05%)</title><rect x="99.5166%" y="389" width="0.0545%" height="15" fill="rgb(244,222,10)" fg:x="5645170763" fg:w="3092576"/><text x="99.7666%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,092,576 samples, 0.05%)</title><rect x="99.5166%" y="373" width="0.0545%" height="15" fill="rgb(236,179,52)" fg:x="5645170763" fg:w="3092576"/><text x="99.7666%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,092,576 samples, 0.05%)</title><rect x="99.5166%" y="357" width="0.0545%" height="15" fill="rgb(213,23,39)" fg:x="5645170763" fg:w="3092576"/><text x="99.7666%" y="367.50"></text></g><g><title>alloc::alloc::alloc (3,092,576 samples, 0.05%)</title><rect x="99.5166%" y="341" width="0.0545%" height="15" fill="rgb(238,48,10)" fg:x="5645170763" fg:w="3092576"/><text x="99.7666%" y="351.50"></text></g><g><title>__GI___libc_malloc (3,092,576 samples, 0.05%)</title><rect x="99.5166%" y="325" width="0.0545%" height="15" fill="rgb(251,196,23)" fg:x="5645170763" fg:w="3092576"/><text x="99.7666%" y="335.50"></text></g><g><title>_int_malloc (3,092,576 samples, 0.05%)</title><rect x="99.5166%" y="309" width="0.0545%" height="15" fill="rgb(250,152,24)" fg:x="5645170763" fg:w="3092576"/><text x="99.7666%" y="319.50"></text></g><g><title>page_fault (3,092,576 samples, 0.05%)</title><rect x="99.5166%" y="293" width="0.0545%" height="15" fill="rgb(209,150,17)" fg:x="5645170763" fg:w="3092576"/><text x="99.7666%" y="303.50"></text></g><g><title>do_page_fault (3,092,576 samples, 0.05%)</title><rect x="99.5166%" y="277" width="0.0545%" height="15" fill="rgb(234,202,34)" fg:x="5645170763" fg:w="3092576"/><text x="99.7666%" y="287.50"></text></g><g><title>__do_page_fault (3,092,576 samples, 0.05%)</title><rect x="99.5166%" y="261" width="0.0545%" height="15" fill="rgb(253,148,53)" fg:x="5645170763" fg:w="3092576"/><text x="99.7666%" y="271.50"></text></g><g><title>do_user_addr_fault (3,092,576 samples, 0.05%)</title><rect x="99.5166%" y="245" width="0.0545%" height="15" fill="rgb(218,129,16)" fg:x="5645170763" fg:w="3092576"/><text x="99.7666%" y="255.50"></text></g><g><title>handle_mm_fault (3,092,576 samples, 0.05%)</title><rect x="99.5166%" y="229" width="0.0545%" height="15" fill="rgb(216,85,19)" fg:x="5645170763" fg:w="3092576"/><text x="99.7666%" y="239.50"></text></g><g><title>__handle_mm_fault (3,092,576 samples, 0.05%)</title><rect x="99.5166%" y="213" width="0.0545%" height="15" fill="rgb(235,228,7)" fg:x="5645170763" fg:w="3092576"/><text x="99.7666%" y="223.50"></text></g><g><title>do_anonymous_page (3,092,576 samples, 0.05%)</title><rect x="99.5166%" y="197" width="0.0545%" height="15" fill="rgb(245,175,0)" fg:x="5645170763" fg:w="3092576"/><text x="99.7666%" y="207.50"></text></g><g><title>lru_cache_add_active_or_unevictable (3,092,576 samples, 0.05%)</title><rect x="99.5166%" y="181" width="0.0545%" height="15" fill="rgb(208,168,36)" fg:x="5645170763" fg:w="3092576"/><text x="99.7666%" y="191.50"></text></g><g><title>__lru_cache_add (3,092,576 samples, 0.05%)</title><rect x="99.5166%" y="165" width="0.0545%" height="15" fill="rgb(246,171,24)" fg:x="5645170763" fg:w="3092576"/><text x="99.7666%" y="175.50"></text></g><g><title>pagevec_lru_move_fn (3,092,576 samples, 0.05%)</title><rect x="99.5166%" y="149" width="0.0545%" height="15" fill="rgb(215,142,24)" fg:x="5645170763" fg:w="3092576"/><text x="99.7666%" y="159.50"></text></g><g><title>mem_cgroup_page_lruvec (3,092,576 samples, 0.05%)</title><rect x="99.5166%" y="133" width="0.0545%" height="15" fill="rgb(250,187,7)" fg:x="5645170763" fg:w="3092576"/><text x="99.7666%" y="143.50"></text></g><g><title>main (1,545,384 samples, 0.03%)</title><rect x="99.5711%" y="485" width="0.0272%" height="15" fill="rgb(228,66,33)" fg:x="5648263339" fg:w="1545384"/><text x="99.8211%" y="495.50"></text></g><g><title>std::rt::lang_start_internal (1,545,384 samples, 0.03%)</title><rect x="99.5711%" y="469" width="0.0272%" height="15" fill="rgb(234,215,21)" fg:x="5648263339" fg:w="1545384"/><text x="99.8211%" y="479.50"></text></g><g><title>std::panic::catch_unwind (1,545,384 samples, 0.03%)</title><rect x="99.5711%" y="453" width="0.0272%" height="15" fill="rgb(222,191,20)" fg:x="5648263339" fg:w="1545384"/><text x="99.8211%" y="463.50"></text></g><g><title>std::panicking::try (1,545,384 samples, 0.03%)</title><rect x="99.5711%" y="437" width="0.0272%" height="15" fill="rgb(245,79,54)" fg:x="5648263339" fg:w="1545384"/><text x="99.8211%" y="447.50"></text></g><g><title>std::panicking::try::do_call (1,545,384 samples, 0.03%)</title><rect x="99.5711%" y="421" width="0.0272%" height="15" fill="rgb(240,10,37)" fg:x="5648263339" fg:w="1545384"/><text x="99.8211%" y="431.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,545,384 samples, 0.03%)</title><rect x="99.5711%" y="405" width="0.0272%" height="15" fill="rgb(214,192,32)" fg:x="5648263339" fg:w="1545384"/><text x="99.8211%" y="415.50"></text></g><g><title>std::rt::init (1,545,384 samples, 0.03%)</title><rect x="99.5711%" y="389" width="0.0272%" height="15" fill="rgb(209,36,54)" fg:x="5648263339" fg:w="1545384"/><text x="99.8211%" y="399.50"></text></g><g><title>std::sys::pal::unix::init (1,545,384 samples, 0.03%)</title><rect x="99.5711%" y="373" width="0.0272%" height="15" fill="rgb(220,10,11)" fg:x="5648263339" fg:w="1545384"/><text x="99.8211%" y="383.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::init (1,545,384 samples, 0.03%)</title><rect x="99.5711%" y="357" width="0.0272%" height="15" fill="rgb(221,106,17)" fg:x="5648263339" fg:w="1545384"/><text x="99.8211%" y="367.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::install_main_guard (1,545,384 samples, 0.03%)</title><rect x="99.5711%" y="341" width="0.0272%" height="15" fill="rgb(251,142,44)" fg:x="5648263339" fg:w="1545384"/><text x="99.8211%" y="351.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::get_stack_start_aligned (1,545,384 samples, 0.03%)</title><rect x="99.5711%" y="325" width="0.0272%" height="15" fill="rgb(238,13,15)" fg:x="5648263339" fg:w="1545384"/><text x="99.8211%" y="335.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::get_stack_start (1,545,384 samples, 0.03%)</title><rect x="99.5711%" y="309" width="0.0272%" height="15" fill="rgb(208,107,27)" fg:x="5648263339" fg:w="1545384"/><text x="99.8211%" y="319.50"></text></g><g><title>pthread_getattr_np (1,545,384 samples, 0.03%)</title><rect x="99.5711%" y="293" width="0.0272%" height="15" fill="rgb(205,136,37)" fg:x="5648263339" fg:w="1545384"/><text x="99.8211%" y="303.50"></text></g><g><title>_IO_new_fopen (1,545,384 samples, 0.03%)</title><rect x="99.5711%" y="277" width="0.0272%" height="15" fill="rgb(250,205,27)" fg:x="5648263339" fg:w="1545384"/><text x="99.8211%" y="287.50"></text></g><g><title>malloc_hook_ini (1,545,384 samples, 0.03%)</title><rect x="99.5711%" y="261" width="0.0272%" height="15" fill="rgb(210,80,43)" fg:x="5648263339" fg:w="1545384"/><text x="99.8211%" y="271.50"></text></g><g><title>ptmalloc_init.part.0 (1,545,384 samples, 0.03%)</title><rect x="99.5711%" y="245" width="0.0272%" height="15" fill="rgb(247,160,36)" fg:x="5648263339" fg:w="1545384"/><text x="99.8211%" y="255.50"></text></g><g><title>__GI__dl_addr (1,545,384 samples, 0.03%)</title><rect x="99.5711%" y="229" width="0.0272%" height="15" fill="rgb(234,13,49)" fg:x="5648263339" fg:w="1545384"/><text x="99.8211%" y="239.50"></text></g><g><title>page_fault (19,936,796 samples, 0.35%)</title><rect x="99.5984%" y="485" width="0.3515%" height="15" fill="rgb(234,122,0)" fg:x="5649808723" fg:w="19936796"/><text x="99.8484%" y="495.50"></text></g><g><title>QUEUE_TEST (5,672,558,114 samples, 100.00%)</title><rect x="0.0000%" y="501" width="99.9994%" height="15" fill="rgb(207,146,38)" fg:x="0" fg:w="5672558114"/><text x="0.2500%" y="511.50">QUEUE_TEST</text></g><g><title>syscall_return_via_sysret (2,812,595 samples, 0.05%)</title><rect x="99.9498%" y="485" width="0.0496%" height="15" fill="rgb(207,177,25)" fg:x="5669745519" fg:w="2812595"/><text x="100.1998%" y="495.50"></text></g><g><title>all (5,672,590,962 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(211,178,42)" fg:x="0" fg:w="5672590962"/><text x="0.2500%" y="527.50"></text></g></svg></svg>