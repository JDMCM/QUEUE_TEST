<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="485.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="485.00"> </text><svg id="frames" x="10" width="1180" total_samples="342742438"><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3,179,818 samples, 0.93%)</title><rect x="3.5619%" y="357" width="0.9278%" height="15" fill="rgb(227,0,7)" fg:x="12208165" fg:w="3179818"/><text x="3.8119%" y="367.50"></text></g><g><title>&lt;QUEUE_TEST::csvreader::_::&lt;impl serde::de::Deserialize for QUEUE_TEST::csvreader::Rec&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (3,179,818 samples, 0.93%)</title><rect x="3.5619%" y="341" width="0.9278%" height="15" fill="rgb(217,0,24)" fg:x="12208165" fg:w="3179818"/><text x="3.8119%" y="351.50"></text></g><g><title>&lt;serde::de::value::BorrowedBytesDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_identifier (3,179,818 samples, 0.93%)</title><rect x="3.5619%" y="325" width="0.9278%" height="15" fill="rgb(221,193,54)" fg:x="12208165" fg:w="3179818"/><text x="3.8119%" y="335.50"></text></g><g><title>&lt;serde::de::value::BorrowedBytesDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3,179,818 samples, 0.93%)</title><rect x="3.5619%" y="309" width="0.9278%" height="15" fill="rgb(248,212,6)" fg:x="12208165" fg:w="3179818"/><text x="3.8119%" y="319.50"></text></g><g><title>serde::de::Visitor::visit_borrowed_bytes (3,179,818 samples, 0.93%)</title><rect x="3.5619%" y="293" width="0.9278%" height="15" fill="rgb(208,68,35)" fg:x="12208165" fg:w="3179818"/><text x="3.8119%" y="303.50"></text></g><g><title>&lt;QUEUE_TEST::csvreader::_::&lt;impl serde::de::Deserialize for QUEUE_TEST::csvreader::Rec&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_bytes (3,179,818 samples, 0.93%)</title><rect x="3.5619%" y="277" width="0.9278%" height="15" fill="rgb(232,128,0)" fg:x="12208165" fg:w="3179818"/><text x="3.8119%" y="287.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_struct (30,340,312 samples, 8.85%)</title><rect x="0.0000%" y="421" width="8.8522%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="30340312"/><text x="0.2500%" y="431.50">&lt;&amp;mut csv::de..</text></g><g><title>&lt;QUEUE_TEST::csvreader::_::&lt;impl serde::de::Deserialize for QUEUE_TEST::csvreader::Rec&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (30,340,312 samples, 8.85%)</title><rect x="0.0000%" y="405" width="8.8522%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="30340312"/><text x="0.2500%" y="415.50">&lt;QUEUE_TEST::..</text></g><g><title>serde::de::MapAccess::next_key (18,132,147 samples, 5.29%)</title><rect x="3.5619%" y="389" width="5.2903%" height="15" fill="rgb(218,30,26)" fg:x="12208165" fg:w="18132147"/><text x="3.8119%" y="399.50">serde:..</text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::MapAccess&gt;::next_key_seed (18,132,147 samples, 5.29%)</title><rect x="3.5619%" y="373" width="5.2903%" height="15" fill="rgb(220,122,19)" fg:x="12208165" fg:w="18132147"/><text x="3.8119%" y="383.50">&lt;&amp;mut ..</text></g><g><title>&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::next_header_bytes (14,952,329 samples, 4.36%)</title><rect x="4.4897%" y="357" width="4.3626%" height="15" fill="rgb(250,228,42)" fg:x="15387983" fg:w="14952329"/><text x="4.7397%" y="367.50">&lt;csv:..</text></g><g><title>&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_header_bytes (14,952,329 samples, 4.36%)</title><rect x="4.4897%" y="341" width="4.3626%" height="15" fill="rgb(240,193,28)" fg:x="15387983" fg:w="14952329"/><text x="4.7397%" y="351.50">&lt;csv:..</text></g><g><title>&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_header (14,952,329 samples, 4.36%)</title><rect x="4.4897%" y="325" width="4.3626%" height="15" fill="rgb(216,20,37)" fg:x="15387983" fg:w="14952329"/><text x="4.7397%" y="335.50">&lt;csv:..</text></g><g><title>core::option::Option&lt;T&gt;::and_then (14,952,329 samples, 4.36%)</title><rect x="4.4897%" y="309" width="4.3626%" height="15" fill="rgb(206,188,39)" fg:x="15387983" fg:w="14952329"/><text x="4.7397%" y="319.50">core:..</text></g><g><title>&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_header::{{closure}} (14,952,329 samples, 4.36%)</title><rect x="4.4897%" y="293" width="4.3626%" height="15" fill="rgb(217,207,13)" fg:x="15387983" fg:w="14952329"/><text x="4.7397%" y="303.50">&lt;csv:..</text></g><g><title>&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (14,952,329 samples, 4.36%)</title><rect x="4.4897%" y="277" width="4.3626%" height="15" fill="rgb(231,73,38)" fg:x="15387983" fg:w="14952329"/><text x="4.7397%" y="287.50">&lt;csv:..</text></g><g><title>&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (14,952,329 samples, 4.36%)</title><rect x="4.4897%" y="261" width="4.3626%" height="15" fill="rgb(225,20,46)" fg:x="15387983" fg:w="14952329"/><text x="4.7397%" y="271.50">&lt;csv:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3,075,791 samples, 0.90%)</title><rect x="7.9548%" y="245" width="0.8974%" height="15" fill="rgb(210,31,41)" fg:x="27264521" fg:w="3075791"/><text x="8.2048%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3,075,791 samples, 0.90%)</title><rect x="7.9548%" y="229" width="0.8974%" height="15" fill="rgb(221,200,47)" fg:x="27264521" fg:w="3075791"/><text x="8.2048%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,075,791 samples, 0.90%)</title><rect x="7.9548%" y="213" width="0.8974%" height="15" fill="rgb(226,26,5)" fg:x="27264521" fg:w="3075791"/><text x="8.2048%" y="223.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (12,654,842 samples, 3.69%)</title><rect x="8.8522%" y="421" width="3.6922%" height="15" fill="rgb(249,33,26)" fg:x="30340312" fg:w="12654842"/><text x="9.1022%" y="431.50">&lt;cor..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for f64&gt;::deserialize (12,654,842 samples, 3.69%)</title><rect x="8.8522%" y="405" width="3.6922%" height="15" fill="rgb(235,183,28)" fg:x="30340312" fg:w="12654842"/><text x="9.1022%" y="415.50">serd..</text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_f64 (12,654,842 samples, 3.69%)</title><rect x="8.8522%" y="389" width="3.6922%" height="15" fill="rgb(221,5,38)" fg:x="30340312" fg:w="12654842"/><text x="9.1022%" y="399.50">&lt;&amp;mu..</text></g><g><title>&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::next_field (12,654,842 samples, 3.69%)</title><rect x="8.8522%" y="373" width="3.6922%" height="15" fill="rgb(247,18,42)" fg:x="30340312" fg:w="12654842"/><text x="9.1022%" y="383.50">&lt;csv..</text></g><g><title>&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_field (12,654,842 samples, 3.69%)</title><rect x="8.8522%" y="357" width="3.6922%" height="15" fill="rgb(241,131,45)" fg:x="30340312" fg:w="12654842"/><text x="9.1022%" y="367.50">&lt;csv..</text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (10,116,603 samples, 2.95%)</title><rect x="9.5928%" y="341" width="2.9517%" height="15" fill="rgb(249,31,29)" fg:x="32878551" fg:w="10116603"/><text x="9.8428%" y="351.50">&lt;co..</text></g><g><title>&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (10,116,603 samples, 2.95%)</title><rect x="9.5928%" y="325" width="2.9517%" height="15" fill="rgb(225,111,53)" fg:x="32878551" fg:w="10116603"/><text x="9.8428%" y="335.50">&lt;cs..</text></g><g><title>&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (10,116,603 samples, 2.95%)</title><rect x="9.5928%" y="309" width="2.9517%" height="15" fill="rgb(238,160,17)" fg:x="32878551" fg:w="10116603"/><text x="9.8428%" y="319.50">&lt;cs..</text></g><g><title>csv::byte_record::Bounds::ends (3,185,721 samples, 0.93%)</title><rect x="11.6150%" y="293" width="0.9295%" height="15" fill="rgb(214,148,48)" fg:x="39809433" fg:w="3185721"/><text x="11.8650%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3,185,721 samples, 0.93%)</title><rect x="11.6150%" y="277" width="0.9295%" height="15" fill="rgb(232,36,49)" fg:x="39809433" fg:w="3185721"/><text x="11.8650%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3,185,721 samples, 0.93%)</title><rect x="11.6150%" y="261" width="0.9295%" height="15" fill="rgb(209,103,24)" fg:x="39809433" fg:w="3185721"/><text x="11.8650%" y="271.50"></text></g><g><title>&lt;csv::reader::DeserializeRecordsIter&lt;R,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (32,943,310 samples, 9.61%)</title><rect x="12.5445%" y="421" width="9.6117%" height="15" fill="rgb(229,88,8)" fg:x="42995154" fg:w="32943310"/><text x="12.7945%" y="431.50">&lt;csv::reader::..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_record (32,943,310 samples, 9.61%)</title><rect x="12.5445%" y="405" width="9.6117%" height="15" fill="rgb(213,181,19)" fg:x="42995154" fg:w="32943310"/><text x="12.7945%" y="415.50">csv::reader::R..</text></g><g><title>csv::string_record::StringRecord::read (32,943,310 samples, 9.61%)</title><rect x="12.5445%" y="389" width="9.6117%" height="15" fill="rgb(254,191,54)" fg:x="42995154" fg:w="32943310"/><text x="12.7945%" y="399.50">csv::string_re..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (29,737,364 samples, 8.68%)</title><rect x="13.4798%" y="373" width="8.6763%" height="15" fill="rgb(241,83,37)" fg:x="46201100" fg:w="29737364"/><text x="13.7298%" y="383.50">csv::reader:..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record_impl (29,737,364 samples, 8.68%)</title><rect x="13.4798%" y="357" width="8.6763%" height="15" fill="rgb(233,36,39)" fg:x="46201100" fg:w="29737364"/><text x="13.7298%" y="367.50">csv::reader:..</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (26,822,790 samples, 7.83%)</title><rect x="14.3302%" y="341" width="7.8259%" height="15" fill="rgb(226,3,54)" fg:x="49115674" fg:w="26822790"/><text x="14.5802%" y="351.50">&lt;std::io::b..</text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (26,822,790 samples, 7.83%)</title><rect x="14.3302%" y="325" width="7.8259%" height="15" fill="rgb(245,192,40)" fg:x="49115674" fg:w="26822790"/><text x="14.5802%" y="335.50">std::io::bu..</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (26,822,790 samples, 7.83%)</title><rect x="14.3302%" y="309" width="7.8259%" height="15" fill="rgb(238,167,29)" fg:x="49115674" fg:w="26822790"/><text x="14.5802%" y="319.50">std::io::im..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (26,822,790 samples, 7.83%)</title><rect x="14.3302%" y="293" width="7.8259%" height="15" fill="rgb(232,182,51)" fg:x="49115674" fg:w="26822790"/><text x="14.5802%" y="303.50">&lt;std::fs::F..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (26,822,790 samples, 7.83%)</title><rect x="14.3302%" y="277" width="7.8259%" height="15" fill="rgb(231,60,39)" fg:x="49115674" fg:w="26822790"/><text x="14.5802%" y="287.50">&lt;&amp;std::fs::..</text></g><g><title>std::sys::pal::unix::fs::File::read_buf (26,822,790 samples, 7.83%)</title><rect x="14.3302%" y="261" width="7.8259%" height="15" fill="rgb(208,69,12)" fg:x="49115674" fg:w="26822790"/><text x="14.5802%" y="271.50">std::sys::p..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::read_buf (26,822,790 samples, 7.83%)</title><rect x="14.3302%" y="245" width="7.8259%" height="15" fill="rgb(235,93,37)" fg:x="49115674" fg:w="26822790"/><text x="14.5802%" y="255.50">std::sys::p..</text></g><g><title>__libc_read (26,822,790 samples, 7.83%)</title><rect x="14.3302%" y="229" width="7.8259%" height="15" fill="rgb(213,116,39)" fg:x="49115674" fg:w="26822790"/><text x="14.5802%" y="239.50">__libc_read</text></g><g><title>entry_SYSCALL_64_after_hwframe (26,822,790 samples, 7.83%)</title><rect x="14.3302%" y="213" width="7.8259%" height="15" fill="rgb(222,207,29)" fg:x="49115674" fg:w="26822790"/><text x="14.5802%" y="223.50">entry_SYSCA..</text></g><g><title>do_syscall_64 (26,822,790 samples, 7.83%)</title><rect x="14.3302%" y="197" width="7.8259%" height="15" fill="rgb(206,96,30)" fg:x="49115674" fg:w="26822790"/><text x="14.5802%" y="207.50">do_syscall_..</text></g><g><title>__x64_sys_read (20,691,524 samples, 6.04%)</title><rect x="16.1191%" y="181" width="6.0370%" height="15" fill="rgb(218,138,4)" fg:x="55246940" fg:w="20691524"/><text x="16.3691%" y="191.50">__x64_sy..</text></g><g><title>ksys_read (20,691,524 samples, 6.04%)</title><rect x="16.1191%" y="165" width="6.0370%" height="15" fill="rgb(250,191,14)" fg:x="55246940" fg:w="20691524"/><text x="16.3691%" y="175.50">ksys_read</text></g><g><title>vfs_read (20,691,524 samples, 6.04%)</title><rect x="16.1191%" y="149" width="6.0370%" height="15" fill="rgb(239,60,40)" fg:x="55246940" fg:w="20691524"/><text x="16.3691%" y="159.50">vfs_read</text></g><g><title>__vfs_read (17,731,176 samples, 5.17%)</title><rect x="16.9828%" y="133" width="5.1733%" height="15" fill="rgb(206,27,48)" fg:x="58207288" fg:w="17731176"/><text x="17.2328%" y="143.50">__vfs_..</text></g><g><title>new_sync_read (17,731,176 samples, 5.17%)</title><rect x="16.9828%" y="117" width="5.1733%" height="15" fill="rgb(225,35,8)" fg:x="58207288" fg:w="17731176"/><text x="17.2328%" y="127.50">new_sy..</text></g><g><title>ext4_file_read_iter (17,731,176 samples, 5.17%)</title><rect x="16.9828%" y="101" width="5.1733%" height="15" fill="rgb(250,213,24)" fg:x="58207288" fg:w="17731176"/><text x="17.2328%" y="111.50">ext4_f..</text></g><g><title>generic_file_read_iter (17,731,176 samples, 5.17%)</title><rect x="16.9828%" y="85" width="5.1733%" height="15" fill="rgb(247,123,22)" fg:x="58207288" fg:w="17731176"/><text x="17.2328%" y="95.50">generi..</text></g><g><title>generic_file_buffered_read (17,731,176 samples, 5.17%)</title><rect x="16.9828%" y="69" width="5.1733%" height="15" fill="rgb(231,138,38)" fg:x="58207288" fg:w="17731176"/><text x="17.2328%" y="79.50">generi..</text></g><g><title>copy_page_to_iter (17,731,176 samples, 5.17%)</title><rect x="16.9828%" y="53" width="5.1733%" height="15" fill="rgb(231,145,46)" fg:x="58207288" fg:w="17731176"/><text x="17.2328%" y="63.50">copy_p..</text></g><g><title>copy_user_enhanced_fast_string (17,731,176 samples, 5.17%)</title><rect x="16.9828%" y="37" width="5.1733%" height="15" fill="rgb(251,118,11)" fg:x="58207288" fg:w="17731176"/><text x="17.2328%" y="47.50">copy_u..</text></g><g><title>&lt;QUEUE_TEST::vectors::Vector as core::ops::arith::Div&lt;f64&gt;&gt;::div (3,215,829 samples, 0.94%)</title><rect x="22.1561%" y="373" width="0.9383%" height="15" fill="rgb(217,147,25)" fg:x="75938464" fg:w="3215829"/><text x="22.4061%" y="383.50"></text></g><g><title>&lt;QUEUE_TEST::vectors::Vector as core::ops::arith::Mul&lt;f64&gt;&gt;::mul (3,209,028 samples, 0.94%)</title><rect x="23.0944%" y="373" width="0.9363%" height="15" fill="rgb(247,81,37)" fg:x="79154293" fg:w="3209028"/><text x="23.3444%" y="383.50"></text></g><g><title>QUEUE_TEST::collisionhandling::compute_acc (9,628,222 samples, 2.81%)</title><rect x="22.1561%" y="389" width="2.8092%" height="15" fill="rgb(209,12,38)" fg:x="75938464" fg:w="9628222"/><text x="22.4061%" y="399.50">QU..</text></g><g><title>QUEUE_TEST::particle::Particle::relative_speed (3,203,365 samples, 0.93%)</title><rect x="24.0307%" y="373" width="0.9346%" height="15" fill="rgb(227,1,9)" fg:x="82363321" fg:w="3203365"/><text x="24.2807%" y="383.50"></text></g><g><title>&lt;QUEUE_TEST::vectors::Vector as core::ops::arith::Sub&gt;::sub (3,203,365 samples, 0.93%)</title><rect x="24.0307%" y="357" width="0.9346%" height="15" fill="rgb(248,47,43)" fg:x="82363321" fg:w="3203365"/><text x="24.2807%" y="367.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (3,212,843 samples, 0.94%)</title><rect x="24.9653%" y="373" width="0.9374%" height="15" fill="rgb(221,10,30)" fg:x="85566686" fg:w="3212843"/><text x="25.2153%" y="383.50"></text></g><g><title>QUEUE_TEST::collisionhandling::process_collision (16,057,287 samples, 4.68%)</title><rect x="22.1561%" y="421" width="4.6849%" height="15" fill="rgb(210,229,1)" fg:x="75938464" fg:w="16057287"/><text x="22.4061%" y="431.50">QUEUE..</text></g><g><title>QUEUE_TEST::collisionhandling::process_pair_get_dv (16,057,287 samples, 4.68%)</title><rect x="22.1561%" y="405" width="4.6849%" height="15" fill="rgb(222,148,37)" fg:x="75938464" fg:w="16057287"/><text x="22.4061%" y="415.50">QUEUE..</text></g><g><title>QUEUE_TEST::collisionhandling::get_next_time (6,429,065 samples, 1.88%)</title><rect x="24.9653%" y="389" width="1.8758%" height="15" fill="rgb(234,67,33)" fg:x="85566686" fg:w="6429065"/><text x="25.2153%" y="399.50">Q..</text></g><g><title>core::fmt::Arguments::new_v1 (3,216,222 samples, 0.94%)</title><rect x="25.9027%" y="373" width="0.9384%" height="15" fill="rgb(247,98,35)" fg:x="88779529" fg:w="3216222"/><text x="26.1527%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3,100,688 samples, 0.90%)</title><rect x="26.8411%" y="373" width="0.9047%" height="15" fill="rgb(247,138,52)" fg:x="91995751" fg:w="3100688"/><text x="27.0911%" y="383.50"></text></g><g><title>alloc_pages_vma (2,927,705 samples, 0.85%)</title><rect x="27.7457%" y="245" width="0.8542%" height="15" fill="rgb(213,79,30)" fg:x="95096439" fg:w="2927705"/><text x="27.9957%" y="255.50"></text></g><g><title>__alloc_pages_nodemask (2,927,705 samples, 0.85%)</title><rect x="27.7457%" y="229" width="0.8542%" height="15" fill="rgb(246,177,23)" fg:x="95096439" fg:w="2927705"/><text x="27.9957%" y="239.50"></text></g><g><title>page_fault (6,425,404 samples, 1.87%)</title><rect x="27.7457%" y="357" width="1.8747%" height="15" fill="rgb(230,62,27)" fg:x="95096439" fg:w="6425404"/><text x="27.9957%" y="367.50">p..</text></g><g><title>do_page_fault (6,425,404 samples, 1.87%)</title><rect x="27.7457%" y="341" width="1.8747%" height="15" fill="rgb(216,154,8)" fg:x="95096439" fg:w="6425404"/><text x="27.9957%" y="351.50">d..</text></g><g><title>__do_page_fault (6,425,404 samples, 1.87%)</title><rect x="27.7457%" y="325" width="1.8747%" height="15" fill="rgb(244,35,45)" fg:x="95096439" fg:w="6425404"/><text x="27.9957%" y="335.50">_..</text></g><g><title>do_user_addr_fault (6,425,404 samples, 1.87%)</title><rect x="27.7457%" y="309" width="1.8747%" height="15" fill="rgb(251,115,12)" fg:x="95096439" fg:w="6425404"/><text x="27.9957%" y="319.50">d..</text></g><g><title>handle_mm_fault (6,425,404 samples, 1.87%)</title><rect x="27.7457%" y="293" width="1.8747%" height="15" fill="rgb(240,54,50)" fg:x="95096439" fg:w="6425404"/><text x="27.9957%" y="303.50">h..</text></g><g><title>__handle_mm_fault (6,425,404 samples, 1.87%)</title><rect x="27.7457%" y="277" width="1.8747%" height="15" fill="rgb(233,84,52)" fg:x="95096439" fg:w="6425404"/><text x="27.9957%" y="287.50">_..</text></g><g><title>do_anonymous_page (6,425,404 samples, 1.87%)</title><rect x="27.7457%" y="261" width="1.8747%" height="15" fill="rgb(207,117,47)" fg:x="95096439" fg:w="6425404"/><text x="27.9957%" y="271.50">d..</text></g><g><title>mem_cgroup_try_charge_delay (3,497,699 samples, 1.02%)</title><rect x="28.5999%" y="245" width="1.0205%" height="15" fill="rgb(249,43,39)" fg:x="98024144" fg:w="3497699"/><text x="28.8499%" y="255.50"></text></g><g><title>mem_cgroup_try_charge (3,497,699 samples, 1.02%)</title><rect x="28.5999%" y="229" width="1.0205%" height="15" fill="rgb(209,38,44)" fg:x="98024144" fg:w="3497699"/><text x="28.8499%" y="239.50"></text></g><g><title>QUEUE_TEST::csvreader::csvcon (12,513,469 samples, 3.65%)</title><rect x="26.8411%" y="421" width="3.6510%" height="15" fill="rgb(236,212,23)" fg:x="91995751" fg:w="12513469"/><text x="27.0911%" y="431.50">QUEU..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (12,513,469 samples, 3.65%)</title><rect x="26.8411%" y="405" width="3.6510%" height="15" fill="rgb(242,79,21)" fg:x="91995751" fg:w="12513469"/><text x="27.0911%" y="415.50">allo..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (12,513,469 samples, 3.65%)</title><rect x="26.8411%" y="389" width="3.6510%" height="15" fill="rgb(211,96,35)" fg:x="91995751" fg:w="12513469"/><text x="27.0911%" y="399.50">allo..</text></g><g><title>core::ptr::write (9,412,781 samples, 2.75%)</title><rect x="27.7457%" y="373" width="2.7463%" height="15" fill="rgb(253,215,40)" fg:x="95096439" fg:w="9412781"/><text x="27.9957%" y="383.50">co..</text></g><g><title>swapgs_restore_regs_and_return_to_usermode (2,987,377 samples, 0.87%)</title><rect x="29.6204%" y="357" width="0.8716%" height="15" fill="rgb(211,81,21)" fg:x="101521843" fg:w="2987377"/><text x="29.8704%" y="367.50"></text></g><g><title>prepare_exit_to_usermode (2,987,377 samples, 0.87%)</title><rect x="29.6204%" y="341" width="0.8716%" height="15" fill="rgb(208,190,38)" fg:x="101521843" fg:w="2987377"/><text x="29.8704%" y="351.50"></text></g><g><title>&lt;alloc::collections::binary_heap::BinaryHeap&lt;&amp;E&gt; as QUEUE_TEST::SeqentialPriorityQueue&lt;E&gt;&gt;::pop (3,216,816 samples, 0.94%)</title><rect x="30.4921%" y="389" width="0.9386%" height="15" fill="rgb(235,213,38)" fg:x="104509220" fg:w="3216816"/><text x="30.7421%" y="399.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (3,216,816 samples, 0.94%)</title><rect x="30.4921%" y="373" width="0.9386%" height="15" fill="rgb(237,122,38)" fg:x="104509220" fg:w="3216816"/><text x="30.7421%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3,216,816 samples, 0.94%)</title><rect x="30.4921%" y="357" width="0.9386%" height="15" fill="rgb(244,218,35)" fg:x="104509220" fg:w="3216816"/><text x="30.7421%" y="367.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop::{{closure}} (3,216,816 samples, 0.94%)</title><rect x="30.4921%" y="341" width="0.9386%" height="15" fill="rgb(240,68,47)" fg:x="104509220" fg:w="3216816"/><text x="30.7421%" y="351.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_down_to_bottom (3,216,816 samples, 0.94%)</title><rect x="30.4921%" y="325" width="0.9386%" height="15" fill="rgb(210,16,53)" fg:x="104509220" fg:w="3216816"/><text x="30.7421%" y="335.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (3,216,816 samples, 0.94%)</title><rect x="30.4921%" y="309" width="0.9386%" height="15" fill="rgb(235,124,12)" fg:x="104509220" fg:w="3216816"/><text x="30.7421%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3,216,816 samples, 0.94%)</title><rect x="30.4921%" y="293" width="0.9386%" height="15" fill="rgb(224,169,11)" fg:x="104509220" fg:w="3216816"/><text x="30.7421%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (6,408,968 samples, 1.87%)</title><rect x="31.4306%" y="389" width="1.8699%" height="15" fill="rgb(250,166,2)" fg:x="107726036" fg:w="6408968"/><text x="31.6806%" y="399.50">&lt;..</text></g><g><title>QUEUE_TEST::time_seqential::{{closure}} (6,408,968 samples, 1.87%)</title><rect x="31.4306%" y="373" width="1.8699%" height="15" fill="rgb(242,216,29)" fg:x="107726036" fg:w="6408968"/><text x="31.6806%" y="383.50">Q..</text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (6,408,968 samples, 1.87%)</title><rect x="31.4306%" y="357" width="1.8699%" height="15" fill="rgb(230,116,27)" fg:x="107726036" fg:w="6408968"/><text x="31.6806%" y="367.50">c..</text></g><g><title>QUEUE_TEST::csvreader::Rec::p1 (3,207,914 samples, 0.94%)</title><rect x="33.3005%" y="389" width="0.9360%" height="15" fill="rgb(228,99,48)" fg:x="114135004" fg:w="3207914"/><text x="33.5505%" y="399.50"></text></g><g><title>QUEUE_TEST::particle::Particle::new (3,207,914 samples, 0.94%)</title><rect x="33.3005%" y="373" width="0.9360%" height="15" fill="rgb(253,11,6)" fg:x="114135004" fg:w="3207914"/><text x="33.5505%" y="383.50"></text></g><g><title>QUEUE_TEST::time_seqential (16,053,766 samples, 4.68%)</title><rect x="30.4921%" y="405" width="4.6839%" height="15" fill="rgb(247,143,39)" fg:x="104509220" fg:w="16053766"/><text x="30.7421%" y="415.50">QUEUE..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3,220,068 samples, 0.94%)</title><rect x="34.2365%" y="389" width="0.9395%" height="15" fill="rgb(236,97,10)" fg:x="117342918" fg:w="3220068"/><text x="34.4865%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3,220,068 samples, 0.94%)</title><rect x="34.2365%" y="373" width="0.9395%" height="15" fill="rgb(233,208,19)" fg:x="117342918" fg:w="3220068"/><text x="34.4865%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (3,220,068 samples, 0.94%)</title><rect x="34.2365%" y="357" width="0.9395%" height="15" fill="rgb(216,164,2)" fg:x="117342918" fg:w="3220068"/><text x="34.4865%" y="367.50"></text></g><g><title>QUEUE_TEST::time_seqential::{{closure}} (3,220,068 samples, 0.94%)</title><rect x="34.2365%" y="341" width="0.9395%" height="15" fill="rgb(220,129,5)" fg:x="117342918" fg:w="3220068"/><text x="34.4865%" y="351.50"></text></g><g><title>&lt;alloc::collections::binary_heap::BinaryHeap&lt;&amp;E&gt; as QUEUE_TEST::SeqentialPriorityQueue&lt;E&gt;&gt;::push (3,220,068 samples, 0.94%)</title><rect x="34.2365%" y="325" width="0.9395%" height="15" fill="rgb(242,17,10)" fg:x="117342918" fg:w="3220068"/><text x="34.4865%" y="335.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::push (3,220,068 samples, 0.94%)</title><rect x="34.2365%" y="309" width="0.9395%" height="15" fill="rgb(242,107,0)" fg:x="117342918" fg:w="3220068"/><text x="34.4865%" y="319.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (3,220,068 samples, 0.94%)</title><rect x="34.2365%" y="293" width="0.9395%" height="15" fill="rgb(251,28,31)" fg:x="117342918" fg:w="3220068"/><text x="34.4865%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (3,220,068 samples, 0.94%)</title><rect x="34.2365%" y="277" width="0.9395%" height="15" fill="rgb(233,223,10)" fg:x="117342918" fg:w="3220068"/><text x="34.4865%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (3,220,068 samples, 0.94%)</title><rect x="34.2365%" y="261" width="0.9395%" height="15" fill="rgb(215,21,27)" fg:x="117342918" fg:w="3220068"/><text x="34.4865%" y="271.50"></text></g><g><title>core::cmp::PartialOrd::le (3,220,068 samples, 0.94%)</title><rect x="34.2365%" y="245" width="0.9395%" height="15" fill="rgb(232,23,21)" fg:x="117342918" fg:w="3220068"/><text x="34.4865%" y="255.50"></text></g><g><title>&lt;QUEUE_TEST::KeyVal as core::cmp::PartialOrd&gt;::partial_cmp (3,220,068 samples, 0.94%)</title><rect x="34.2365%" y="229" width="0.9395%" height="15" fill="rgb(244,5,23)" fg:x="117342918" fg:w="3220068"/><text x="34.4865%" y="239.50"></text></g><g><title>page_fault (3,178,724 samples, 0.93%)</title><rect x="36.1081%" y="373" width="0.9274%" height="15" fill="rgb(226,81,46)" fg:x="123757778" fg:w="3178724"/><text x="36.3581%" y="383.50"></text></g><g><title>do_page_fault (3,178,724 samples, 0.93%)</title><rect x="36.1081%" y="357" width="0.9274%" height="15" fill="rgb(247,70,30)" fg:x="123757778" fg:w="3178724"/><text x="36.3581%" y="367.50"></text></g><g><title>__do_page_fault (3,178,724 samples, 0.93%)</title><rect x="36.1081%" y="341" width="0.9274%" height="15" fill="rgb(212,68,19)" fg:x="123757778" fg:w="3178724"/><text x="36.3581%" y="351.50"></text></g><g><title>do_user_addr_fault (3,178,724 samples, 0.93%)</title><rect x="36.1081%" y="325" width="0.9274%" height="15" fill="rgb(240,187,13)" fg:x="123757778" fg:w="3178724"/><text x="36.3581%" y="335.50"></text></g><g><title>handle_mm_fault (3,178,724 samples, 0.93%)</title><rect x="36.1081%" y="309" width="0.9274%" height="15" fill="rgb(223,113,26)" fg:x="123757778" fg:w="3178724"/><text x="36.3581%" y="319.50"></text></g><g><title>__handle_mm_fault (3,178,724 samples, 0.93%)</title><rect x="36.1081%" y="293" width="0.9274%" height="15" fill="rgb(206,192,2)" fg:x="123757778" fg:w="3178724"/><text x="36.3581%" y="303.50"></text></g><g><title>do_anonymous_page (3,178,724 samples, 0.93%)</title><rect x="36.1081%" y="277" width="0.9274%" height="15" fill="rgb(241,108,4)" fg:x="123757778" fg:w="3178724"/><text x="36.3581%" y="287.50"></text></g><g><title>alloc_pages_vma (3,178,724 samples, 0.93%)</title><rect x="36.1081%" y="261" width="0.9274%" height="15" fill="rgb(247,173,49)" fg:x="123757778" fg:w="3178724"/><text x="36.3581%" y="271.50"></text></g><g><title>__alloc_pages_nodemask (3,178,724 samples, 0.93%)</title><rect x="36.1081%" y="245" width="0.9274%" height="15" fill="rgb(224,114,35)" fg:x="123757778" fg:w="3178724"/><text x="36.3581%" y="255.50"></text></g><g><title>get_page_from_freelist (3,178,724 samples, 0.93%)</title><rect x="36.1081%" y="229" width="0.9274%" height="15" fill="rgb(245,159,27)" fg:x="123757778" fg:w="3178724"/><text x="36.3581%" y="239.50"></text></g><g><title>clear_page_erms (3,178,724 samples, 0.93%)</title><rect x="36.1081%" y="213" width="0.9274%" height="15" fill="rgb(245,172,44)" fg:x="123757778" fg:w="3178724"/><text x="36.3581%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9,585,434 samples, 2.80%)</title><rect x="35.1760%" y="405" width="2.7967%" height="15" fill="rgb(236,23,11)" fg:x="120562986" fg:w="9585434"/><text x="35.4260%" y="415.50">al..</text></g><g><title>core::ptr::write (9,585,434 samples, 2.80%)</title><rect x="35.1760%" y="389" width="2.7967%" height="15" fill="rgb(205,117,38)" fg:x="120562986" fg:w="9585434"/><text x="35.4260%" y="399.50">co..</text></g><g><title>swapgs_restore_regs_and_return_to_usermode (3,211,918 samples, 0.94%)</title><rect x="37.0355%" y="373" width="0.9371%" height="15" fill="rgb(237,72,25)" fg:x="126936502" fg:w="3211918"/><text x="37.2855%" y="383.50"></text></g><g><title>prepare_exit_to_usermode (3,211,918 samples, 0.94%)</title><rect x="37.0355%" y="357" width="0.9371%" height="15" fill="rgb(244,70,9)" fg:x="126936502" fg:w="3211918"/><text x="37.2855%" y="367.50"></text></g><g><title>QUEUE_TEST::main (28,859,272 samples, 8.42%)</title><rect x="30.4921%" y="421" width="8.4201%" height="15" fill="rgb(217,125,39)" fg:x="104509220" fg:w="28859272"/><text x="30.7421%" y="431.50">QUEUE_TEST::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;QUEUE_TEST::KeyVal&gt;&gt;&gt; (3,220,072 samples, 0.94%)</title><rect x="37.9727%" y="405" width="0.9395%" height="15" fill="rgb(235,36,10)" fg:x="130148420" fg:w="3220072"/><text x="38.2227%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,220,072 samples, 0.94%)</title><rect x="37.9727%" y="389" width="0.9395%" height="15" fill="rgb(251,123,47)" fg:x="130148420" fg:w="3220072"/><text x="38.2227%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;QUEUE_TEST::KeyVal&gt;]&gt; (3,220,072 samples, 0.94%)</title><rect x="37.9727%" y="373" width="0.9395%" height="15" fill="rgb(221,13,13)" fg:x="130148420" fg:w="3220072"/><text x="38.2227%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;QUEUE_TEST::KeyVal&gt;&gt; (3,220,072 samples, 0.94%)</title><rect x="37.9727%" y="357" width="0.9395%" height="15" fill="rgb(238,131,9)" fg:x="130148420" fg:w="3220072"/><text x="38.2227%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;QUEUE_TEST::KeyVal&gt;&gt; (3,220,072 samples, 0.94%)</title><rect x="37.9727%" y="341" width="0.9395%" height="15" fill="rgb(211,50,8)" fg:x="130148420" fg:w="3220072"/><text x="38.2227%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,220,072 samples, 0.94%)</title><rect x="37.9727%" y="325" width="0.9395%" height="15" fill="rgb(245,182,24)" fg:x="130148420" fg:w="3220072"/><text x="38.2227%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,220,072 samples, 0.94%)</title><rect x="37.9727%" y="309" width="0.9395%" height="15" fill="rgb(242,14,37)" fg:x="130148420" fg:w="3220072"/><text x="38.2227%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (3,220,072 samples, 0.94%)</title><rect x="37.9727%" y="293" width="0.9395%" height="15" fill="rgb(246,228,12)" fg:x="130148420" fg:w="3220072"/><text x="38.2227%" y="303.50"></text></g><g><title>__GI_munmap (3,220,072 samples, 0.94%)</title><rect x="37.9727%" y="277" width="0.9395%" height="15" fill="rgb(213,55,15)" fg:x="130148420" fg:w="3220072"/><text x="38.2227%" y="287.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3,220,072 samples, 0.94%)</title><rect x="37.9727%" y="261" width="0.9395%" height="15" fill="rgb(209,9,3)" fg:x="130148420" fg:w="3220072"/><text x="38.2227%" y="271.50"></text></g><g><title>do_syscall_64 (3,220,072 samples, 0.94%)</title><rect x="37.9727%" y="245" width="0.9395%" height="15" fill="rgb(230,59,30)" fg:x="130148420" fg:w="3220072"/><text x="38.2227%" y="255.50"></text></g><g><title>__x64_sys_munmap (3,220,072 samples, 0.94%)</title><rect x="37.9727%" y="229" width="0.9395%" height="15" fill="rgb(209,121,21)" fg:x="130148420" fg:w="3220072"/><text x="38.2227%" y="239.50"></text></g><g><title>__vm_munmap (3,220,072 samples, 0.94%)</title><rect x="37.9727%" y="213" width="0.9395%" height="15" fill="rgb(220,109,13)" fg:x="130148420" fg:w="3220072"/><text x="38.2227%" y="223.50"></text></g><g><title>__do_munmap (3,220,072 samples, 0.94%)</title><rect x="37.9727%" y="197" width="0.9395%" height="15" fill="rgb(232,18,1)" fg:x="130148420" fg:w="3220072"/><text x="38.2227%" y="207.50"></text></g><g><title>unmap_region (3,220,072 samples, 0.94%)</title><rect x="37.9727%" y="181" width="0.9395%" height="15" fill="rgb(215,41,42)" fg:x="130148420" fg:w="3220072"/><text x="38.2227%" y="191.50"></text></g><g><title>tlb_finish_mmu (3,220,072 samples, 0.94%)</title><rect x="37.9727%" y="165" width="0.9395%" height="15" fill="rgb(224,123,36)" fg:x="130148420" fg:w="3220072"/><text x="38.2227%" y="175.50"></text></g><g><title>tlb_flush_mmu (3,220,072 samples, 0.94%)</title><rect x="37.9727%" y="149" width="0.9395%" height="15" fill="rgb(240,125,3)" fg:x="130148420" fg:w="3220072"/><text x="38.2227%" y="159.50"></text></g><g><title>flush_tlb_mm_range (3,220,072 samples, 0.94%)</title><rect x="37.9727%" y="133" width="0.9395%" height="15" fill="rgb(205,98,50)" fg:x="130148420" fg:w="3220072"/><text x="38.2227%" y="143.50"></text></g><g><title>flush_tlb_func_common.constprop.0 (3,220,072 samples, 0.94%)</title><rect x="37.9727%" y="117" width="0.9395%" height="15" fill="rgb(205,185,37)" fg:x="130148420" fg:w="3220072"/><text x="38.2227%" y="127.50"></text></g><g><title>native_flush_tlb_one_user (3,220,072 samples, 0.94%)</title><rect x="37.9727%" y="101" width="0.9395%" height="15" fill="rgb(238,207,15)" fg:x="130148420" fg:w="3220072"/><text x="38.2227%" y="111.50"></text></g><g><title>_start (2,017,071 samples, 0.59%)</title><rect x="38.9122%" y="421" width="0.5885%" height="15" fill="rgb(213,199,42)" fg:x="133368492" fg:w="2017071"/><text x="39.1622%" y="431.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2,017,071 samples, 0.59%)</title><rect x="38.9122%" y="405" width="0.5885%" height="15" fill="rgb(235,201,11)" fg:x="133368492" fg:w="2017071"/><text x="39.1622%" y="415.50"></text></g><g><title>amd_clear_divider (2,017,071 samples, 0.59%)</title><rect x="38.9122%" y="389" width="0.5885%" height="15" fill="rgb(207,46,11)" fg:x="133368492" fg:w="2017071"/><text x="39.1622%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,201,403 samples, 0.93%)</title><rect x="39.5007%" y="421" width="0.9341%" height="15" fill="rgb(241,35,35)" fg:x="135385563" fg:w="3201403"/><text x="39.7507%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3,201,403 samples, 0.93%)</title><rect x="39.5007%" y="405" width="0.9341%" height="15" fill="rgb(243,32,47)" fg:x="135385563" fg:w="3201403"/><text x="39.7507%" y="415.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3,201,403 samples, 0.93%)</title><rect x="39.5007%" y="389" width="0.9341%" height="15" fill="rgb(247,202,23)" fg:x="135385563" fg:w="3201403"/><text x="39.7507%" y="399.50"></text></g><g><title>alloc::alloc::realloc (3,201,403 samples, 0.93%)</title><rect x="39.5007%" y="373" width="0.9341%" height="15" fill="rgb(219,102,11)" fg:x="135385563" fg:w="3201403"/><text x="39.7507%" y="383.50"></text></g><g><title>__GI___libc_realloc (3,201,403 samples, 0.93%)</title><rect x="39.5007%" y="357" width="0.9341%" height="15" fill="rgb(243,110,44)" fg:x="135385563" fg:w="3201403"/><text x="39.7507%" y="367.50"></text></g><g><title>_int_realloc (3,201,403 samples, 0.93%)</title><rect x="39.5007%" y="341" width="0.9341%" height="15" fill="rgb(222,74,54)" fg:x="135385563" fg:w="3201403"/><text x="39.7507%" y="351.50"></text></g><g><title>__memmove_avx_unaligned_erms (3,201,403 samples, 0.93%)</title><rect x="39.5007%" y="325" width="0.9341%" height="15" fill="rgb(216,99,12)" fg:x="135385563" fg:w="3201403"/><text x="39.7507%" y="335.50"></text></g><g><title>page_fault (3,201,403 samples, 0.93%)</title><rect x="39.5007%" y="309" width="0.9341%" height="15" fill="rgb(226,22,26)" fg:x="135385563" fg:w="3201403"/><text x="39.7507%" y="319.50"></text></g><g><title>do_page_fault (3,201,403 samples, 0.93%)</title><rect x="39.5007%" y="293" width="0.9341%" height="15" fill="rgb(217,163,10)" fg:x="135385563" fg:w="3201403"/><text x="39.7507%" y="303.50"></text></g><g><title>__do_page_fault (3,201,403 samples, 0.93%)</title><rect x="39.5007%" y="277" width="0.9341%" height="15" fill="rgb(213,25,53)" fg:x="135385563" fg:w="3201403"/><text x="39.7507%" y="287.50"></text></g><g><title>do_user_addr_fault (3,201,403 samples, 0.93%)</title><rect x="39.5007%" y="261" width="0.9341%" height="15" fill="rgb(252,105,26)" fg:x="135385563" fg:w="3201403"/><text x="39.7507%" y="271.50"></text></g><g><title>handle_mm_fault (3,201,403 samples, 0.93%)</title><rect x="39.5007%" y="245" width="0.9341%" height="15" fill="rgb(220,39,43)" fg:x="135385563" fg:w="3201403"/><text x="39.7507%" y="255.50"></text></g><g><title>__handle_mm_fault (3,201,403 samples, 0.93%)</title><rect x="39.5007%" y="229" width="0.9341%" height="15" fill="rgb(229,68,48)" fg:x="135385563" fg:w="3201403"/><text x="39.7507%" y="239.50"></text></g><g><title>do_anonymous_page (3,201,403 samples, 0.93%)</title><rect x="39.5007%" y="213" width="0.9341%" height="15" fill="rgb(252,8,32)" fg:x="135385563" fg:w="3201403"/><text x="39.7507%" y="223.50"></text></g><g><title>alloc_pages_vma (3,201,403 samples, 0.93%)</title><rect x="39.5007%" y="197" width="0.9341%" height="15" fill="rgb(223,20,43)" fg:x="135385563" fg:w="3201403"/><text x="39.7507%" y="207.50"></text></g><g><title>__alloc_pages_nodemask (3,201,403 samples, 0.93%)</title><rect x="39.5007%" y="181" width="0.9341%" height="15" fill="rgb(229,81,49)" fg:x="135385563" fg:w="3201403"/><text x="39.7507%" y="191.50"></text></g><g><title>get_page_from_freelist (3,201,403 samples, 0.93%)</title><rect x="39.5007%" y="165" width="0.9341%" height="15" fill="rgb(236,28,36)" fg:x="135385563" fg:w="3201403"/><text x="39.7507%" y="175.50"></text></g><g><title>clear_page_erms (3,201,403 samples, 0.93%)</title><rect x="39.5007%" y="149" width="0.9341%" height="15" fill="rgb(249,185,26)" fg:x="135385563" fg:w="3201403"/><text x="39.7507%" y="159.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (2,881,271 samples, 0.84%)</title><rect x="43.9694%" y="373" width="0.8407%" height="15" fill="rgb(249,174,33)" fg:x="150701735" fg:w="2881271"/><text x="44.2194%" y="383.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (21,048,551 samples, 6.14%)</title><rect x="40.4347%" y="421" width="6.1412%" height="15" fill="rgb(233,201,37)" fg:x="138586966" fg:w="21048551"/><text x="40.6847%" y="431.50">core::nu..</text></g><g><title>core::num::dec2flt::dec2flt (18,126,472 samples, 5.29%)</title><rect x="41.2873%" y="405" width="5.2887%" height="15" fill="rgb(221,78,26)" fg:x="141509045" fg:w="18126472"/><text x="41.5373%" y="415.50">core::..</text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (8,933,782 samples, 2.61%)</title><rect x="43.9694%" y="389" width="2.6066%" height="15" fill="rgb(250,127,30)" fg:x="150701735" fg:w="8933782"/><text x="44.2194%" y="399.50">co..</text></g><g><title>core::num::dec2flt::number::Number::is_fast_path (6,052,511 samples, 1.77%)</title><rect x="44.8100%" y="373" width="1.7659%" height="15" fill="rgb(230,49,44)" fg:x="153583006" fg:w="6052511"/><text x="45.0600%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (3,200,720 samples, 0.93%)</title><rect x="48.3645%" y="405" width="0.9339%" height="15" fill="rgb(229,67,23)" fg:x="165765825" fg:w="3200720"/><text x="48.6145%" y="415.50"></text></g><g><title>core::num::dec2flt::lemire::compute_float (12,286,153 samples, 3.58%)</title><rect x="46.5759%" y="421" width="3.5847%" height="15" fill="rgb(249,83,47)" fg:x="159635517" fg:w="12286153"/><text x="46.8259%" y="431.50">core..</text></g><g><title>core::num::dec2flt::lemire::compute_product_approx (2,955,125 samples, 0.86%)</title><rect x="49.2984%" y="405" width="0.8622%" height="15" fill="rgb(215,43,3)" fg:x="168966545" fg:w="2955125"/><text x="49.5484%" y="415.50"></text></g><g><title>core::num::&lt;impl u8&gt;::saturating_sub (8,581,747 samples, 2.50%)</title><rect x="58.0112%" y="389" width="2.5038%" height="15" fill="rgb(238,154,13)" fg:x="198828950" fg:w="8581747"/><text x="58.2612%" y="399.50">co..</text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (2,812,525 samples, 0.82%)</title><rect x="67.3866%" y="357" width="0.8206%" height="15" fill="rgb(219,56,2)" fg:x="230962588" fg:w="2812525"/><text x="67.6366%" y="367.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (23,680,299 samples, 6.91%)</title><rect x="63.0449%" y="373" width="6.9091%" height="15" fill="rgb(233,0,4)" fg:x="216081711" fg:w="23680299"/><text x="63.2949%" y="383.50">&lt;[u8] as ..</text></g><g><title>core::num::dec2flt::parse::try_parse_digits::{{closure}} (5,986,897 samples, 1.75%)</title><rect x="68.2072%" y="357" width="1.7468%" height="15" fill="rgb(235,30,7)" fg:x="233775113" fg:w="5986897"/><text x="68.4572%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5,986,897 samples, 1.75%)</title><rect x="68.2072%" y="341" width="1.7468%" height="15" fill="rgb(250,79,13)" fg:x="233775113" fg:w="5986897"/><text x="68.4572%" y="351.50"></text></g><g><title>core::num::dec2flt::common::is_8digits (3,004,506 samples, 0.88%)</title><rect x="69.9540%" y="373" width="0.8766%" height="15" fill="rgb(211,146,34)" fg:x="239762010" fg:w="3004506"/><text x="70.2040%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::parse_8digits (11,956,939 samples, 3.49%)</title><rect x="70.8306%" y="373" width="3.4886%" height="15" fill="rgb(228,22,38)" fg:x="242766516" fg:w="11956939"/><text x="71.0806%" y="383.50">cor..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (11,956,939 samples, 3.49%)</title><rect x="70.8306%" y="357" width="3.4886%" height="15" fill="rgb(235,168,5)" fg:x="242766516" fg:w="11956939"/><text x="71.0806%" y="367.50">cor..</text></g><g><title>core::num::dec2flt::parse::try_parse_digits (50,251,292 samples, 14.66%)</title><rect x="60.5150%" y="389" width="14.6615%" height="15" fill="rgb(221,155,16)" fg:x="207410697" fg:w="50251292"/><text x="60.7650%" y="399.50">core::num::dec2flt::pa..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2,938,534 samples, 0.86%)</title><rect x="74.3192%" y="373" width="0.8574%" height="15" fill="rgb(215,215,53)" fg:x="254723455" fg:w="2938534"/><text x="74.5692%" y="383.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2,938,534 samples, 0.86%)</title><rect x="74.3192%" y="357" width="0.8574%" height="15" fill="rgb(223,4,10)" fg:x="254723455" fg:w="2938534"/><text x="74.5692%" y="367.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2,938,534 samples, 0.86%)</title><rect x="74.3192%" y="341" width="0.8574%" height="15" fill="rgb(234,103,6)" fg:x="254723455" fg:w="2938534"/><text x="74.5692%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2,938,534 samples, 0.86%)</title><rect x="74.3192%" y="325" width="0.8574%" height="15" fill="rgb(227,97,0)" fg:x="254723455" fg:w="2938534"/><text x="74.5692%" y="335.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (2,938,534 samples, 0.86%)</title><rect x="74.3192%" y="309" width="0.8574%" height="15" fill="rgb(234,150,53)" fg:x="254723455" fg:w="2938534"/><text x="74.5692%" y="319.50"></text></g><g><title>core::slice::index::get_noubcheck (2,938,534 samples, 0.86%)</title><rect x="74.3192%" y="293" width="0.8574%" height="15" fill="rgb(228,201,54)" fg:x="254723455" fg:w="2938534"/><text x="74.5692%" y="303.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (91,856,487 samples, 26.80%)</title><rect x="50.1606%" y="421" width="26.8004%" height="15" fill="rgb(222,22,37)" fg:x="171921670" fg:w="91856487"/><text x="50.4106%" y="431.50">core::num::dec2flt::parse::parse_number</text></g><g><title>core::num::dec2flt::parse::parse_partial_number (85,853,714 samples, 25.05%)</title><rect x="51.9120%" y="405" width="25.0490%" height="15" fill="rgb(237,53,32)" fg:x="177924443" fg:w="85853714"/><text x="52.1620%" y="415.50">core::num::dec2flt::parse::parse_partial..</text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (6,116,168 samples, 1.78%)</title><rect x="75.1766%" y="389" width="1.7845%" height="15" fill="rgb(233,25,53)" fg:x="257661989" fg:w="6116168"/><text x="75.4266%" y="399.50">c..</text></g><g><title>csv::byte_record::ByteRecord::validate (6,173,986 samples, 1.80%)</title><rect x="76.9610%" y="421" width="1.8013%" height="15" fill="rgb(210,40,34)" fg:x="263778157" fg:w="6173986"/><text x="77.2110%" y="431.50">c..</text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::is_ascii (3,211,400 samples, 0.94%)</title><rect x="77.8254%" y="405" width="0.9370%" height="15" fill="rgb(241,220,44)" fg:x="266740743" fg:w="3211400"/><text x="78.0754%" y="415.50"></text></g><g><title>core::slice::ascii::is_ascii (3,211,400 samples, 0.94%)</title><rect x="77.8254%" y="389" width="0.9370%" height="15" fill="rgb(235,28,35)" fg:x="266740743" fg:w="3211400"/><text x="78.0754%" y="399.50"></text></g><g><title>core::cmp::PartialOrd::gt (2,821,438 samples, 0.82%)</title><rect x="82.3764%" y="389" width="0.8232%" height="15" fill="rgb(210,56,17)" fg:x="282338890" fg:w="2821438"/><text x="82.6264%" y="399.50"></text></g><g><title>csv_core::reader::Dfa::get_output (6,021,496 samples, 1.76%)</title><rect x="83.1996%" y="389" width="1.7569%" height="15" fill="rgb(224,130,29)" fg:x="285160328" fg:w="6021496"/><text x="83.4496%" y="399.50"></text></g><g><title>csv_core::reader::Reader::read_record (66,210,564 samples, 19.32%)</title><rect x="78.7624%" y="421" width="19.3179%" height="15" fill="rgb(235,212,8)" fg:x="269952143" fg:w="66210564"/><text x="79.0124%" y="431.50">csv_core::reader::Reader::read..</text></g><g><title>csv_core::reader::Reader::read_record_dfa (63,107,120 samples, 18.41%)</title><rect x="79.6679%" y="405" width="18.4124%" height="15" fill="rgb(223,33,50)" fg:x="273055587" fg:w="63107120"/><text x="79.9179%" y="415.50">csv_core::reader::Reader::rea..</text></g><g><title>csv_core::reader::DfaClasses::scan_and_copy (44,980,883 samples, 13.12%)</title><rect x="84.9565%" y="389" width="13.1238%" height="15" fill="rgb(219,149,13)" fg:x="291181824" fg:w="44980883"/><text x="85.2065%" y="399.50">csv_core::reader::Df..</text></g><g><title>entry_SYSCALL_64_after_hwframe (218,928 samples, 0.06%)</title><rect x="98.0803%" y="421" width="0.0639%" height="15" fill="rgb(250,156,29)" fg:x="336162707" fg:w="218928"/><text x="98.3303%" y="431.50"></text></g><g><title>do_syscall_64 (218,928 samples, 0.06%)</title><rect x="98.0803%" y="405" width="0.0639%" height="15" fill="rgb(216,193,19)" fg:x="336162707" fg:w="218928"/><text x="98.3303%" y="415.50"></text></g><g><title>__x64_sys_execve (218,928 samples, 0.06%)</title><rect x="98.0803%" y="389" width="0.0639%" height="15" fill="rgb(216,135,14)" fg:x="336162707" fg:w="218928"/><text x="98.3303%" y="399.50"></text></g><g><title>__do_execve_file.isra.0 (218,928 samples, 0.06%)</title><rect x="98.0803%" y="373" width="0.0639%" height="15" fill="rgb(241,47,5)" fg:x="336162707" fg:w="218928"/><text x="98.3303%" y="383.50"></text></g><g><title>search_binary_handler (218,928 samples, 0.06%)</title><rect x="98.0803%" y="357" width="0.0639%" height="15" fill="rgb(233,42,35)" fg:x="336162707" fg:w="218928"/><text x="98.3303%" y="367.50"></text></g><g><title>load_elf_binary (218,928 samples, 0.06%)</title><rect x="98.0803%" y="341" width="0.0639%" height="15" fill="rgb(231,13,6)" fg:x="336162707" fg:w="218928"/><text x="98.3303%" y="351.50"></text></g><g><title>install_exec_creds (218,928 samples, 0.06%)</title><rect x="98.0803%" y="325" width="0.0639%" height="15" fill="rgb(207,181,40)" fg:x="336162707" fg:w="218928"/><text x="98.3303%" y="335.50"></text></g><g><title>commit_creds (218,928 samples, 0.06%)</title><rect x="98.0803%" y="309" width="0.0639%" height="15" fill="rgb(254,173,49)" fg:x="336162707" fg:w="218928"/><text x="98.3303%" y="319.50"></text></g><g><title>QUEUE_TEST (342,724,419 samples, 99.99%)</title><rect x="0.0000%" y="437" width="99.9947%" height="15" fill="rgb(221,1,38)" fg:x="0" fg:w="342724419"/><text x="0.2500%" y="447.50">QUEUE_TEST</text></g><g><title>page_fault (6,342,784 samples, 1.85%)</title><rect x="98.1441%" y="421" width="1.8506%" height="15" fill="rgb(206,124,46)" fg:x="336381635" fg:w="6342784"/><text x="98.3941%" y="431.50">p..</text></g><g><title>all (342,742,438 samples, 100%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(249,21,11)" fg:x="0" fg:w="342742438"/><text x="0.2500%" y="463.50"></text></g></svg></svg>