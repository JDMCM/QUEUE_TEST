<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="518" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="501.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="501.00"> </text><svg id="frames" x="10" width="1180" total_samples="7032119819"><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (23,344,541 samples, 0.33%)</title><rect x="0.9055%" y="405" width="0.3320%" height="15" fill="rgb(227,0,7)" fg:x="63676786" fg:w="23344541"/><text x="1.1555%" y="415.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (124,847,893 samples, 1.78%)</title><rect x="1.2375%" y="373" width="1.7754%" height="15" fill="rgb(217,0,24)" fg:x="87021327" fg:w="124847893"/><text x="1.4875%" y="383.50">&lt;..</text></g><g><title>&lt;QUEUE_TEST::csvreader::_::&lt;impl serde::de::Deserialize for QUEUE_TEST::csvreader::Rec&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (124,847,893 samples, 1.78%)</title><rect x="1.2375%" y="357" width="1.7754%" height="15" fill="rgb(221,193,54)" fg:x="87021327" fg:w="124847893"/><text x="1.4875%" y="367.50">&lt;..</text></g><g><title>&lt;serde::de::value::BorrowedBytesDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_identifier (124,847,893 samples, 1.78%)</title><rect x="1.2375%" y="341" width="1.7754%" height="15" fill="rgb(248,212,6)" fg:x="87021327" fg:w="124847893"/><text x="1.4875%" y="351.50">&lt;..</text></g><g><title>&lt;serde::de::value::BorrowedBytesDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (124,847,893 samples, 1.78%)</title><rect x="1.2375%" y="325" width="1.7754%" height="15" fill="rgb(208,68,35)" fg:x="87021327" fg:w="124847893"/><text x="1.4875%" y="335.50">&lt;..</text></g><g><title>serde::de::Visitor::visit_borrowed_bytes (124,847,893 samples, 1.78%)</title><rect x="1.2375%" y="309" width="1.7754%" height="15" fill="rgb(232,128,0)" fg:x="87021327" fg:w="124847893"/><text x="1.4875%" y="319.50">s..</text></g><g><title>&lt;QUEUE_TEST::csvreader::_::&lt;impl serde::de::Deserialize for QUEUE_TEST::csvreader::Rec&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_bytes (124,847,893 samples, 1.78%)</title><rect x="1.2375%" y="293" width="1.7754%" height="15" fill="rgb(207,160,47)" fg:x="87021327" fg:w="124847893"/><text x="1.4875%" y="303.50">&lt;..</text></g><g><title>&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::has_headers (5,932,640 samples, 0.08%)</title><rect x="3.0129%" y="373" width="0.0844%" height="15" fill="rgb(228,23,34)" fg:x="211869220" fg:w="5932640"/><text x="3.2629%" y="383.50"></text></g><g><title>&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::has_headers (3,146,210 samples, 0.04%)</title><rect x="3.0525%" y="357" width="0.0447%" height="15" fill="rgb(218,30,26)" fg:x="214655650" fg:w="3146210"/><text x="3.3025%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (3,146,210 samples, 0.04%)</title><rect x="3.0525%" y="341" width="0.0447%" height="15" fill="rgb(220,122,19)" fg:x="214655650" fg:w="3146210"/><text x="3.3025%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (17,636,021 samples, 0.25%)</title><rect x="4.3738%" y="261" width="0.2508%" height="15" fill="rgb(250,228,42)" fg:x="307574139" fg:w="17636021"/><text x="4.6238%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (17,636,021 samples, 0.25%)</title><rect x="4.3738%" y="245" width="0.2508%" height="15" fill="rgb(240,193,28)" fg:x="307574139" fg:w="17636021"/><text x="4.6238%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (17,636,021 samples, 0.25%)</title><rect x="4.3738%" y="229" width="0.2508%" height="15" fill="rgb(216,20,37)" fg:x="307574139" fg:w="17636021"/><text x="4.6238%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (2,872,302 samples, 0.04%)</title><rect x="4.5838%" y="213" width="0.0408%" height="15" fill="rgb(206,188,39)" fg:x="322337858" fg:w="2872302"/><text x="4.8338%" y="223.50"></text></g><g><title>serde::de::MapAccess::next_key (267,638,748 samples, 3.81%)</title><rect x="1.2375%" y="405" width="3.8059%" height="15" fill="rgb(217,207,13)" fg:x="87021327" fg:w="267638748"/><text x="1.4875%" y="415.50">serd..</text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::MapAccess&gt;::next_key_seed (267,638,748 samples, 3.81%)</title><rect x="1.2375%" y="389" width="3.8059%" height="15" fill="rgb(231,73,38)" fg:x="87021327" fg:w="267638748"/><text x="1.4875%" y="399.50">&lt;&amp;mu..</text></g><g><title>&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::next_header_bytes (136,858,215 samples, 1.95%)</title><rect x="3.0972%" y="373" width="1.9462%" height="15" fill="rgb(225,20,46)" fg:x="217801860" fg:w="136858215"/><text x="3.3472%" y="383.50">&lt;..</text></g><g><title>&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_header_bytes (136,858,215 samples, 1.95%)</title><rect x="3.0972%" y="357" width="1.9462%" height="15" fill="rgb(210,31,41)" fg:x="217801860" fg:w="136858215"/><text x="3.3472%" y="367.50">&lt;..</text></g><g><title>&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_header (136,858,215 samples, 1.95%)</title><rect x="3.0972%" y="341" width="1.9462%" height="15" fill="rgb(221,200,47)" fg:x="217801860" fg:w="136858215"/><text x="3.3472%" y="351.50">&lt;..</text></g><g><title>core::option::Option&lt;T&gt;::and_then (136,858,215 samples, 1.95%)</title><rect x="3.0972%" y="325" width="1.9462%" height="15" fill="rgb(226,26,5)" fg:x="217801860" fg:w="136858215"/><text x="3.3472%" y="335.50">c..</text></g><g><title>&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_header::{{closure}} (136,858,215 samples, 1.95%)</title><rect x="3.0972%" y="309" width="1.9462%" height="15" fill="rgb(249,33,26)" fg:x="217801860" fg:w="136858215"/><text x="3.3472%" y="319.50">&lt;..</text></g><g><title>&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (136,858,215 samples, 1.95%)</title><rect x="3.0972%" y="293" width="1.9462%" height="15" fill="rgb(235,183,28)" fg:x="217801860" fg:w="136858215"/><text x="3.3472%" y="303.50">&lt;..</text></g><g><title>&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (136,858,215 samples, 1.95%)</title><rect x="3.0972%" y="277" width="1.9462%" height="15" fill="rgb(221,5,38)" fg:x="217801860" fg:w="136858215"/><text x="3.3472%" y="287.50">&lt;..</text></g><g><title>csv::byte_record::Bounds::ends (29,449,915 samples, 0.42%)</title><rect x="4.6246%" y="261" width="0.4188%" height="15" fill="rgb(247,18,42)" fg:x="325210160" fg:w="29449915"/><text x="4.8746%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2,788,015 samples, 0.04%)</title><rect x="5.0038%" y="245" width="0.0396%" height="15" fill="rgb(241,131,45)" fg:x="351872060" fg:w="2788015"/><text x="5.2538%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2,788,015 samples, 0.04%)</title><rect x="5.0038%" y="229" width="0.0396%" height="15" fill="rgb(249,31,29)" fg:x="351872060" fg:w="2788015"/><text x="5.2538%" y="239.50"></text></g><g><title>&lt;QUEUE_TEST::csvreader::_::&lt;impl serde::de::Deserialize for QUEUE_TEST::csvreader::Rec&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (357,446,460 samples, 5.08%)</title><rect x="0.2074%" y="421" width="5.0831%" height="15" fill="rgb(225,111,53)" fg:x="14586979" fg:w="357446460"/><text x="0.4574%" y="431.50">&lt;QUEUE..</text></g><g><title>serde::de::MapAccess::next_value (17,373,364 samples, 0.25%)</title><rect x="5.0434%" y="405" width="0.2471%" height="15" fill="rgb(238,160,17)" fg:x="354660075" fg:w="17373364"/><text x="5.2934%" y="415.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::MapAccess&gt;::next_value_seed (17,373,364 samples, 0.25%)</title><rect x="5.0434%" y="389" width="0.2471%" height="15" fill="rgb(214,148,48)" fg:x="354660075" fg:w="17373364"/><text x="5.2934%" y="399.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_struct (374,779,700 samples, 5.33%)</title><rect x="0.0000%" y="437" width="5.3295%" height="15" fill="rgb(232,36,49)" fg:x="0" fg:w="374779700"/><text x="0.2500%" y="447.50">&lt;&amp;mut c..</text></g><g><title>&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::has_headers (2,746,261 samples, 0.04%)</title><rect x="5.2905%" y="421" width="0.0391%" height="15" fill="rgb(209,103,24)" fg:x="372033439" fg:w="2746261"/><text x="5.5405%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (2,863,755 samples, 0.04%)</title><rect x="7.3643%" y="261" width="0.0407%" height="15" fill="rgb(229,88,8)" fg:x="517865522" fg:w="2863755"/><text x="7.6143%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (20,147,509 samples, 0.29%)</title><rect x="7.1585%" y="309" width="0.2865%" height="15" fill="rgb(213,181,19)" fg:x="503394413" fg:w="20147509"/><text x="7.4085%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (20,147,509 samples, 0.29%)</title><rect x="7.1585%" y="293" width="0.2865%" height="15" fill="rgb(254,191,54)" fg:x="503394413" fg:w="20147509"/><text x="7.4085%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (20,147,509 samples, 0.29%)</title><rect x="7.1585%" y="277" width="0.2865%" height="15" fill="rgb(241,83,37)" fg:x="503394413" fg:w="20147509"/><text x="7.4085%" y="287.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (2,812,645 samples, 0.04%)</title><rect x="7.4050%" y="261" width="0.0400%" height="15" fill="rgb(233,36,39)" fg:x="520729277" fg:w="2812645"/><text x="7.6550%" y="271.50"></text></g><g><title>core::slice::index::get_noubcheck (2,812,645 samples, 0.04%)</title><rect x="7.4050%" y="245" width="0.0400%" height="15" fill="rgb(226,3,54)" fg:x="520729277" fg:w="2812645"/><text x="7.6550%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (13,715,763 samples, 0.20%)</title><rect x="7.5246%" y="277" width="0.1950%" height="15" fill="rgb(245,192,40)" fg:x="529139719" fg:w="13715763"/><text x="7.7746%" y="287.50"></text></g><g><title>&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (105,591,177 samples, 1.50%)</title><rect x="6.2560%" y="341" width="1.5016%" height="15" fill="rgb(238,167,29)" fg:x="439928564" fg:w="105591177"/><text x="6.5060%" y="351.50"></text></g><g><title>&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (105,591,177 samples, 1.50%)</title><rect x="6.2560%" y="325" width="1.5016%" height="15" fill="rgb(232,182,51)" fg:x="439928564" fg:w="105591177"/><text x="6.5060%" y="335.50"></text></g><g><title>csv::byte_record::Bounds::ends (21,977,819 samples, 0.31%)</title><rect x="7.4450%" y="309" width="0.3125%" height="15" fill="rgb(231,60,39)" fg:x="523541922" fg:w="21977819"/><text x="7.6950%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (16,380,022 samples, 0.23%)</title><rect x="7.5246%" y="293" width="0.2329%" height="15" fill="rgb(208,69,12)" fg:x="529139719" fg:w="16380022"/><text x="7.7746%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2,664,259 samples, 0.04%)</title><rect x="7.7197%" y="277" width="0.0379%" height="15" fill="rgb(235,93,37)" fg:x="542855482" fg:w="2664259"/><text x="7.9697%" y="287.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2,664,259 samples, 0.04%)</title><rect x="7.7197%" y="261" width="0.0379%" height="15" fill="rgb(213,116,39)" fg:x="542855482" fg:w="2664259"/><text x="7.9697%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2,664,259 samples, 0.04%)</title><rect x="7.7197%" y="245" width="0.0379%" height="15" fill="rgb(222,207,29)" fg:x="542855482" fg:w="2664259"/><text x="7.9697%" y="255.50"></text></g><g><title>core::ptr::read (9,091,036 samples, 0.13%)</title><rect x="7.7575%" y="309" width="0.1293%" height="15" fill="rgb(206,96,30)" fg:x="545519741" fg:w="9091036"/><text x="8.0075%" y="319.50"></text></g><g><title>&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::next_field (149,335,085 samples, 2.12%)</title><rect x="5.9284%" y="389" width="2.1236%" height="15" fill="rgb(218,138,4)" fg:x="416888854" fg:w="149335085"/><text x="6.1784%" y="399.50">&lt;..</text></g><g><title>&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_field (149,335,085 samples, 2.12%)</title><rect x="5.9284%" y="373" width="2.1236%" height="15" fill="rgb(250,191,14)" fg:x="416888854" fg:w="149335085"/><text x="6.1784%" y="383.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (137,238,428 samples, 1.95%)</title><rect x="6.1004%" y="357" width="1.9516%" height="15" fill="rgb(239,60,40)" fg:x="428985511" fg:w="137238428"/><text x="6.3504%" y="367.50">&lt;..</text></g><g><title>core::option::Option&lt;T&gt;::take (20,704,198 samples, 0.29%)</title><rect x="7.7575%" y="341" width="0.2944%" height="15" fill="rgb(206,27,48)" fg:x="545519741" fg:w="20704198"/><text x="8.0075%" y="351.50"></text></g><g><title>core::mem::replace (20,704,198 samples, 0.29%)</title><rect x="7.7575%" y="325" width="0.2944%" height="15" fill="rgb(225,35,8)" fg:x="545519741" fg:w="20704198"/><text x="8.0075%" y="335.50"></text></g><g><title>core::ptr::write (11,613,162 samples, 0.17%)</title><rect x="7.8868%" y="309" width="0.1651%" height="15" fill="rgb(250,213,24)" fg:x="554610777" fg:w="11613162"/><text x="8.1368%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for f64&gt;::deserialize::PrimitiveVisitor as serde::de::Visitor&gt;::visit_f64 (25,923,487 samples, 0.37%)</title><rect x="8.0520%" y="389" width="0.3686%" height="15" fill="rgb(247,123,22)" fg:x="566223939" fg:w="25923487"/><text x="8.3020%" y="399.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (234,771,807 samples, 3.34%)</title><rect x="5.3295%" y="437" width="3.3386%" height="15" fill="rgb(231,138,38)" fg:x="374779700" fg:w="234771807"/><text x="5.5795%" y="447.50">&lt;co..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for f64&gt;::deserialize (192,662,653 samples, 2.74%)</title><rect x="5.9284%" y="421" width="2.7398%" height="15" fill="rgb(231,145,46)" fg:x="416888854" fg:w="192662653"/><text x="6.1784%" y="431.50">se..</text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_f64 (192,662,653 samples, 2.74%)</title><rect x="5.9284%" y="405" width="2.7398%" height="15" fill="rgb(251,118,11)" fg:x="416888854" fg:w="192662653"/><text x="6.1784%" y="415.50">&lt;&amp;..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (17,404,081 samples, 0.25%)</title><rect x="8.4206%" y="389" width="0.2475%" height="15" fill="rgb(217,147,25)" fg:x="592147426" fg:w="17404081"/><text x="8.6706%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (2,732,561 samples, 0.04%)</title><rect x="8.7940%" y="421" width="0.0389%" height="15" fill="rgb(247,81,37)" fg:x="618406804" fg:w="2732561"/><text x="9.0440%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (8,431,604 samples, 0.12%)</title><rect x="9.0807%" y="341" width="0.1199%" height="15" fill="rgb(209,12,38)" fg:x="638564166" fg:w="8431604"/><text x="9.3307%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (17,142,107 samples, 0.24%)</title><rect x="9.0807%" y="357" width="0.2438%" height="15" fill="rgb(227,1,9)" fg:x="638564166" fg:w="17142107"/><text x="9.3307%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (8,710,503 samples, 0.12%)</title><rect x="9.2006%" y="341" width="0.1239%" height="15" fill="rgb(248,47,43)" fg:x="646995770" fg:w="8710503"/><text x="9.4506%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (8,710,503 samples, 0.12%)</title><rect x="9.2006%" y="325" width="0.1239%" height="15" fill="rgb(221,10,30)" fg:x="646995770" fg:w="8710503"/><text x="9.4506%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (5,896,085 samples, 0.08%)</title><rect x="9.2406%" y="309" width="0.0838%" height="15" fill="rgb(210,229,1)" fg:x="649810188" fg:w="5896085"/><text x="9.4906%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (5,896,085 samples, 0.08%)</title><rect x="9.2406%" y="293" width="0.0838%" height="15" fill="rgb(222,148,37)" fg:x="649810188" fg:w="5896085"/><text x="9.4906%" y="303.50"></text></g><g><title>core::slice::index::get_offset_len_mut_noubcheck (5,896,085 samples, 0.08%)</title><rect x="9.2406%" y="277" width="0.0838%" height="15" fill="rgb(234,67,33)" fg:x="649810188" fg:w="5896085"/><text x="9.4906%" y="287.50"></text></g><g><title>core::slice::index::get_mut_noubcheck (5,896,085 samples, 0.08%)</title><rect x="9.2406%" y="261" width="0.0838%" height="15" fill="rgb(247,98,35)" fg:x="649810188" fg:w="5896085"/><text x="9.4906%" y="271.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (3,062,807 samples, 0.04%)</title><rect x="9.3244%" y="357" width="0.0436%" height="15" fill="rgb(247,138,52)" fg:x="655706273" fg:w="3062807"/><text x="9.5744%" y="367.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (3,062,807 samples, 0.04%)</title><rect x="9.3244%" y="341" width="0.0436%" height="15" fill="rgb(213,79,30)" fg:x="655706273" fg:w="3062807"/><text x="9.5744%" y="351.50"></text></g><g><title>core::cmp::min (3,062,807 samples, 0.04%)</title><rect x="9.3244%" y="325" width="0.0436%" height="15" fill="rgb(246,177,23)" fg:x="655706273" fg:w="3062807"/><text x="9.5744%" y="335.50"></text></g><g><title>core::cmp::Ord::min (3,062,807 samples, 0.04%)</title><rect x="9.3244%" y="309" width="0.0436%" height="15" fill="rgb(230,62,27)" fg:x="655706273" fg:w="3062807"/><text x="9.5744%" y="319.50"></text></g><g><title>core::cmp::min_by (3,062,807 samples, 0.04%)</title><rect x="9.3244%" y="293" width="0.0436%" height="15" fill="rgb(216,154,8)" fg:x="655706273" fg:w="3062807"/><text x="9.5744%" y="303.50"></text></g><g><title>entry_SYSCALL_64 (3,132,092 samples, 0.04%)</title><rect x="9.3680%" y="229" width="0.0445%" height="15" fill="rgb(244,35,45)" fg:x="658769080" fg:w="3132092"/><text x="9.6180%" y="239.50"></text></g><g><title>amd_clear_divider (6,395,092 samples, 0.09%)</title><rect x="9.4125%" y="213" width="0.0909%" height="15" fill="rgb(251,115,12)" fg:x="661901172" fg:w="6395092"/><text x="9.6625%" y="223.50"></text></g><g><title>copy_page_to_iter (97,291,016 samples, 1.38%)</title><rect x="9.8415%" y="69" width="1.3835%" height="15" fill="rgb(240,54,50)" fg:x="692064559" fg:w="97291016"/><text x="10.0915%" y="79.50"></text></g><g><title>copy_user_enhanced_fast_string (97,291,016 samples, 1.38%)</title><rect x="9.8415%" y="53" width="1.3835%" height="15" fill="rgb(233,84,52)" fg:x="692064559" fg:w="97291016"/><text x="10.0915%" y="63.50"></text></g><g><title>copyout (2,893,872 samples, 0.04%)</title><rect x="11.2250%" y="69" width="0.0412%" height="15" fill="rgb(207,117,47)" fg:x="789355575" fg:w="2893872"/><text x="11.4750%" y="79.50"></text></g><g><title>mark_page_accessed (2,869,085 samples, 0.04%)</title><rect x="11.2662%" y="69" width="0.0408%" height="15" fill="rgb(249,43,39)" fg:x="792249447" fg:w="2869085"/><text x="11.5162%" y="79.50"></text></g><g><title>PageHuge (2,866,540 samples, 0.04%)</title><rect x="11.3476%" y="53" width="0.0408%" height="15" fill="rgb(209,38,44)" fg:x="797975271" fg:w="2866540"/><text x="11.5976%" y="63.50"></text></g><g><title>__vfs_read (150,811,102 samples, 2.14%)</title><rect x="9.6292%" y="149" width="2.1446%" height="15" fill="rgb(236,212,23)" fg:x="677136643" fg:w="150811102"/><text x="9.8792%" y="159.50">_..</text></g><g><title>new_sync_read (150,811,102 samples, 2.14%)</title><rect x="9.6292%" y="133" width="2.1446%" height="15" fill="rgb(242,79,21)" fg:x="677136643" fg:w="150811102"/><text x="9.8792%" y="143.50">n..</text></g><g><title>ext4_file_read_iter (150,811,102 samples, 2.14%)</title><rect x="9.6292%" y="117" width="2.1446%" height="15" fill="rgb(211,96,35)" fg:x="677136643" fg:w="150811102"/><text x="9.8792%" y="127.50">e..</text></g><g><title>generic_file_read_iter (147,631,406 samples, 2.10%)</title><rect x="9.6744%" y="101" width="2.0994%" height="15" fill="rgb(253,215,40)" fg:x="680316339" fg:w="147631406"/><text x="9.9244%" y="111.50">g..</text></g><g><title>generic_file_buffered_read (147,631,406 samples, 2.10%)</title><rect x="9.6744%" y="85" width="2.0994%" height="15" fill="rgb(211,81,21)" fg:x="680316339" fg:w="147631406"/><text x="9.9244%" y="95.50">g..</text></g><g><title>pagecache_get_page (32,829,213 samples, 0.47%)</title><rect x="11.3070%" y="69" width="0.4668%" height="15" fill="rgb(208,190,38)" fg:x="795118532" fg:w="32829213"/><text x="11.5570%" y="79.50"></text></g><g><title>find_get_entry (27,105,934 samples, 0.39%)</title><rect x="11.3883%" y="53" width="0.3855%" height="15" fill="rgb(235,213,38)" fg:x="800841811" fg:w="27105934"/><text x="11.6383%" y="63.50"></text></g><g><title>xas_load (5,890,254 samples, 0.08%)</title><rect x="11.6900%" y="37" width="0.0838%" height="15" fill="rgb(237,122,38)" fg:x="822057491" fg:w="5890254"/><text x="11.9400%" y="47.50"></text></g><g><title>__fsnotify_parent (2,737,632 samples, 0.04%)</title><rect x="11.7738%" y="117" width="0.0389%" height="15" fill="rgb(244,218,35)" fg:x="827947745" fg:w="2737632"/><text x="12.0238%" y="127.50"></text></g><g><title>dput (2,737,632 samples, 0.04%)</title><rect x="11.7738%" y="101" width="0.0389%" height="15" fill="rgb(240,68,47)" fg:x="827947745" fg:w="2737632"/><text x="12.0238%" y="111.50"></text></g><g><title>apparmor_file_permission (2,881,593 samples, 0.04%)</title><rect x="11.8127%" y="117" width="0.0410%" height="15" fill="rgb(210,16,53)" fg:x="830685377" fg:w="2881593"/><text x="12.0627%" y="127.50"></text></g><g><title>common_file_perm (2,881,593 samples, 0.04%)</title><rect x="11.8127%" y="101" width="0.0410%" height="15" fill="rgb(235,124,12)" fg:x="830685377" fg:w="2881593"/><text x="12.0627%" y="111.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (174,536,851 samples, 2.48%)</title><rect x="9.4125%" y="229" width="2.4820%" height="15" fill="rgb(224,169,11)" fg:x="661901172" fg:w="174536851"/><text x="9.6625%" y="239.50">en..</text></g><g><title>do_syscall_64 (168,141,759 samples, 2.39%)</title><rect x="9.5035%" y="213" width="2.3911%" height="15" fill="rgb(250,166,2)" fg:x="668296264" fg:w="168141759"/><text x="9.7535%" y="223.50">do..</text></g><g><title>__x64_sys_read (162,210,135 samples, 2.31%)</title><rect x="9.5878%" y="197" width="2.3067%" height="15" fill="rgb(242,216,29)" fg:x="674227888" fg:w="162210135"/><text x="9.8378%" y="207.50">_..</text></g><g><title>ksys_read (162,210,135 samples, 2.31%)</title><rect x="9.5878%" y="181" width="2.3067%" height="15" fill="rgb(230,116,27)" fg:x="674227888" fg:w="162210135"/><text x="9.8378%" y="191.50">k..</text></g><g><title>vfs_read (162,210,135 samples, 2.31%)</title><rect x="9.5878%" y="165" width="2.3067%" height="15" fill="rgb(228,99,48)" fg:x="674227888" fg:w="162210135"/><text x="9.8378%" y="175.50">v..</text></g><g><title>rw_verify_area (8,490,278 samples, 0.12%)</title><rect x="11.7738%" y="149" width="0.1207%" height="15" fill="rgb(253,11,6)" fg:x="827947745" fg:w="8490278"/><text x="12.0238%" y="159.50"></text></g><g><title>security_file_permission (8,490,278 samples, 0.12%)</title><rect x="11.7738%" y="133" width="0.1207%" height="15" fill="rgb(247,143,39)" fg:x="827947745" fg:w="8490278"/><text x="12.0238%" y="143.50"></text></g><g><title>fsnotify (2,871,053 samples, 0.04%)</title><rect x="11.8537%" y="117" width="0.0408%" height="15" fill="rgb(236,97,10)" fg:x="833566970" fg:w="2871053"/><text x="12.1037%" y="127.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (180,604,951 samples, 2.57%)</title><rect x="9.3680%" y="357" width="2.5683%" height="15" fill="rgb(233,208,19)" fg:x="658769080" fg:w="180604951"/><text x="9.6180%" y="367.50">&lt;s..</text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (180,604,951 samples, 2.57%)</title><rect x="9.3680%" y="341" width="2.5683%" height="15" fill="rgb(216,164,2)" fg:x="658769080" fg:w="180604951"/><text x="9.6180%" y="351.50">st..</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (180,604,951 samples, 2.57%)</title><rect x="9.3680%" y="325" width="2.5683%" height="15" fill="rgb(220,129,5)" fg:x="658769080" fg:w="180604951"/><text x="9.6180%" y="335.50">st..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (180,604,951 samples, 2.57%)</title><rect x="9.3680%" y="309" width="2.5683%" height="15" fill="rgb(242,17,10)" fg:x="658769080" fg:w="180604951"/><text x="9.6180%" y="319.50">&lt;s..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (180,604,951 samples, 2.57%)</title><rect x="9.3680%" y="293" width="2.5683%" height="15" fill="rgb(242,107,0)" fg:x="658769080" fg:w="180604951"/><text x="9.6180%" y="303.50">&lt;&amp;..</text></g><g><title>std::sys::pal::unix::fs::File::read_buf (180,604,951 samples, 2.57%)</title><rect x="9.3680%" y="277" width="2.5683%" height="15" fill="rgb(251,28,31)" fg:x="658769080" fg:w="180604951"/><text x="9.6180%" y="287.50">st..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::read_buf (180,604,951 samples, 2.57%)</title><rect x="9.3680%" y="261" width="2.5683%" height="15" fill="rgb(233,223,10)" fg:x="658769080" fg:w="180604951"/><text x="9.6180%" y="271.50">st..</text></g><g><title>__libc_read (180,604,951 samples, 2.57%)</title><rect x="9.3680%" y="245" width="2.5683%" height="15" fill="rgb(215,21,27)" fg:x="658769080" fg:w="180604951"/><text x="9.6180%" y="255.50">__..</text></g><g><title>syscall_return_via_sysret (2,936,008 samples, 0.04%)</title><rect x="11.8945%" y="229" width="0.0418%" height="15" fill="rgb(232,23,21)" fg:x="836438023" fg:w="2936008"/><text x="12.1445%" y="239.50"></text></g><g><title>&lt;csv::reader::DeserializeRecordsIter&lt;R,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (232,719,605 samples, 3.31%)</title><rect x="8.6681%" y="437" width="3.3094%" height="15" fill="rgb(244,5,23)" fg:x="609551507" fg:w="232719605"/><text x="8.9181%" y="447.50">&lt;cs..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_record (221,131,747 samples, 3.14%)</title><rect x="8.8329%" y="421" width="3.1446%" height="15" fill="rgb(226,81,46)" fg:x="621139365" fg:w="221131747"/><text x="9.0829%" y="431.50">csv..</text></g><g><title>csv::string_record::StringRecord::read (221,131,747 samples, 3.14%)</title><rect x="8.8329%" y="405" width="3.1446%" height="15" fill="rgb(247,70,30)" fg:x="621139365" fg:w="221131747"/><text x="9.0829%" y="415.50">csv..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (221,131,747 samples, 3.14%)</title><rect x="8.8329%" y="389" width="3.1446%" height="15" fill="rgb(212,68,19)" fg:x="621139365" fg:w="221131747"/><text x="9.0829%" y="399.50">csv..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record_impl (212,420,485 samples, 3.02%)</title><rect x="8.9568%" y="373" width="3.0207%" height="15" fill="rgb(240,187,13)" fg:x="629850627" fg:w="212420485"/><text x="9.2068%" y="383.50">csv..</text></g><g><title>csv::reader::ReaderState::add_record (2,897,081 samples, 0.04%)</title><rect x="11.9363%" y="357" width="0.0412%" height="15" fill="rgb(223,113,26)" fg:x="839374031" fg:w="2897081"/><text x="12.1863%" y="367.50"></text></g><g><title>csv::byte_record::Position::record (2,897,081 samples, 0.04%)</title><rect x="11.9363%" y="341" width="0.0412%" height="15" fill="rgb(206,192,2)" fg:x="839374031" fg:w="2897081"/><text x="12.1863%" y="351.50"></text></g><g><title>QUEUE_TEST::collisionhandling::fast_forward (20,791,898 samples, 0.30%)</title><rect x="11.9775%" y="421" width="0.2957%" height="15" fill="rgb(241,108,4)" fg:x="842271112" fg:w="20791898"/><text x="12.2275%" y="431.50"></text></g><g><title>&lt;QUEUE_TEST::vectors::Vector as core::ops::arith::AddAssign&gt;::add_assign (2,995,514 samples, 0.04%)</title><rect x="12.2306%" y="405" width="0.0426%" height="15" fill="rgb(247,173,49)" fg:x="860067496" fg:w="2995514"/><text x="12.4806%" y="415.50"></text></g><g><title>&lt;QUEUE_TEST::vectors::Vector as core::ops::arith::Mul&lt;f64&gt;&gt;::mul (2,752,352 samples, 0.04%)</title><rect x="12.2732%" y="405" width="0.0391%" height="15" fill="rgb(224,114,35)" fg:x="863063010" fg:w="2752352"/><text x="12.5232%" y="415.50"></text></g><g><title>QUEUE_TEST::collisionhandling::beta2 (5,988,652 samples, 0.09%)</title><rect x="12.3123%" y="373" width="0.0852%" height="15" fill="rgb(245,159,27)" fg:x="865815362" fg:w="5988652"/><text x="12.5623%" y="383.50"></text></g><g><title>QUEUE_TEST::collisionhandling::b_and_k2 (17,681,771 samples, 0.25%)</title><rect x="12.3123%" y="389" width="0.2514%" height="15" fill="rgb(245,172,44)" fg:x="865815362" fg:w="17681771"/><text x="12.5623%" y="399.50"></text></g><g><title>QUEUE_TEST::collisionhandling::omega_0_sq (11,693,119 samples, 0.17%)</title><rect x="12.3975%" y="373" width="0.1663%" height="15" fill="rgb(236,23,11)" fg:x="871804014" fg:w="11693119"/><text x="12.6475%" y="383.50"></text></g><g><title>&lt;QUEUE_TEST::vectors::Vector as core::ops::arith::Mul&gt;::mul (11,764,634 samples, 0.17%)</title><rect x="12.5637%" y="373" width="0.1673%" height="15" fill="rgb(205,117,38)" fg:x="883497133" fg:w="11764634"/><text x="12.8137%" y="383.50"></text></g><g><title>QUEUE_TEST::vectors::Vector::dot (11,764,634 samples, 0.17%)</title><rect x="12.5637%" y="357" width="0.1673%" height="15" fill="rgb(237,72,25)" fg:x="883497133" fg:w="11764634"/><text x="12.8137%" y="367.50"></text></g><g><title>QUEUE_TEST::vectors::Vector::unit_vector (26,132,260 samples, 0.37%)</title><rect x="12.7310%" y="373" width="0.3716%" height="15" fill="rgb(244,70,9)" fg:x="895261767" fg:w="26132260"/><text x="12.9810%" y="383.50"></text></g><g><title>&lt;&amp;QUEUE_TEST::vectors::Vector as core::ops::arith::Div&lt;f64&gt;&gt;::div (26,132,260 samples, 0.37%)</title><rect x="12.7310%" y="357" width="0.3716%" height="15" fill="rgb(217,125,39)" fg:x="895261767" fg:w="26132260"/><text x="12.9810%" y="367.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (5,759,131 samples, 0.08%)</title><rect x="13.0208%" y="341" width="0.0819%" height="15" fill="rgb(235,36,10)" fg:x="915634896" fg:w="5759131"/><text x="13.2708%" y="351.50"></text></g><g><title>prepare_exit_to_usermode (5,759,131 samples, 0.08%)</title><rect x="13.0208%" y="325" width="0.0819%" height="15" fill="rgb(251,123,47)" fg:x="915634896" fg:w="5759131"/><text x="13.2708%" y="335.50"></text></g><g><title>exit_to_usermode_loop (5,759,131 samples, 0.08%)</title><rect x="13.0208%" y="309" width="0.0819%" height="15" fill="rgb(221,13,13)" fg:x="915634896" fg:w="5759131"/><text x="13.2708%" y="319.50"></text></g><g><title>task_work_run (5,759,131 samples, 0.08%)</title><rect x="13.0208%" y="293" width="0.0819%" height="15" fill="rgb(238,131,9)" fg:x="915634896" fg:w="5759131"/><text x="13.2708%" y="303.50"></text></g><g><title>task_numa_work (5,759,131 samples, 0.08%)</title><rect x="13.0208%" y="277" width="0.0819%" height="15" fill="rgb(211,50,8)" fg:x="915634896" fg:w="5759131"/><text x="13.2708%" y="287.50"></text></g><g><title>change_prot_numa (5,759,131 samples, 0.08%)</title><rect x="13.0208%" y="261" width="0.0819%" height="15" fill="rgb(245,182,24)" fg:x="915634896" fg:w="5759131"/><text x="13.2708%" y="271.50"></text></g><g><title>change_protection (5,759,131 samples, 0.08%)</title><rect x="13.0208%" y="245" width="0.0819%" height="15" fill="rgb(242,14,37)" fg:x="915634896" fg:w="5759131"/><text x="13.2708%" y="255.50"></text></g><g><title>change_protection_range (5,759,131 samples, 0.08%)</title><rect x="13.0208%" y="229" width="0.0819%" height="15" fill="rgb(246,228,12)" fg:x="915634896" fg:w="5759131"/><text x="13.2708%" y="239.50"></text></g><g><title>change_pte_range (5,759,131 samples, 0.08%)</title><rect x="13.0208%" y="213" width="0.0819%" height="15" fill="rgb(213,55,15)" fg:x="915634896" fg:w="5759131"/><text x="13.2708%" y="223.50"></text></g><g><title>QUEUE_TEST::particle::Particle::relative_speed (43,654,777 samples, 0.62%)</title><rect x="12.5637%" y="389" width="0.6208%" height="15" fill="rgb(209,9,3)" fg:x="883497133" fg:w="43654777"/><text x="12.8137%" y="399.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::abs (5,757,883 samples, 0.08%)</title><rect x="13.1026%" y="373" width="0.0819%" height="15" fill="rgb(230,59,30)" fg:x="921394027" fg:w="5757883"/><text x="13.3526%" y="383.50"></text></g><g><title>QUEUE_TEST::vectors::square (2,977,851 samples, 0.04%)</title><rect x="13.2259%" y="373" width="0.0423%" height="15" fill="rgb(209,121,21)" fg:x="930062136" fg:w="2977851"/><text x="13.4759%" y="383.50"></text></g><g><title>QUEUE_TEST::collisionhandling::compute_acc (72,966,180 samples, 1.04%)</title><rect x="12.3123%" y="405" width="1.0376%" height="15" fill="rgb(220,109,13)" fg:x="865815362" fg:w="72966180"/><text x="12.5623%" y="415.50"></text></g><g><title>QUEUE_TEST::vectors::Vector::mag (11,629,632 samples, 0.17%)</title><rect x="13.1845%" y="389" width="0.1654%" height="15" fill="rgb(232,18,1)" fg:x="927151910" fg:w="11629632"/><text x="13.4345%" y="399.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (5,741,555 samples, 0.08%)</title><rect x="13.2683%" y="373" width="0.0816%" height="15" fill="rgb(215,41,42)" fg:x="933039987" fg:w="5741555"/><text x="13.5183%" y="383.50"></text></g><g><title>QUEUE_TEST::collisionhandling::omega_0_from_k (23,988,418 samples, 0.34%)</title><rect x="13.5937%" y="373" width="0.3411%" height="15" fill="rgb(224,123,36)" fg:x="955926670" fg:w="23988418"/><text x="13.8437%" y="383.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (15,142,535 samples, 0.22%)</title><rect x="13.7195%" y="357" width="0.2153%" height="15" fill="rgb(240,125,3)" fg:x="964772553" fg:w="15142535"/><text x="13.9695%" y="367.50"></text></g><g><title>QUEUE_TEST::collisionhandling::omega_l (38,384,401 samples, 0.55%)</title><rect x="13.5142%" y="389" width="0.5458%" height="15" fill="rgb(205,98,50)" fg:x="950336122" fg:w="38384401"/><text x="13.7642%" y="399.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (8,805,435 samples, 0.13%)</title><rect x="13.9348%" y="373" width="0.1252%" height="15" fill="rgb(205,185,37)" fg:x="979915088" fg:w="8805435"/><text x="14.1848%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (3,013,012 samples, 0.04%)</title><rect x="14.0601%" y="389" width="0.0428%" height="15" fill="rgb(238,207,15)" fg:x="988720523" fg:w="3013012"/><text x="14.3101%" y="399.50"></text></g><g><title>QUEUE_TEST::collisionhandling::process_pair_get_dv (131,743,778 samples, 1.87%)</title><rect x="12.2732%" y="421" width="1.8735%" height="15" fill="rgb(213,199,42)" fg:x="863063010" fg:w="131743778"/><text x="12.5232%" y="431.50">Q..</text></g><g><title>QUEUE_TEST::collisionhandling::get_next_time (56,025,246 samples, 0.80%)</title><rect x="13.3499%" y="405" width="0.7967%" height="15" fill="rgb(235,201,11)" fg:x="938781542" fg:w="56025246"/><text x="13.5999%" y="415.50"></text></g><g><title>core::fmt::Arguments::new_v1 (3,073,253 samples, 0.04%)</title><rect x="14.1029%" y="389" width="0.0437%" height="15" fill="rgb(207,46,11)" fg:x="991733535" fg:w="3073253"/><text x="14.3529%" y="399.50"></text></g><g><title>QUEUE_TEST::collisionhandling::process_collision (155,585,143 samples, 2.21%)</title><rect x="11.9775%" y="437" width="2.2125%" height="15" fill="rgb(241,35,35)" fg:x="842271112" fg:w="155585143"/><text x="12.2275%" y="447.50">Q..</text></g><g><title>QUEUE_TEST::particle::Particle::apply_dv (3,049,467 samples, 0.04%)</title><rect x="14.1466%" y="421" width="0.0434%" height="15" fill="rgb(243,32,47)" fg:x="994806788" fg:w="3049467"/><text x="14.3966%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3,160,233 samples, 0.04%)</title><rect x="14.1900%" y="389" width="0.0449%" height="15" fill="rgb(247,202,23)" fg:x="997856255" fg:w="3160233"/><text x="14.4400%" y="399.50"></text></g><g><title>entry_SYSCALL_64 (2,837,970 samples, 0.04%)</title><rect x="14.4035%" y="373" width="0.0404%" height="15" fill="rgb(219,102,11)" fg:x="1012872585" fg:w="2837970"/><text x="14.6535%" y="383.50"></text></g><g><title>__do_page_fault (2,893,696 samples, 0.04%)</title><rect x="14.4439%" y="357" width="0.0411%" height="15" fill="rgb(243,110,44)" fg:x="1015710555" fg:w="2893696"/><text x="14.6939%" y="367.50"></text></g><g><title>__count_memcg_events (2,884,687 samples, 0.04%)</title><rect x="14.5676%" y="293" width="0.0410%" height="15" fill="rgb(222,74,54)" fg:x="1024413483" fg:w="2884687"/><text x="14.8176%" y="303.50"></text></g><g><title>__mod_node_page_state (2,903,047 samples, 0.04%)</title><rect x="14.6859%" y="261" width="0.0413%" height="15" fill="rgb(216,99,12)" fg:x="1032732655" fg:w="2903047"/><text x="14.9359%" y="271.50"></text></g><g><title>clear_page_erms (17,235,568 samples, 0.25%)</title><rect x="14.7688%" y="213" width="0.2451%" height="15" fill="rgb(226,22,26)" fg:x="1038558247" fg:w="17235568"/><text x="15.0188%" y="223.50"></text></g><g><title>get_page_from_freelist (22,946,323 samples, 0.33%)</title><rect x="14.7688%" y="229" width="0.3263%" height="15" fill="rgb(217,163,10)" fg:x="1038558247" fg:w="22946323"/><text x="15.0188%" y="239.50"></text></g><g><title>rmqueue (5,710,755 samples, 0.08%)</title><rect x="15.0139%" y="213" width="0.0812%" height="15" fill="rgb(213,25,53)" fg:x="1055793815" fg:w="5710755"/><text x="15.2639%" y="223.50"></text></g><g><title>alloc_pages_vma (28,744,156 samples, 0.41%)</title><rect x="14.7272%" y="261" width="0.4088%" height="15" fill="rgb(252,105,26)" fg:x="1035635702" fg:w="28744156"/><text x="14.9772%" y="271.50"></text></g><g><title>__alloc_pages_nodemask (25,821,611 samples, 0.37%)</title><rect x="14.7688%" y="245" width="0.3672%" height="15" fill="rgb(220,39,43)" fg:x="1038558247" fg:w="25821611"/><text x="15.0188%" y="255.50"></text></g><g><title>rcu_all_qs (2,875,288 samples, 0.04%)</title><rect x="15.0951%" y="229" width="0.0409%" height="15" fill="rgb(229,68,48)" fg:x="1061504570" fg:w="2875288"/><text x="15.3451%" y="239.50"></text></g><g><title>__mod_lruvec_state (3,088,682 samples, 0.04%)</title><rect x="15.1360%" y="213" width="0.0439%" height="15" fill="rgb(252,8,32)" fg:x="1064379858" fg:w="3088682"/><text x="15.3860%" y="223.50"></text></g><g><title>__mod_zone_page_state (2,872,648 samples, 0.04%)</title><rect x="15.1799%" y="213" width="0.0409%" height="15" fill="rgb(223,20,43)" fg:x="1067468540" fg:w="2872648"/><text x="15.4299%" y="223.50"></text></g><g><title>__pagevec_lru_add_fn (2,860,740 samples, 0.04%)</title><rect x="15.2207%" y="213" width="0.0407%" height="15" fill="rgb(229,81,49)" fg:x="1070341188" fg:w="2860740"/><text x="15.4707%" y="223.50"></text></g><g><title>__mod_lruvec_state (2,860,740 samples, 0.04%)</title><rect x="15.2207%" y="197" width="0.0407%" height="15" fill="rgb(236,28,36)" fg:x="1070341188" fg:w="2860740"/><text x="15.4707%" y="207.50"></text></g><g><title>__lru_cache_add (11,680,680 samples, 0.17%)</title><rect x="15.1360%" y="245" width="0.1661%" height="15" fill="rgb(249,185,26)" fg:x="1064379858" fg:w="11680680"/><text x="15.3860%" y="255.50"></text></g><g><title>pagevec_lru_move_fn (11,680,680 samples, 0.17%)</title><rect x="15.1360%" y="229" width="0.1661%" height="15" fill="rgb(249,174,33)" fg:x="1064379858" fg:w="11680680"/><text x="15.3860%" y="239.50"></text></g><g><title>release_pages (2,858,610 samples, 0.04%)</title><rect x="15.2614%" y="213" width="0.0407%" height="15" fill="rgb(233,201,37)" fg:x="1073201928" fg:w="2858610"/><text x="15.5114%" y="223.50"></text></g><g><title>lru_cache_add_active_or_unevictable (14,531,844 samples, 0.21%)</title><rect x="15.1360%" y="261" width="0.2066%" height="15" fill="rgb(221,78,26)" fg:x="1064379858" fg:w="14531844"/><text x="15.3860%" y="271.50"></text></g><g><title>pagevec_lru_move_fn (2,851,164 samples, 0.04%)</title><rect x="15.3021%" y="245" width="0.0405%" height="15" fill="rgb(250,127,30)" fg:x="1076060538" fg:w="2851164"/><text x="15.5521%" y="255.50"></text></g><g><title>kthread_blkcg (3,170,056 samples, 0.05%)</title><rect x="15.3426%" y="245" width="0.0451%" height="15" fill="rgb(230,49,44)" fg:x="1078911702" fg:w="3170056"/><text x="15.5926%" y="255.50"></text></g><g><title>mem_cgroup_throttle_swaprate (3,016,250 samples, 0.04%)</title><rect x="15.3877%" y="245" width="0.0429%" height="15" fill="rgb(229,67,23)" fg:x="1082081758" fg:w="3016250"/><text x="15.6377%" y="255.50"></text></g><g><title>get_mem_cgroup_from_mm (5,679,388 samples, 0.08%)</title><rect x="15.4715%" y="229" width="0.0808%" height="15" fill="rgb(249,83,47)" fg:x="1087975542" fg:w="5679388"/><text x="15.7215%" y="239.50"></text></g><g><title>page_fault (83,711,476 samples, 1.19%)</title><rect x="14.4439%" y="373" width="1.1904%" height="15" fill="rgb(215,43,3)" fg:x="1015710555" fg:w="83711476"/><text x="14.6939%" y="383.50"></text></g><g><title>do_page_fault (80,817,780 samples, 1.15%)</title><rect x="14.4850%" y="357" width="1.1493%" height="15" fill="rgb(238,154,13)" fg:x="1018604251" fg:w="80817780"/><text x="14.7350%" y="367.50"></text></g><g><title>__do_page_fault (80,817,780 samples, 1.15%)</title><rect x="14.4850%" y="341" width="1.1493%" height="15" fill="rgb(219,56,2)" fg:x="1018604251" fg:w="80817780"/><text x="14.7350%" y="351.50"></text></g><g><title>do_user_addr_fault (80,817,780 samples, 1.15%)</title><rect x="14.4850%" y="325" width="1.1493%" height="15" fill="rgb(233,0,4)" fg:x="1018604251" fg:w="80817780"/><text x="14.7350%" y="335.50"></text></g><g><title>handle_mm_fault (75,008,548 samples, 1.07%)</title><rect x="14.5676%" y="309" width="1.0667%" height="15" fill="rgb(235,30,7)" fg:x="1024413483" fg:w="75008548"/><text x="14.8176%" y="319.50"></text></g><g><title>__handle_mm_fault (72,123,861 samples, 1.03%)</title><rect x="14.6087%" y="293" width="1.0256%" height="15" fill="rgb(250,79,13)" fg:x="1027298170" fg:w="72123861"/><text x="14.8587%" y="303.50"></text></g><g><title>do_anonymous_page (72,123,861 samples, 1.03%)</title><rect x="14.6087%" y="277" width="1.0256%" height="15" fill="rgb(211,146,34)" fg:x="1027298170" fg:w="72123861"/><text x="14.8587%" y="287.50"></text></g><g><title>mem_cgroup_try_charge_delay (20,510,329 samples, 0.29%)</title><rect x="15.3426%" y="261" width="0.2917%" height="15" fill="rgb(228,22,38)" fg:x="1078911702" fg:w="20510329"/><text x="15.5926%" y="271.50"></text></g><g><title>mem_cgroup_try_charge (14,324,023 samples, 0.20%)</title><rect x="15.4306%" y="245" width="0.2037%" height="15" fill="rgb(235,168,5)" fg:x="1085098008" fg:w="14324023"/><text x="15.6806%" y="255.50"></text></g><g><title>try_charge (5,767,101 samples, 0.08%)</title><rect x="15.5523%" y="229" width="0.0820%" height="15" fill="rgb(221,155,16)" fg:x="1093654930" fg:w="5767101"/><text x="15.8023%" y="239.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (19,936,883 samples, 0.28%)</title><rect x="15.6343%" y="373" width="0.2835%" height="15" fill="rgb(215,215,53)" fg:x="1099422031" fg:w="19936883"/><text x="15.8843%" y="383.50"></text></g><g><title>prepare_exit_to_usermode (19,936,883 samples, 0.28%)</title><rect x="15.6343%" y="357" width="0.2835%" height="15" fill="rgb(223,4,10)" fg:x="1099422031" fg:w="19936883"/><text x="15.8843%" y="367.50"></text></g><g><title>fpregs_assert_state_consistent (2,769,580 samples, 0.04%)</title><rect x="15.8784%" y="341" width="0.0394%" height="15" fill="rgb(234,103,6)" fg:x="1116589334" fg:w="2769580"/><text x="16.1284%" y="351.50"></text></g><g><title>QUEUE_TEST::csvreader::csvcon (124,362,671 samples, 1.77%)</title><rect x="14.1900%" y="437" width="1.7685%" height="15" fill="rgb(227,97,0)" fg:x="997856255" fg:w="124362671"/><text x="14.4400%" y="447.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (124,362,671 samples, 1.77%)</title><rect x="14.1900%" y="421" width="1.7685%" height="15" fill="rgb(234,150,53)" fg:x="997856255" fg:w="124362671"/><text x="14.4400%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (124,362,671 samples, 1.77%)</title><rect x="14.1900%" y="405" width="1.7685%" height="15" fill="rgb(228,201,54)" fg:x="997856255" fg:w="124362671"/><text x="14.4400%" y="415.50"></text></g><g><title>core::ptr::write (121,202,438 samples, 1.72%)</title><rect x="14.2349%" y="389" width="1.7236%" height="15" fill="rgb(222,22,37)" fg:x="1001016488" fg:w="121202438"/><text x="14.4849%" y="399.50"></text></g><g><title>sync_regs (2,860,012 samples, 0.04%)</title><rect x="15.9178%" y="373" width="0.0407%" height="15" fill="rgb(237,53,32)" fg:x="1119358914" fg:w="2860012"/><text x="16.1678%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3,059,419 samples, 0.04%)</title><rect x="16.0015%" y="421" width="0.0435%" height="15" fill="rgb(233,25,53)" fg:x="1125246035" fg:w="3059419"/><text x="16.2515%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3,059,419 samples, 0.04%)</title><rect x="16.0015%" y="405" width="0.0435%" height="15" fill="rgb(210,40,34)" fg:x="1125246035" fg:w="3059419"/><text x="16.2515%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,059,419 samples, 0.04%)</title><rect x="16.0015%" y="389" width="0.0435%" height="15" fill="rgb(241,220,44)" fg:x="1125246035" fg:w="3059419"/><text x="16.2515%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (5,630,396 samples, 0.08%)</title><rect x="16.1690%" y="373" width="0.0801%" height="15" fill="rgb(235,28,35)" fg:x="1137024539" fg:w="5630396"/><text x="16.4190%" y="383.50"></text></g><g><title>core::ptr::read (5,630,396 samples, 0.08%)</title><rect x="16.1690%" y="357" width="0.0801%" height="15" fill="rgb(210,56,17)" fg:x="1137024539" fg:w="5630396"/><text x="16.4190%" y="367.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (11,971,506 samples, 0.17%)</title><rect x="16.4586%" y="325" width="0.1702%" height="15" fill="rgb(224,130,29)" fg:x="1157389722" fg:w="11971506"/><text x="16.7086%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (5,912,476 samples, 0.08%)</title><rect x="16.5448%" y="309" width="0.0841%" height="15" fill="rgb(235,212,8)" fg:x="1163448752" fg:w="5912476"/><text x="16.7948%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (5,912,476 samples, 0.08%)</title><rect x="16.5448%" y="293" width="0.0841%" height="15" fill="rgb(223,33,50)" fg:x="1163448752" fg:w="5912476"/><text x="16.7948%" y="303.50"></text></g><g><title>core::cmp::PartialOrd::le (5,912,476 samples, 0.08%)</title><rect x="16.5448%" y="277" width="0.0841%" height="15" fill="rgb(219,149,13)" fg:x="1163448752" fg:w="5912476"/><text x="16.7948%" y="287.50"></text></g><g><title>&lt;QUEUE_TEST::KeyVal as core::cmp::PartialOrd&gt;::partial_cmp (5,912,476 samples, 0.08%)</title><rect x="16.5448%" y="261" width="0.0841%" height="15" fill="rgb(250,156,29)" fg:x="1163448752" fg:w="5912476"/><text x="16.7948%" y="271.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (11,673,940 samples, 0.17%)</title><rect x="16.6289%" y="325" width="0.1660%" height="15" fill="rgb(216,193,19)" fg:x="1169361228" fg:w="11673940"/><text x="16.8789%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11,673,940 samples, 0.17%)</title><rect x="16.6289%" y="309" width="0.1660%" height="15" fill="rgb(216,135,14)" fg:x="1169361228" fg:w="11673940"/><text x="16.8789%" y="319.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_down_to_bottom (90,961,406 samples, 1.29%)</title><rect x="16.2491%" y="341" width="1.2935%" height="15" fill="rgb(241,47,5)" fg:x="1142654935" fg:w="90961406"/><text x="16.4991%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (52,581,173 samples, 0.75%)</title><rect x="16.7949%" y="325" width="0.7477%" height="15" fill="rgb(233,42,35)" fg:x="1181035168" fg:w="52581173"/><text x="17.0449%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (40,889,657 samples, 0.58%)</title><rect x="16.9611%" y="309" width="0.5815%" height="15" fill="rgb(231,13,6)" fg:x="1192726684" fg:w="40889657"/><text x="17.2111%" y="319.50"></text></g><g><title>core::cmp::PartialOrd::le (40,889,657 samples, 0.58%)</title><rect x="16.9611%" y="293" width="0.5815%" height="15" fill="rgb(207,181,40)" fg:x="1192726684" fg:w="40889657"/><text x="17.2111%" y="303.50"></text></g><g><title>&lt;QUEUE_TEST::KeyVal as core::cmp::PartialOrd&gt;::partial_cmp (32,090,781 samples, 0.46%)</title><rect x="17.0862%" y="277" width="0.4563%" height="15" fill="rgb(254,173,49)" fg:x="1201525560" fg:w="32090781"/><text x="17.3362%" y="287.50"></text></g><g><title>&lt;QUEUE_TEST::KeyVal as core::cmp::Ord&gt;::cmp (32,090,781 samples, 0.46%)</title><rect x="17.0862%" y="261" width="0.4563%" height="15" fill="rgb(221,1,38)" fg:x="1201525560" fg:w="32090781"/><text x="17.3362%" y="271.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (32,090,781 samples, 0.46%)</title><rect x="17.0862%" y="245" width="0.4563%" height="15" fill="rgb(206,124,46)" fg:x="1201525560" fg:w="32090781"/><text x="17.3362%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (32,090,781 samples, 0.46%)</title><rect x="17.0862%" y="229" width="0.4563%" height="15" fill="rgb(249,21,11)" fg:x="1201525560" fg:w="32090781"/><text x="17.3362%" y="239.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::lt (32,090,781 samples, 0.46%)</title><rect x="17.0862%" y="213" width="0.4563%" height="15" fill="rgb(222,201,40)" fg:x="1201525560" fg:w="32090781"/><text x="17.3362%" y="223.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (32,090,781 samples, 0.46%)</title><rect x="17.0862%" y="197" width="0.4563%" height="15" fill="rgb(235,61,29)" fg:x="1201525560" fg:w="32090781"/><text x="17.3362%" y="207.50"></text></g><g><title>&lt;alloc::collections::binary_heap::BinaryHeap&lt;&amp;E&gt; as QUEUE_TEST::SeqentialPriorityQueue&lt;E&gt;&gt;::pop (102,351,562 samples, 1.46%)</title><rect x="16.1690%" y="405" width="1.4555%" height="15" fill="rgb(219,207,3)" fg:x="1137024539" fg:w="102351562"/><text x="16.4190%" y="415.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (102,351,562 samples, 1.46%)</title><rect x="16.1690%" y="389" width="1.4555%" height="15" fill="rgb(222,56,46)" fg:x="1137024539" fg:w="102351562"/><text x="16.4190%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (96,721,166 samples, 1.38%)</title><rect x="16.2491%" y="373" width="1.3754%" height="15" fill="rgb(239,76,54)" fg:x="1142654935" fg:w="96721166"/><text x="16.4991%" y="383.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop::{{closure}} (96,721,166 samples, 1.38%)</title><rect x="16.2491%" y="357" width="1.3754%" height="15" fill="rgb(231,124,27)" fg:x="1142654935" fg:w="96721166"/><text x="16.4991%" y="367.50"></text></g><g><title>core::mem::swap (5,759,760 samples, 0.08%)</title><rect x="17.5426%" y="341" width="0.0819%" height="15" fill="rgb(249,195,6)" fg:x="1233616341" fg:w="5759760"/><text x="17.7926%" y="351.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (2,714,670 samples, 0.04%)</title><rect x="17.6245%" y="357" width="0.0386%" height="15" fill="rgb(237,174,47)" fg:x="1239376101" fg:w="2714670"/><text x="17.8745%" y="367.50"></text></g><g><title>core::ptr::read (2,714,670 samples, 0.04%)</title><rect x="17.6245%" y="341" width="0.0386%" height="15" fill="rgb(206,201,31)" fg:x="1239376101" fg:w="2714670"/><text x="17.8745%" y="351.50"></text></g><g><title>&lt;alloc::collections::binary_heap::BinaryHeap&lt;&amp;E&gt; as QUEUE_TEST::SeqentialPriorityQueue&lt;E&gt;&gt;::push (5,903,620 samples, 0.08%)</title><rect x="17.6245%" y="405" width="0.0840%" height="15" fill="rgb(231,57,52)" fg:x="1239376101" fg:w="5903620"/><text x="17.8745%" y="415.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::push (5,903,620 samples, 0.08%)</title><rect x="17.6245%" y="389" width="0.0840%" height="15" fill="rgb(248,177,22)" fg:x="1239376101" fg:w="5903620"/><text x="17.8745%" y="399.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (5,903,620 samples, 0.08%)</title><rect x="17.6245%" y="373" width="0.0840%" height="15" fill="rgb(215,211,37)" fg:x="1239376101" fg:w="5903620"/><text x="17.8745%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (3,188,950 samples, 0.05%)</title><rect x="17.6631%" y="357" width="0.0453%" height="15" fill="rgb(241,128,51)" fg:x="1242090771" fg:w="3188950"/><text x="17.9131%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (3,188,950 samples, 0.05%)</title><rect x="17.6631%" y="341" width="0.0453%" height="15" fill="rgb(227,165,31)" fg:x="1242090771" fg:w="3188950"/><text x="17.9131%" y="351.50"></text></g><g><title>core::cmp::PartialOrd::le (3,188,950 samples, 0.05%)</title><rect x="17.6631%" y="325" width="0.0453%" height="15" fill="rgb(228,167,24)" fg:x="1242090771" fg:w="3188950"/><text x="17.9131%" y="335.50"></text></g><g><title>&lt;QUEUE_TEST::KeyVal as core::cmp::PartialOrd&gt;::partial_cmp (3,188,950 samples, 0.05%)</title><rect x="17.6631%" y="309" width="0.0453%" height="15" fill="rgb(228,143,12)" fg:x="1242090771" fg:w="3188950"/><text x="17.9131%" y="319.50"></text></g><g><title>hrtimer_interrupt (2,824,345 samples, 0.04%)</title><rect x="17.9596%" y="309" width="0.0402%" height="15" fill="rgb(249,149,8)" fg:x="1262939640" fg:w="2824345"/><text x="18.2096%" y="319.50"></text></g><g><title>__hrtimer_run_queues (2,824,345 samples, 0.04%)</title><rect x="17.9596%" y="293" width="0.0402%" height="15" fill="rgb(243,35,44)" fg:x="1262939640" fg:w="2824345"/><text x="18.2096%" y="303.50"></text></g><g><title>tick_sched_timer (2,824,345 samples, 0.04%)</title><rect x="17.9596%" y="277" width="0.0402%" height="15" fill="rgb(246,89,9)" fg:x="1262939640" fg:w="2824345"/><text x="18.2096%" y="287.50"></text></g><g><title>tick_sched_handle (2,824,345 samples, 0.04%)</title><rect x="17.9596%" y="261" width="0.0402%" height="15" fill="rgb(233,213,13)" fg:x="1262939640" fg:w="2824345"/><text x="18.2096%" y="271.50"></text></g><g><title>update_process_times (2,824,345 samples, 0.04%)</title><rect x="17.9596%" y="245" width="0.0402%" height="15" fill="rgb(233,141,41)" fg:x="1262939640" fg:w="2824345"/><text x="18.2096%" y="255.50"></text></g><g><title>scheduler_tick (2,824,345 samples, 0.04%)</title><rect x="17.9596%" y="229" width="0.0402%" height="15" fill="rgb(239,167,4)" fg:x="1262939640" fg:w="2824345"/><text x="18.2096%" y="239.50"></text></g><g><title>task_tick_fair (2,824,345 samples, 0.04%)</title><rect x="17.9596%" y="213" width="0.0402%" height="15" fill="rgb(209,217,16)" fg:x="1262939640" fg:w="2824345"/><text x="18.2096%" y="223.50"></text></g><g><title>hrtimer_active (2,824,345 samples, 0.04%)</title><rect x="17.9596%" y="197" width="0.0402%" height="15" fill="rgb(219,88,35)" fg:x="1262939640" fg:w="2824345"/><text x="18.2096%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23,309,432 samples, 0.33%)</title><rect x="17.7085%" y="389" width="0.3315%" height="15" fill="rgb(220,193,23)" fg:x="1245279721" fg:w="23309432"/><text x="17.9585%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (23,309,432 samples, 0.33%)</title><rect x="17.7085%" y="373" width="0.3315%" height="15" fill="rgb(230,90,52)" fg:x="1245279721" fg:w="23309432"/><text x="17.9585%" y="383.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (23,309,432 samples, 0.33%)</title><rect x="17.7085%" y="357" width="0.3315%" height="15" fill="rgb(252,106,19)" fg:x="1245279721" fg:w="23309432"/><text x="17.9585%" y="367.50"></text></g><g><title>apic_timer_interrupt (5,649,513 samples, 0.08%)</title><rect x="17.9596%" y="341" width="0.0803%" height="15" fill="rgb(206,74,20)" fg:x="1262939640" fg:w="5649513"/><text x="18.2096%" y="351.50"></text></g><g><title>smp_apic_timer_interrupt (5,649,513 samples, 0.08%)</title><rect x="17.9596%" y="325" width="0.0803%" height="15" fill="rgb(230,138,44)" fg:x="1262939640" fg:w="5649513"/><text x="18.2096%" y="335.50"></text></g><g><title>irq_exit (2,825,168 samples, 0.04%)</title><rect x="17.9997%" y="309" width="0.0402%" height="15" fill="rgb(235,182,43)" fg:x="1265763985" fg:w="2825168"/><text x="18.2497%" y="319.50"></text></g><g><title>__softirqentry_text_start (2,825,168 samples, 0.04%)</title><rect x="17.9997%" y="293" width="0.0402%" height="15" fill="rgb(242,16,51)" fg:x="1265763985" fg:w="2825168"/><text x="18.2497%" y="303.50"></text></g><g><title>run_rebalance_domains (2,825,168 samples, 0.04%)</title><rect x="17.9997%" y="277" width="0.0402%" height="15" fill="rgb(248,9,4)" fg:x="1265763985" fg:w="2825168"/><text x="18.2497%" y="287.50"></text></g><g><title>rebalance_domains (2,825,168 samples, 0.04%)</title><rect x="17.9997%" y="261" width="0.0402%" height="15" fill="rgb(210,31,22)" fg:x="1265763985" fg:w="2825168"/><text x="18.2497%" y="271.50"></text></g><g><title>load_balance (2,825,168 samples, 0.04%)</title><rect x="17.9997%" y="245" width="0.0402%" height="15" fill="rgb(239,54,39)" fg:x="1265763985" fg:w="2825168"/><text x="18.2497%" y="255.50"></text></g><g><title>find_busiest_group (2,825,168 samples, 0.04%)</title><rect x="17.9997%" y="229" width="0.0402%" height="15" fill="rgb(230,99,41)" fg:x="1265763985" fg:w="2825168"/><text x="18.2497%" y="239.50"></text></g><g><title>update_group_capacity (2,825,168 samples, 0.04%)</title><rect x="17.9997%" y="213" width="0.0402%" height="15" fill="rgb(253,106,12)" fg:x="1265763985" fg:w="2825168"/><text x="18.2497%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (2,531,285,094 samples, 36.00%)</title><rect x="17.7085%" y="405" width="35.9960%" height="15" fill="rgb(213,46,41)" fg:x="1245279721" fg:w="2531285094"/><text x="17.9585%" y="415.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator..</text></g><g><title>QUEUE_TEST::time_seqential::{{closure}} (2,507,975,662 samples, 35.66%)</title><rect x="18.0399%" y="389" width="35.6646%" height="15" fill="rgb(215,133,35)" fg:x="1268589153" fg:w="2507975662"/><text x="18.2899%" y="399.50">QUEUE_TEST::time_seqential::{{closure}}</text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (2,507,975,662 samples, 35.66%)</title><rect x="18.0399%" y="373" width="35.6646%" height="15" fill="rgb(213,28,5)" fg:x="1268589153" fg:w="2507975662"/><text x="18.2899%" y="383.50">core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (14,476,588 samples, 0.21%)</title><rect x="53.4986%" y="357" width="0.2059%" height="15" fill="rgb(215,77,49)" fg:x="3762088227" fg:w="14476588"/><text x="53.7486%" y="367.50"></text></g><g><title>QUEUE_TEST::csvreader::Rec::p1 (8,678,636 samples, 0.12%)</title><rect x="53.7045%" y="405" width="0.1234%" height="15" fill="rgb(248,100,22)" fg:x="3776564815" fg:w="8678636"/><text x="53.9545%" y="415.50"></text></g><g><title>QUEUE_TEST::particle::Particle::new (8,678,636 samples, 0.12%)</title><rect x="53.7045%" y="389" width="0.1234%" height="15" fill="rgb(208,67,9)" fg:x="3776564815" fg:w="8678636"/><text x="53.9545%" y="399.50"></text></g><g><title>QUEUE_TEST::particle::Particle::mass_from_radius (8,678,636 samples, 0.12%)</title><rect x="53.7045%" y="373" width="0.1234%" height="15" fill="rgb(219,133,21)" fg:x="3776564815" fg:w="8678636"/><text x="53.9545%" y="383.50"></text></g><g><title>QUEUE_TEST::csvreader::Rec::p2 (14,721,867 samples, 0.21%)</title><rect x="53.8279%" y="405" width="0.2094%" height="15" fill="rgb(246,46,29)" fg:x="3785243451" fg:w="14721867"/><text x="54.0779%" y="415.50"></text></g><g><title>QUEUE_TEST::particle::Particle::new (9,016,158 samples, 0.13%)</title><rect x="53.9091%" y="389" width="0.1282%" height="15" fill="rgb(246,185,52)" fg:x="3790949160" fg:w="9016158"/><text x="54.1591%" y="399.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::len (5,567,587 samples, 0.08%)</title><rect x="54.0373%" y="309" width="0.0792%" height="15" fill="rgb(252,136,11)" fg:x="3799965318" fg:w="5567587"/><text x="54.2873%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (5,567,587 samples, 0.08%)</title><rect x="54.0373%" y="293" width="0.0792%" height="15" fill="rgb(219,138,53)" fg:x="3799965318" fg:w="5567587"/><text x="54.2873%" y="303.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (6,110,708 samples, 0.09%)</title><rect x="54.7805%" y="293" width="0.0869%" height="15" fill="rgb(211,51,23)" fg:x="3852232251" fg:w="6110708"/><text x="55.0305%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6,110,708 samples, 0.09%)</title><rect x="54.7805%" y="277" width="0.0869%" height="15" fill="rgb(247,221,28)" fg:x="3852232251" fg:w="6110708"/><text x="55.0305%" y="287.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (70,618,902 samples, 1.00%)</title><rect x="54.1164%" y="309" width="1.0042%" height="15" fill="rgb(251,222,45)" fg:x="3805532905" fg:w="70618902"/><text x="54.3664%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (17,808,848 samples, 0.25%)</title><rect x="54.8674%" y="293" width="0.2533%" height="15" fill="rgb(217,162,53)" fg:x="3858342959" fg:w="17808848"/><text x="55.1174%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (17,808,848 samples, 0.25%)</title><rect x="54.8674%" y="277" width="0.2533%" height="15" fill="rgb(229,93,14)" fg:x="3858342959" fg:w="17808848"/><text x="55.1174%" y="287.50"></text></g><g><title>core::cmp::PartialOrd::le (17,808,848 samples, 0.25%)</title><rect x="54.8674%" y="261" width="0.2533%" height="15" fill="rgb(209,67,49)" fg:x="3858342959" fg:w="17808848"/><text x="55.1174%" y="271.50"></text></g><g><title>&lt;QUEUE_TEST::KeyVal as core::cmp::PartialOrd&gt;::partial_cmp (17,808,848 samples, 0.25%)</title><rect x="54.8674%" y="245" width="0.2533%" height="15" fill="rgb(213,87,29)" fg:x="3858342959" fg:w="17808848"/><text x="55.1174%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (81,937,906 samples, 1.17%)</title><rect x="54.0373%" y="405" width="1.1652%" height="15" fill="rgb(205,151,52)" fg:x="3799965318" fg:w="81937906"/><text x="54.2873%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (81,937,906 samples, 1.17%)</title><rect x="54.0373%" y="389" width="1.1652%" height="15" fill="rgb(253,215,39)" fg:x="3799965318" fg:w="81937906"/><text x="54.2873%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (81,937,906 samples, 1.17%)</title><rect x="54.0373%" y="373" width="1.1652%" height="15" fill="rgb(221,220,41)" fg:x="3799965318" fg:w="81937906"/><text x="54.2873%" y="383.50"></text></g><g><title>QUEUE_TEST::time_seqential::{{closure}} (81,937,906 samples, 1.17%)</title><rect x="54.0373%" y="357" width="1.1652%" height="15" fill="rgb(218,133,21)" fg:x="3799965318" fg:w="81937906"/><text x="54.2873%" y="367.50"></text></g><g><title>&lt;alloc::collections::binary_heap::BinaryHeap&lt;&amp;E&gt; as QUEUE_TEST::SeqentialPriorityQueue&lt;E&gt;&gt;::push (81,937,906 samples, 1.17%)</title><rect x="54.0373%" y="341" width="1.1652%" height="15" fill="rgb(221,193,43)" fg:x="3799965318" fg:w="81937906"/><text x="54.2873%" y="351.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::push (81,937,906 samples, 1.17%)</title><rect x="54.0373%" y="325" width="1.1652%" height="15" fill="rgb(240,128,52)" fg:x="3799965318" fg:w="81937906"/><text x="54.2873%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5,751,417 samples, 0.08%)</title><rect x="55.1207%" y="309" width="0.0818%" height="15" fill="rgb(253,114,12)" fg:x="3876151807" fg:w="5751417"/><text x="55.3707%" y="319.50"></text></g><g><title>core::ptr::write (5,751,417 samples, 0.08%)</title><rect x="55.1207%" y="293" width="0.0818%" height="15" fill="rgb(215,223,47)" fg:x="3876151807" fg:w="5751417"/><text x="55.3707%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8,836,055 samples, 0.13%)</title><rect x="55.2433%" y="261" width="0.1257%" height="15" fill="rgb(248,225,23)" fg:x="3884776646" fg:w="8836055"/><text x="55.4933%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,127,764 samples, 0.04%)</title><rect x="55.3245%" y="245" width="0.0445%" height="15" fill="rgb(250,108,0)" fg:x="3890484937" fg:w="3127764"/><text x="55.5745%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (11,884,954 samples, 0.17%)</title><rect x="55.3690%" y="245" width="0.1690%" height="15" fill="rgb(228,208,7)" fg:x="3893612701" fg:w="11884954"/><text x="55.6190%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (26,768,268 samples, 0.38%)</title><rect x="55.2025%" y="309" width="0.3807%" height="15" fill="rgb(244,45,10)" fg:x="3881903224" fg:w="26768268"/><text x="55.4525%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (26,768,268 samples, 0.38%)</title><rect x="55.2025%" y="293" width="0.3807%" height="15" fill="rgb(207,125,25)" fg:x="3881903224" fg:w="26768268"/><text x="55.4525%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (26,768,268 samples, 0.38%)</title><rect x="55.2025%" y="277" width="0.3807%" height="15" fill="rgb(210,195,18)" fg:x="3881903224" fg:w="26768268"/><text x="55.4525%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (15,058,791 samples, 0.21%)</title><rect x="55.3690%" y="261" width="0.2141%" height="15" fill="rgb(249,80,12)" fg:x="3893612701" fg:w="15058791"/><text x="55.6190%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,173,837 samples, 0.05%)</title><rect x="55.5380%" y="245" width="0.0451%" height="15" fill="rgb(221,65,9)" fg:x="3905497655" fg:w="3173837"/><text x="55.7880%" y="255.50"></text></g><g><title>QUEUE_TEST::time_seqential (2,804,414,917 samples, 39.88%)</title><rect x="16.0450%" y="421" width="39.8801%" height="15" fill="rgb(235,49,36)" fg:x="1128305454" fg:w="2804414917"/><text x="16.2950%" y="431.50">QUEUE_TEST::time_seqential</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (50,817,147 samples, 0.72%)</title><rect x="55.2025%" y="405" width="0.7226%" height="15" fill="rgb(225,32,20)" fg:x="3881903224" fg:w="50817147"/><text x="55.4525%" y="415.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (50,817,147 samples, 0.72%)</title><rect x="55.2025%" y="389" width="0.7226%" height="15" fill="rgb(215,141,46)" fg:x="3881903224" fg:w="50817147"/><text x="55.4525%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (50,817,147 samples, 0.72%)</title><rect x="55.2025%" y="373" width="0.7226%" height="15" fill="rgb(250,160,47)" fg:x="3881903224" fg:w="50817147"/><text x="55.4525%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (50,817,147 samples, 0.72%)</title><rect x="55.2025%" y="357" width="0.7226%" height="15" fill="rgb(216,222,40)" fg:x="3881903224" fg:w="50817147"/><text x="55.4525%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (50,817,147 samples, 0.72%)</title><rect x="55.2025%" y="341" width="0.7226%" height="15" fill="rgb(234,217,39)" fg:x="3881903224" fg:w="50817147"/><text x="55.4525%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (50,817,147 samples, 0.72%)</title><rect x="55.2025%" y="325" width="0.7226%" height="15" fill="rgb(207,178,40)" fg:x="3881903224" fg:w="50817147"/><text x="55.4525%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (24,048,879 samples, 0.34%)</title><rect x="55.5831%" y="309" width="0.3420%" height="15" fill="rgb(221,136,13)" fg:x="3908671492" fg:w="24048879"/><text x="55.8331%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (6,119,781 samples, 0.09%)</title><rect x="55.8381%" y="293" width="0.0870%" height="15" fill="rgb(249,199,10)" fg:x="3926600590" fg:w="6119781"/><text x="56.0881%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (6,119,781 samples, 0.09%)</title><rect x="55.8381%" y="277" width="0.0870%" height="15" fill="rgb(249,222,13)" fg:x="3926600590" fg:w="6119781"/><text x="56.0881%" y="287.50"></text></g><g><title>core::hash::Hasher::write_u32 (6,119,781 samples, 0.09%)</title><rect x="55.8381%" y="261" width="0.0870%" height="15" fill="rgb(244,185,38)" fg:x="3926600590" fg:w="6119781"/><text x="56.0881%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6,119,781 samples, 0.09%)</title><rect x="55.8381%" y="245" width="0.0870%" height="15" fill="rgb(236,202,9)" fg:x="3926600590" fg:w="6119781"/><text x="56.0881%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6,119,781 samples, 0.09%)</title><rect x="55.8381%" y="229" width="0.0870%" height="15" fill="rgb(250,229,37)" fg:x="3926600590" fg:w="6119781"/><text x="56.0881%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6,119,781 samples, 0.09%)</title><rect x="55.8381%" y="213" width="0.0870%" height="15" fill="rgb(206,174,23)" fg:x="3926600590" fg:w="6119781"/><text x="56.0881%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3,129,101 samples, 0.04%)</title><rect x="55.8806%" y="197" width="0.0445%" height="15" fill="rgb(211,33,43)" fg:x="3929591270" fg:w="3129101"/><text x="56.1306%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,129,101 samples, 0.04%)</title><rect x="55.8806%" y="181" width="0.0445%" height="15" fill="rgb(245,58,50)" fg:x="3929591270" fg:w="3129101"/><text x="56.1306%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3,064,764 samples, 0.04%)</title><rect x="55.9251%" y="389" width="0.0436%" height="15" fill="rgb(244,68,36)" fg:x="3932720371" fg:w="3064764"/><text x="56.1751%" y="399.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (12,008,708 samples, 0.17%)</title><rect x="55.9251%" y="421" width="0.1708%" height="15" fill="rgb(232,229,15)" fg:x="3932720371" fg:w="12008708"/><text x="56.1751%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (12,008,708 samples, 0.17%)</title><rect x="55.9251%" y="405" width="0.1708%" height="15" fill="rgb(254,30,23)" fg:x="3932720371" fg:w="12008708"/><text x="56.1751%" y="415.50"></text></g><g><title>core::ptr::read (8,943,944 samples, 0.13%)</title><rect x="55.9687%" y="389" width="0.1272%" height="15" fill="rgb(235,160,14)" fg:x="3935785135" fg:w="8943944"/><text x="56.2187%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3,116,698 samples, 0.04%)</title><rect x="56.0959%" y="421" width="0.0443%" height="15" fill="rgb(212,155,44)" fg:x="3944729079" fg:w="3116698"/><text x="56.3459%" y="431.50"></text></g><g><title>error_entry (3,023,035 samples, 0.04%)</title><rect x="56.2685%" y="389" width="0.0430%" height="15" fill="rgb(226,2,50)" fg:x="3956865994" fg:w="3023035"/><text x="56.5185%" y="399.50"></text></g><g><title>find_vma (3,006,492 samples, 0.04%)</title><rect x="56.3554%" y="325" width="0.0428%" height="15" fill="rgb(234,177,6)" fg:x="3962978232" fg:w="3006492"/><text x="56.6054%" y="335.50"></text></g><g><title>clear_page_erms (20,875,566 samples, 0.30%)</title><rect x="56.4426%" y="229" width="0.2969%" height="15" fill="rgb(217,24,9)" fg:x="3969114305" fg:w="20875566"/><text x="56.6926%" y="239.50"></text></g><g><title>alloc_pages_vma (26,941,269 samples, 0.38%)</title><rect x="56.3981%" y="277" width="0.3831%" height="15" fill="rgb(220,13,46)" fg:x="3965984724" fg:w="26941269"/><text x="56.6481%" y="287.50"></text></g><g><title>__alloc_pages_nodemask (26,941,269 samples, 0.38%)</title><rect x="56.3981%" y="261" width="0.3831%" height="15" fill="rgb(239,221,27)" fg:x="3965984724" fg:w="26941269"/><text x="56.6481%" y="271.50"></text></g><g><title>get_page_from_freelist (26,941,269 samples, 0.38%)</title><rect x="56.3981%" y="245" width="0.3831%" height="15" fill="rgb(222,198,25)" fg:x="3965984724" fg:w="26941269"/><text x="56.6481%" y="255.50"></text></g><g><title>prep_new_page (2,936,122 samples, 0.04%)</title><rect x="56.7395%" y="229" width="0.0418%" height="15" fill="rgb(211,99,13)" fg:x="3989989871" fg:w="2936122"/><text x="56.9895%" y="239.50"></text></g><g><title>page_poisoning_enabled (2,936,122 samples, 0.04%)</title><rect x="56.7395%" y="213" width="0.0418%" height="15" fill="rgb(232,111,31)" fg:x="3989989871" fg:w="2936122"/><text x="56.9895%" y="223.50"></text></g><g><title>lru_cache_add_active_or_unevictable (2,935,320 samples, 0.04%)</title><rect x="56.7813%" y="277" width="0.0417%" height="15" fill="rgb(245,82,37)" fg:x="3992925993" fg:w="2935320"/><text x="57.0313%" y="287.50"></text></g><g><title>__lru_cache_add (2,935,320 samples, 0.04%)</title><rect x="56.7813%" y="261" width="0.0417%" height="15" fill="rgb(227,149,46)" fg:x="3992925993" fg:w="2935320"/><text x="57.0313%" y="271.50"></text></g><g><title>pagevec_lru_move_fn (2,935,320 samples, 0.04%)</title><rect x="56.7813%" y="245" width="0.0417%" height="15" fill="rgb(218,36,50)" fg:x="3992925993" fg:w="2935320"/><text x="57.0313%" y="255.50"></text></g><g><title>__pagevec_lru_add_fn (2,935,320 samples, 0.04%)</title><rect x="56.7813%" y="229" width="0.0417%" height="15" fill="rgb(226,80,48)" fg:x="3992925993" fg:w="2935320"/><text x="57.0313%" y="239.50"></text></g><g><title>mem_cgroup_commit_charge (2,872,360 samples, 0.04%)</title><rect x="56.8230%" y="277" width="0.0408%" height="15" fill="rgb(238,224,15)" fg:x="3995861313" fg:w="2872360"/><text x="57.0730%" y="287.50"></text></g><g><title>mem_cgroup_charge_statistics (2,872,360 samples, 0.04%)</title><rect x="56.8230%" y="261" width="0.0408%" height="15" fill="rgb(241,136,10)" fg:x="3995861313" fg:w="2872360"/><text x="57.0730%" y="271.50"></text></g><g><title>kthread_blkcg (2,968,528 samples, 0.04%)</title><rect x="56.8638%" y="261" width="0.0422%" height="15" fill="rgb(208,32,45)" fg:x="3998733673" fg:w="2968528"/><text x="57.1138%" y="271.50"></text></g><g><title>mem_cgroup_throttle_swaprate (2,964,489 samples, 0.04%)</title><rect x="56.9061%" y="261" width="0.0422%" height="15" fill="rgb(207,135,9)" fg:x="4001702201" fg:w="2964489"/><text x="57.1561%" y="271.50"></text></g><g><title>kthread_blkcg (2,964,489 samples, 0.04%)</title><rect x="56.9061%" y="245" width="0.0422%" height="15" fill="rgb(206,86,44)" fg:x="4001702201" fg:w="2964489"/><text x="57.1561%" y="255.50"></text></g><g><title>get_mem_cgroup_from_mm (2,964,193 samples, 0.04%)</title><rect x="56.9899%" y="245" width="0.0422%" height="15" fill="rgb(245,177,15)" fg:x="4007595004" fg:w="2964193"/><text x="57.2399%" y="255.50"></text></g><g><title>page_fault (62,435,714 samples, 0.89%)</title><rect x="56.3115%" y="389" width="0.8879%" height="15" fill="rgb(206,64,50)" fg:x="3959889029" fg:w="62435714"/><text x="56.5615%" y="399.50"></text></g><g><title>do_page_fault (62,435,714 samples, 0.89%)</title><rect x="56.3115%" y="373" width="0.8879%" height="15" fill="rgb(234,36,40)" fg:x="3959889029" fg:w="62435714"/><text x="56.5615%" y="383.50"></text></g><g><title>__do_page_fault (62,435,714 samples, 0.89%)</title><rect x="56.3115%" y="357" width="0.8879%" height="15" fill="rgb(213,64,8)" fg:x="3959889029" fg:w="62435714"/><text x="56.5615%" y="367.50"></text></g><g><title>do_user_addr_fault (62,435,714 samples, 0.89%)</title><rect x="56.3115%" y="341" width="0.8879%" height="15" fill="rgb(210,75,36)" fg:x="3959889029" fg:w="62435714"/><text x="56.5615%" y="351.50"></text></g><g><title>handle_mm_fault (56,340,019 samples, 0.80%)</title><rect x="56.3981%" y="325" width="0.8012%" height="15" fill="rgb(229,88,21)" fg:x="3965984724" fg:w="56340019"/><text x="56.6481%" y="335.50"></text></g><g><title>__handle_mm_fault (56,340,019 samples, 0.80%)</title><rect x="56.3981%" y="309" width="0.8012%" height="15" fill="rgb(252,204,47)" fg:x="3965984724" fg:w="56340019"/><text x="56.6481%" y="319.50"></text></g><g><title>do_anonymous_page (56,340,019 samples, 0.80%)</title><rect x="56.3981%" y="293" width="0.8012%" height="15" fill="rgb(208,77,27)" fg:x="3965984724" fg:w="56340019"/><text x="56.6481%" y="303.50"></text></g><g><title>mem_cgroup_try_charge_delay (23,591,070 samples, 0.34%)</title><rect x="56.8638%" y="277" width="0.3355%" height="15" fill="rgb(221,76,26)" fg:x="3998733673" fg:w="23591070"/><text x="57.1138%" y="287.50"></text></g><g><title>mem_cgroup_try_charge (17,658,053 samples, 0.25%)</title><rect x="56.9482%" y="261" width="0.2511%" height="15" fill="rgb(225,139,18)" fg:x="4004666690" fg:w="17658053"/><text x="57.1982%" y="271.50"></text></g><g><title>try_charge (11,765,546 samples, 0.17%)</title><rect x="57.0320%" y="245" width="0.1673%" height="15" fill="rgb(230,137,11)" fg:x="4010559197" fg:w="11765546"/><text x="57.2820%" y="255.50"></text></g><g><title>page_counter_try_charge (3,104,783 samples, 0.04%)</title><rect x="57.1552%" y="229" width="0.0442%" height="15" fill="rgb(212,28,1)" fg:x="4019219960" fg:w="3104783"/><text x="57.4052%" y="239.50"></text></g><g><title>propagate_protected_usage (3,104,783 samples, 0.04%)</title><rect x="57.1552%" y="213" width="0.0442%" height="15" fill="rgb(248,164,17)" fg:x="4019219960" fg:w="3104783"/><text x="57.4052%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (101,340,902 samples, 1.44%)</title><rect x="56.1402%" y="421" width="1.4411%" height="15" fill="rgb(222,171,42)" fg:x="3947845777" fg:w="101340902"/><text x="56.3902%" y="431.50"></text></g><g><title>core::ptr::write (101,340,902 samples, 1.44%)</title><rect x="56.1402%" y="405" width="1.4411%" height="15" fill="rgb(243,84,45)" fg:x="3947845777" fg:w="101340902"/><text x="56.3902%" y="415.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (26,861,936 samples, 0.38%)</title><rect x="57.1993%" y="389" width="0.3820%" height="15" fill="rgb(252,49,23)" fg:x="4022324743" fg:w="26861936"/><text x="57.4493%" y="399.50"></text></g><g><title>prepare_exit_to_usermode (11,821,194 samples, 0.17%)</title><rect x="57.4132%" y="373" width="0.1681%" height="15" fill="rgb(215,19,7)" fg:x="4037365485" fg:w="11821194"/><text x="57.6632%" y="383.50"></text></g><g><title>tlb_finish_mmu (5,020,927 samples, 0.07%)</title><rect x="57.5813%" y="229" width="0.0714%" height="15" fill="rgb(238,81,41)" fg:x="4049186679" fg:w="5020927"/><text x="57.8313%" y="239.50"></text></g><g><title>tlb_flush_mmu (5,020,927 samples, 0.07%)</title><rect x="57.5813%" y="213" width="0.0714%" height="15" fill="rgb(210,199,37)" fg:x="4049186679" fg:w="5020927"/><text x="57.8313%" y="223.50"></text></g><g><title>free_pages_and_swap_cache (5,020,927 samples, 0.07%)</title><rect x="57.5813%" y="197" width="0.0714%" height="15" fill="rgb(244,192,49)" fg:x="4049186679" fg:w="5020927"/><text x="57.8313%" y="207.50"></text></g><g><title>release_pages (2,520,240 samples, 0.04%)</title><rect x="57.6169%" y="181" width="0.0358%" height="15" fill="rgb(226,211,11)" fg:x="4051687366" fg:w="2520240"/><text x="57.8669%" y="191.50"></text></g><g><title>free_unref_page_list (2,520,240 samples, 0.04%)</title><rect x="57.6169%" y="165" width="0.0358%" height="15" fill="rgb(236,162,54)" fg:x="4051687366" fg:w="2520240"/><text x="57.8669%" y="175.50"></text></g><g><title>free_unref_page_commit (2,520,240 samples, 0.04%)</title><rect x="57.6169%" y="149" width="0.0358%" height="15" fill="rgb(220,229,9)" fg:x="4051687366" fg:w="2520240"/><text x="57.8669%" y="159.50"></text></g><g><title>free_pcppages_bulk (2,520,240 samples, 0.04%)</title><rect x="57.6169%" y="133" width="0.0358%" height="15" fill="rgb(250,87,22)" fg:x="4051687366" fg:w="2520240"/><text x="57.8669%" y="143.50"></text></g><g><title>page_remove_rmap (2,703,484 samples, 0.04%)</title><rect x="57.6928%" y="165" width="0.0384%" height="15" fill="rgb(239,43,17)" fg:x="4057030314" fg:w="2703484"/><text x="57.9428%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;QUEUE_TEST::csvreader::Rec&gt;&gt; (16,073,136 samples, 0.23%)</title><rect x="57.5813%" y="421" width="0.2286%" height="15" fill="rgb(231,177,25)" fg:x="4049186679" fg:w="16073136"/><text x="57.8313%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;QUEUE_TEST::csvreader::Rec&gt;&gt; (16,073,136 samples, 0.23%)</title><rect x="57.5813%" y="405" width="0.2286%" height="15" fill="rgb(219,179,1)" fg:x="4049186679" fg:w="16073136"/><text x="57.8313%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16,073,136 samples, 0.23%)</title><rect x="57.5813%" y="389" width="0.2286%" height="15" fill="rgb(238,219,53)" fg:x="4049186679" fg:w="16073136"/><text x="57.8313%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16,073,136 samples, 0.23%)</title><rect x="57.5813%" y="373" width="0.2286%" height="15" fill="rgb(232,167,36)" fg:x="4049186679" fg:w="16073136"/><text x="57.8313%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (16,073,136 samples, 0.23%)</title><rect x="57.5813%" y="357" width="0.2286%" height="15" fill="rgb(244,19,51)" fg:x="4049186679" fg:w="16073136"/><text x="57.8313%" y="367.50"></text></g><g><title>__GI_munmap (16,073,136 samples, 0.23%)</title><rect x="57.5813%" y="341" width="0.2286%" height="15" fill="rgb(224,6,22)" fg:x="4049186679" fg:w="16073136"/><text x="57.8313%" y="351.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (16,073,136 samples, 0.23%)</title><rect x="57.5813%" y="325" width="0.2286%" height="15" fill="rgb(224,145,5)" fg:x="4049186679" fg:w="16073136"/><text x="57.8313%" y="335.50"></text></g><g><title>do_syscall_64 (16,073,136 samples, 0.23%)</title><rect x="57.5813%" y="309" width="0.2286%" height="15" fill="rgb(234,130,49)" fg:x="4049186679" fg:w="16073136"/><text x="57.8313%" y="319.50"></text></g><g><title>__x64_sys_munmap (16,073,136 samples, 0.23%)</title><rect x="57.5813%" y="293" width="0.2286%" height="15" fill="rgb(254,6,2)" fg:x="4049186679" fg:w="16073136"/><text x="57.8313%" y="303.50"></text></g><g><title>__vm_munmap (16,073,136 samples, 0.23%)</title><rect x="57.5813%" y="277" width="0.2286%" height="15" fill="rgb(208,96,46)" fg:x="4049186679" fg:w="16073136"/><text x="57.8313%" y="287.50"></text></g><g><title>__do_munmap (16,073,136 samples, 0.23%)</title><rect x="57.5813%" y="261" width="0.2286%" height="15" fill="rgb(239,3,39)" fg:x="4049186679" fg:w="16073136"/><text x="57.8313%" y="271.50"></text></g><g><title>unmap_region (16,073,136 samples, 0.23%)</title><rect x="57.5813%" y="245" width="0.2286%" height="15" fill="rgb(233,210,1)" fg:x="4049186679" fg:w="16073136"/><text x="57.8313%" y="255.50"></text></g><g><title>unmap_vmas (11,052,209 samples, 0.16%)</title><rect x="57.6527%" y="229" width="0.1572%" height="15" fill="rgb(244,137,37)" fg:x="4054207606" fg:w="11052209"/><text x="57.9027%" y="239.50"></text></g><g><title>unmap_single_vma (11,052,209 samples, 0.16%)</title><rect x="57.6527%" y="213" width="0.1572%" height="15" fill="rgb(240,136,2)" fg:x="4054207606" fg:w="11052209"/><text x="57.9027%" y="223.50"></text></g><g><title>unmap_page_range (11,052,209 samples, 0.16%)</title><rect x="57.6527%" y="197" width="0.1572%" height="15" fill="rgb(239,18,37)" fg:x="4054207606" fg:w="11052209"/><text x="57.9027%" y="207.50"></text></g><g><title>zap_pte_range.isra.0 (11,052,209 samples, 0.16%)</title><rect x="57.6527%" y="181" width="0.1572%" height="15" fill="rgb(218,185,22)" fg:x="4054207606" fg:w="11052209"/><text x="57.9027%" y="191.50"></text></g><g><title>tlb_flush_mmu (5,526,017 samples, 0.08%)</title><rect x="57.7313%" y="165" width="0.0786%" height="15" fill="rgb(225,218,4)" fg:x="4059733798" fg:w="5526017"/><text x="57.9813%" y="175.50"></text></g><g><title>free_pages_and_swap_cache (5,526,017 samples, 0.08%)</title><rect x="57.7313%" y="149" width="0.0786%" height="15" fill="rgb(230,182,32)" fg:x="4059733798" fg:w="5526017"/><text x="57.9813%" y="159.50"></text></g><g><title>release_pages (2,828,273 samples, 0.04%)</title><rect x="57.7697%" y="133" width="0.0402%" height="15" fill="rgb(242,56,43)" fg:x="4062431542" fg:w="2828273"/><text x="58.0197%" y="143.50"></text></g><g><title>mem_cgroup_update_lru_size (2,828,273 samples, 0.04%)</title><rect x="57.7697%" y="117" width="0.0402%" height="15" fill="rgb(233,99,24)" fg:x="4062431542" fg:w="2828273"/><text x="58.0197%" y="127.50"></text></g><g><title>tlb_finish_mmu (19,408,174 samples, 0.28%)</title><rect x="57.8099%" y="181" width="0.2760%" height="15" fill="rgb(234,209,42)" fg:x="4065259815" fg:w="19408174"/><text x="58.0599%" y="191.50"></text></g><g><title>tlb_flush_mmu (19,408,174 samples, 0.28%)</title><rect x="57.8099%" y="165" width="0.2760%" height="15" fill="rgb(227,7,12)" fg:x="4065259815" fg:w="19408174"/><text x="58.0599%" y="175.50"></text></g><g><title>free_pages_and_swap_cache (19,408,174 samples, 0.28%)</title><rect x="57.8099%" y="149" width="0.2760%" height="15" fill="rgb(245,203,43)" fg:x="4065259815" fg:w="19408174"/><text x="58.0599%" y="159.50"></text></g><g><title>release_pages (19,408,174 samples, 0.28%)</title><rect x="57.8099%" y="133" width="0.2760%" height="15" fill="rgb(238,205,33)" fg:x="4065259815" fg:w="19408174"/><text x="58.0599%" y="143.50"></text></g><g><title>free_unref_page_list (16,603,390 samples, 0.24%)</title><rect x="57.8498%" y="117" width="0.2361%" height="15" fill="rgb(231,56,7)" fg:x="4068064599" fg:w="16603390"/><text x="58.0998%" y="127.50"></text></g><g><title>free_unref_page_commit (11,096,130 samples, 0.16%)</title><rect x="57.9281%" y="101" width="0.1578%" height="15" fill="rgb(244,186,29)" fg:x="4073571859" fg:w="11096130"/><text x="58.1781%" y="111.50"></text></g><g><title>free_pcppages_bulk (8,328,551 samples, 0.12%)</title><rect x="57.9674%" y="85" width="0.1184%" height="15" fill="rgb(234,111,31)" fg:x="4076339438" fg:w="8328551"/><text x="58.2174%" y="95.50"></text></g><g><title>QUEUE_TEST::main (2,965,188,036 samples, 42.17%)</title><rect x="15.9585%" y="437" width="42.1663%" height="15" fill="rgb(241,149,10)" fg:x="1122218926" fg:w="2965188036"/><text x="16.2085%" y="447.50">QUEUE_TEST::main</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;QUEUE_TEST::KeyVal&gt;&gt;&gt; (22,147,147 samples, 0.31%)</title><rect x="57.8099%" y="421" width="0.3149%" height="15" fill="rgb(249,206,44)" fg:x="4065259815" fg:w="22147147"/><text x="58.0599%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22,147,147 samples, 0.31%)</title><rect x="57.8099%" y="405" width="0.3149%" height="15" fill="rgb(251,153,30)" fg:x="4065259815" fg:w="22147147"/><text x="58.0599%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;QUEUE_TEST::KeyVal&gt;]&gt; (22,147,147 samples, 0.31%)</title><rect x="57.8099%" y="389" width="0.3149%" height="15" fill="rgb(239,152,38)" fg:x="4065259815" fg:w="22147147"/><text x="58.0599%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;QUEUE_TEST::KeyVal&gt;&gt; (22,147,147 samples, 0.31%)</title><rect x="57.8099%" y="373" width="0.3149%" height="15" fill="rgb(249,139,47)" fg:x="4065259815" fg:w="22147147"/><text x="58.0599%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;QUEUE_TEST::KeyVal&gt;&gt; (22,147,147 samples, 0.31%)</title><rect x="57.8099%" y="357" width="0.3149%" height="15" fill="rgb(244,64,35)" fg:x="4065259815" fg:w="22147147"/><text x="58.0599%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22,147,147 samples, 0.31%)</title><rect x="57.8099%" y="341" width="0.3149%" height="15" fill="rgb(216,46,15)" fg:x="4065259815" fg:w="22147147"/><text x="58.0599%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (22,147,147 samples, 0.31%)</title><rect x="57.8099%" y="325" width="0.3149%" height="15" fill="rgb(250,74,19)" fg:x="4065259815" fg:w="22147147"/><text x="58.0599%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (22,147,147 samples, 0.31%)</title><rect x="57.8099%" y="309" width="0.3149%" height="15" fill="rgb(249,42,33)" fg:x="4065259815" fg:w="22147147"/><text x="58.0599%" y="319.50"></text></g><g><title>__GI_munmap (22,147,147 samples, 0.31%)</title><rect x="57.8099%" y="293" width="0.3149%" height="15" fill="rgb(242,149,17)" fg:x="4065259815" fg:w="22147147"/><text x="58.0599%" y="303.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (22,147,147 samples, 0.31%)</title><rect x="57.8099%" y="277" width="0.3149%" height="15" fill="rgb(244,29,21)" fg:x="4065259815" fg:w="22147147"/><text x="58.0599%" y="287.50"></text></g><g><title>do_syscall_64 (22,147,147 samples, 0.31%)</title><rect x="57.8099%" y="261" width="0.3149%" height="15" fill="rgb(220,130,37)" fg:x="4065259815" fg:w="22147147"/><text x="58.0599%" y="271.50"></text></g><g><title>__x64_sys_munmap (22,147,147 samples, 0.31%)</title><rect x="57.8099%" y="245" width="0.3149%" height="15" fill="rgb(211,67,2)" fg:x="4065259815" fg:w="22147147"/><text x="58.0599%" y="255.50"></text></g><g><title>__vm_munmap (22,147,147 samples, 0.31%)</title><rect x="57.8099%" y="229" width="0.3149%" height="15" fill="rgb(235,68,52)" fg:x="4065259815" fg:w="22147147"/><text x="58.0599%" y="239.50"></text></g><g><title>__do_munmap (22,147,147 samples, 0.31%)</title><rect x="57.8099%" y="213" width="0.3149%" height="15" fill="rgb(246,142,3)" fg:x="4065259815" fg:w="22147147"/><text x="58.0599%" y="223.50"></text></g><g><title>unmap_region (22,147,147 samples, 0.31%)</title><rect x="57.8099%" y="197" width="0.3149%" height="15" fill="rgb(241,25,7)" fg:x="4065259815" fg:w="22147147"/><text x="58.0599%" y="207.50"></text></g><g><title>unmap_vmas (2,738,973 samples, 0.04%)</title><rect x="58.0859%" y="181" width="0.0389%" height="15" fill="rgb(242,119,39)" fg:x="4084667989" fg:w="2738973"/><text x="58.3359%" y="191.50"></text></g><g><title>unmap_single_vma (2,738,973 samples, 0.04%)</title><rect x="58.0859%" y="165" width="0.0389%" height="15" fill="rgb(241,98,45)" fg:x="4084667989" fg:w="2738973"/><text x="58.3359%" y="175.50"></text></g><g><title>unmap_page_range (2,738,973 samples, 0.04%)</title><rect x="58.0859%" y="149" width="0.0389%" height="15" fill="rgb(254,28,30)" fg:x="4084667989" fg:w="2738973"/><text x="58.3359%" y="159.50"></text></g><g><title>zap_pte_range.isra.0 (2,738,973 samples, 0.04%)</title><rect x="58.0859%" y="133" width="0.0389%" height="15" fill="rgb(241,142,54)" fg:x="4084667989" fg:w="2738973"/><text x="58.3359%" y="143.50"></text></g><g><title>page_remove_rmap (2,738,973 samples, 0.04%)</title><rect x="58.0859%" y="117" width="0.0389%" height="15" fill="rgb(222,85,15)" fg:x="4084667989" fg:w="2738973"/><text x="58.3359%" y="127.50"></text></g><g><title>[unknown] (3,150,124 samples, 0.04%)</title><rect x="58.1248%" y="437" width="0.0448%" height="15" fill="rgb(210,85,47)" fg:x="4087406962" fg:w="3150124"/><text x="58.3748%" y="447.50"></text></g><g><title>__libc_read (3,150,124 samples, 0.04%)</title><rect x="58.1248%" y="421" width="0.0448%" height="15" fill="rgb(224,206,25)" fg:x="4087406962" fg:w="3150124"/><text x="58.3748%" y="431.50"></text></g><g><title>error_entry (3,150,124 samples, 0.04%)</title><rect x="58.1248%" y="405" width="0.0448%" height="15" fill="rgb(243,201,19)" fg:x="4087406962" fg:w="3150124"/><text x="58.3748%" y="415.50"></text></g><g><title>_start (3,274,634 samples, 0.05%)</title><rect x="58.1696%" y="437" width="0.0466%" height="15" fill="rgb(236,59,4)" fg:x="4090557086" fg:w="3274634"/><text x="58.4196%" y="447.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3,274,634 samples, 0.05%)</title><rect x="58.1696%" y="421" width="0.0466%" height="15" fill="rgb(254,179,45)" fg:x="4090557086" fg:w="3274634"/><text x="58.4196%" y="431.50"></text></g><g><title>do_syscall_64 (3,274,634 samples, 0.05%)</title><rect x="58.1696%" y="405" width="0.0466%" height="15" fill="rgb(226,14,10)" fg:x="4090557086" fg:w="3274634"/><text x="58.4196%" y="415.50"></text></g><g><title>__x64_sys_execve (3,274,634 samples, 0.05%)</title><rect x="58.1696%" y="389" width="0.0466%" height="15" fill="rgb(244,27,41)" fg:x="4090557086" fg:w="3274634"/><text x="58.4196%" y="399.50"></text></g><g><title>__do_execve_file.isra.0 (3,274,634 samples, 0.05%)</title><rect x="58.1696%" y="373" width="0.0466%" height="15" fill="rgb(235,35,32)" fg:x="4090557086" fg:w="3274634"/><text x="58.4196%" y="383.50"></text></g><g><title>acct_update_integrals (3,274,634 samples, 0.05%)</title><rect x="58.1696%" y="357" width="0.0466%" height="15" fill="rgb(218,68,31)" fg:x="4090557086" fg:w="3274634"/><text x="58.4196%" y="367.50"></text></g><g><title>page_fault (6,172,542 samples, 0.09%)</title><rect x="58.2162%" y="325" width="0.0878%" height="15" fill="rgb(207,120,37)" fg:x="4093831720" fg:w="6172542"/><text x="58.4662%" y="335.50"></text></g><g><title>do_page_fault (6,172,542 samples, 0.09%)</title><rect x="58.2162%" y="309" width="0.0878%" height="15" fill="rgb(227,98,0)" fg:x="4093831720" fg:w="6172542"/><text x="58.4662%" y="319.50"></text></g><g><title>__do_page_fault (6,172,542 samples, 0.09%)</title><rect x="58.2162%" y="293" width="0.0878%" height="15" fill="rgb(207,7,3)" fg:x="4093831720" fg:w="6172542"/><text x="58.4662%" y="303.50"></text></g><g><title>do_user_addr_fault (6,172,542 samples, 0.09%)</title><rect x="58.2162%" y="277" width="0.0878%" height="15" fill="rgb(206,98,19)" fg:x="4093831720" fg:w="6172542"/><text x="58.4662%" y="287.50"></text></g><g><title>handle_mm_fault (6,172,542 samples, 0.09%)</title><rect x="58.2162%" y="261" width="0.0878%" height="15" fill="rgb(217,5,26)" fg:x="4093831720" fg:w="6172542"/><text x="58.4662%" y="271.50"></text></g><g><title>__handle_mm_fault (6,172,542 samples, 0.09%)</title><rect x="58.2162%" y="245" width="0.0878%" height="15" fill="rgb(235,190,38)" fg:x="4093831720" fg:w="6172542"/><text x="58.4662%" y="255.50"></text></g><g><title>do_anonymous_page (6,172,542 samples, 0.09%)</title><rect x="58.2162%" y="229" width="0.0878%" height="15" fill="rgb(247,86,24)" fg:x="4093831720" fg:w="6172542"/><text x="58.4662%" y="239.50"></text></g><g><title>alloc_pages_vma (3,063,492 samples, 0.04%)</title><rect x="58.2604%" y="213" width="0.0436%" height="15" fill="rgb(205,101,16)" fg:x="4096940770" fg:w="3063492"/><text x="58.5104%" y="223.50"></text></g><g><title>__alloc_pages_nodemask (3,063,492 samples, 0.04%)</title><rect x="58.2604%" y="197" width="0.0436%" height="15" fill="rgb(246,168,33)" fg:x="4096940770" fg:w="3063492"/><text x="58.5104%" y="207.50"></text></g><g><title>get_page_from_freelist (3,063,492 samples, 0.04%)</title><rect x="58.2604%" y="181" width="0.0436%" height="15" fill="rgb(231,114,1)" fg:x="4096940770" fg:w="3063492"/><text x="58.5104%" y="191.50"></text></g><g><title>clear_page_erms (3,063,492 samples, 0.04%)</title><rect x="58.2604%" y="165" width="0.0436%" height="15" fill="rgb(207,184,53)" fg:x="4096940770" fg:w="3063492"/><text x="58.5104%" y="175.50"></text></g><g><title>_int_realloc (12,197,357 samples, 0.17%)</title><rect x="58.2162%" y="357" width="0.1735%" height="15" fill="rgb(224,95,51)" fg:x="4093831720" fg:w="12197357"/><text x="58.4662%" y="367.50"></text></g><g><title>__memmove_avx_unaligned_erms (12,197,357 samples, 0.17%)</title><rect x="58.2162%" y="341" width="0.1735%" height="15" fill="rgb(212,188,45)" fg:x="4093831720" fg:w="12197357"/><text x="58.4662%" y="351.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (6,024,815 samples, 0.09%)</title><rect x="58.3040%" y="325" width="0.0857%" height="15" fill="rgb(223,154,38)" fg:x="4100004262" fg:w="6024815"/><text x="58.5540%" y="335.50"></text></g><g><title>prepare_exit_to_usermode (6,024,815 samples, 0.09%)</title><rect x="58.3040%" y="309" width="0.0857%" height="15" fill="rgb(251,22,52)" fg:x="4100004262" fg:w="6024815"/><text x="58.5540%" y="319.50"></text></g><g><title>find_vma (5,864,961 samples, 0.08%)</title><rect x="58.3896%" y="229" width="0.0834%" height="15" fill="rgb(229,209,22)" fg:x="4106029077" fg:w="5864961"/><text x="58.6396%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (21,097,246 samples, 0.30%)</title><rect x="58.2162%" y="437" width="0.3000%" height="15" fill="rgb(234,138,34)" fg:x="4093831720" fg:w="21097246"/><text x="58.4662%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (21,097,246 samples, 0.30%)</title><rect x="58.2162%" y="421" width="0.3000%" height="15" fill="rgb(212,95,11)" fg:x="4093831720" fg:w="21097246"/><text x="58.4662%" y="431.50"></text></g><g><title>alloc::alloc::Global::grow_impl (21,097,246 samples, 0.30%)</title><rect x="58.2162%" y="405" width="0.3000%" height="15" fill="rgb(240,179,47)" fg:x="4093831720" fg:w="21097246"/><text x="58.4662%" y="415.50"></text></g><g><title>alloc::alloc::realloc (21,097,246 samples, 0.30%)</title><rect x="58.2162%" y="389" width="0.3000%" height="15" fill="rgb(240,163,11)" fg:x="4093831720" fg:w="21097246"/><text x="58.4662%" y="399.50"></text></g><g><title>__GI___libc_realloc (21,097,246 samples, 0.30%)</title><rect x="58.2162%" y="373" width="0.3000%" height="15" fill="rgb(236,37,12)" fg:x="4093831720" fg:w="21097246"/><text x="58.4662%" y="383.50"></text></g><g><title>mremap_chunk (8,899,889 samples, 0.13%)</title><rect x="58.3896%" y="357" width="0.1266%" height="15" fill="rgb(232,164,16)" fg:x="4106029077" fg:w="8899889"/><text x="58.6396%" y="367.50"></text></g><g><title>__GI___mremap (8,899,889 samples, 0.13%)</title><rect x="58.3896%" y="341" width="0.1266%" height="15" fill="rgb(244,205,15)" fg:x="4106029077" fg:w="8899889"/><text x="58.6396%" y="351.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (8,899,889 samples, 0.13%)</title><rect x="58.3896%" y="325" width="0.1266%" height="15" fill="rgb(223,117,47)" fg:x="4106029077" fg:w="8899889"/><text x="58.6396%" y="335.50"></text></g><g><title>do_syscall_64 (8,899,889 samples, 0.13%)</title><rect x="58.3896%" y="309" width="0.1266%" height="15" fill="rgb(244,107,35)" fg:x="4106029077" fg:w="8899889"/><text x="58.6396%" y="319.50"></text></g><g><title>__x64_sys_mremap (8,899,889 samples, 0.13%)</title><rect x="58.3896%" y="293" width="0.1266%" height="15" fill="rgb(205,140,8)" fg:x="4106029077" fg:w="8899889"/><text x="58.6396%" y="303.50"></text></g><g><title>move_vma (8,899,889 samples, 0.13%)</title><rect x="58.3896%" y="277" width="0.1266%" height="15" fill="rgb(228,84,46)" fg:x="4106029077" fg:w="8899889"/><text x="58.6396%" y="287.50"></text></g><g><title>do_munmap (8,899,889 samples, 0.13%)</title><rect x="58.3896%" y="261" width="0.1266%" height="15" fill="rgb(254,188,9)" fg:x="4106029077" fg:w="8899889"/><text x="58.6396%" y="271.50"></text></g><g><title>__do_munmap (8,899,889 samples, 0.13%)</title><rect x="58.3896%" y="245" width="0.1266%" height="15" fill="rgb(206,112,54)" fg:x="4106029077" fg:w="8899889"/><text x="58.6396%" y="255.50"></text></g><g><title>unmap_region (3,034,928 samples, 0.04%)</title><rect x="58.4730%" y="229" width="0.0432%" height="15" fill="rgb(216,84,49)" fg:x="4111894038" fg:w="3034928"/><text x="58.7230%" y="239.50"></text></g><g><title>unmap_vmas (3,034,928 samples, 0.04%)</title><rect x="58.4730%" y="213" width="0.0432%" height="15" fill="rgb(214,194,35)" fg:x="4111894038" fg:w="3034928"/><text x="58.7230%" y="223.50"></text></g><g><title>unmap_single_vma (3,034,928 samples, 0.04%)</title><rect x="58.4730%" y="197" width="0.0432%" height="15" fill="rgb(249,28,3)" fg:x="4111894038" fg:w="3034928"/><text x="58.7230%" y="207.50"></text></g><g><title>unmap_page_range (3,034,928 samples, 0.04%)</title><rect x="58.4730%" y="181" width="0.0432%" height="15" fill="rgb(222,56,52)" fg:x="4111894038" fg:w="3034928"/><text x="58.7230%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5,840,119 samples, 0.08%)</title><rect x="58.5162%" y="437" width="0.0830%" height="15" fill="rgb(245,217,50)" fg:x="4114928966" fg:w="5840119"/><text x="58.7662%" y="447.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (5,840,119 samples, 0.08%)</title><rect x="58.5162%" y="421" width="0.0830%" height="15" fill="rgb(213,201,24)" fg:x="4114928966" fg:w="5840119"/><text x="58.7662%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5,840,119 samples, 0.08%)</title><rect x="58.5162%" y="405" width="0.0830%" height="15" fill="rgb(248,116,28)" fg:x="4114928966" fg:w="5840119"/><text x="58.7662%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5,840,119 samples, 0.08%)</title><rect x="58.5162%" y="389" width="0.0830%" height="15" fill="rgb(219,72,43)" fg:x="4114928966" fg:w="5840119"/><text x="58.7662%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5,840,119 samples, 0.08%)</title><rect x="58.5162%" y="373" width="0.0830%" height="15" fill="rgb(209,138,14)" fg:x="4114928966" fg:w="5840119"/><text x="58.7662%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5,840,119 samples, 0.08%)</title><rect x="58.5162%" y="357" width="0.0830%" height="15" fill="rgb(222,18,33)" fg:x="4114928966" fg:w="5840119"/><text x="58.7662%" y="367.50"></text></g><g><title>core::num::dec2flt::biased_fp_to_float (14,350,744 samples, 0.20%)</title><rect x="61.8790%" y="405" width="0.2041%" height="15" fill="rgb(213,199,7)" fg:x="4351405024" fg:w="14350744"/><text x="62.1290%" y="415.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64_bits (11,517,255 samples, 0.16%)</title><rect x="61.9193%" y="389" width="0.1638%" height="15" fill="rgb(250,110,10)" fg:x="4354238513" fg:w="11517255"/><text x="62.1693%" y="399.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::from_bits (11,517,255 samples, 0.16%)</title><rect x="61.9193%" y="373" width="0.1638%" height="15" fill="rgb(248,123,6)" fg:x="4354238513" fg:w="11517255"/><text x="62.1693%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::from_bits::rt_u64_to_f64 (11,517,255 samples, 0.16%)</title><rect x="61.9193%" y="357" width="0.1638%" height="15" fill="rgb(206,91,31)" fg:x="4354238513" fg:w="11517255"/><text x="62.1693%" y="367.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (20,627,409 samples, 0.29%)</title><rect x="62.0831%" y="389" width="0.2933%" height="15" fill="rgb(211,154,13)" fg:x="4365755768" fg:w="20627409"/><text x="62.3331%" y="399.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (8,716,242 samples, 0.12%)</title><rect x="62.3764%" y="389" width="0.1239%" height="15" fill="rgb(225,148,7)" fg:x="4386383177" fg:w="8716242"/><text x="62.6264%" y="399.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (58,288,903 samples, 0.83%)</title><rect x="62.0831%" y="405" width="0.8289%" height="15" fill="rgb(220,160,43)" fg:x="4365755768" fg:w="58288903"/><text x="62.3331%" y="415.50"></text></g><g><title>core::num::dec2flt::number::Number::is_fast_path (28,945,252 samples, 0.41%)</title><rect x="62.5003%" y="389" width="0.4116%" height="15" fill="rgb(213,52,39)" fg:x="4395099419" fg:w="28945252"/><text x="62.7503%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (8,576,650 samples, 0.12%)</title><rect x="62.9120%" y="405" width="0.1220%" height="15" fill="rgb(243,137,7)" fg:x="4424044671" fg:w="8576650"/><text x="63.1620%" y="415.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (8,576,650 samples, 0.12%)</title><rect x="62.9120%" y="389" width="0.1220%" height="15" fill="rgb(230,79,13)" fg:x="4424044671" fg:w="8576650"/><text x="63.1620%" y="399.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (321,284,420 samples, 4.57%)</title><rect x="58.5992%" y="437" width="4.5688%" height="15" fill="rgb(247,105,23)" fg:x="4120769085" fg:w="321284420"/><text x="58.8492%" y="447.50">core:..</text></g><g><title>core::num::dec2flt::dec2flt (217,107,351 samples, 3.09%)</title><rect x="60.0807%" y="421" width="3.0874%" height="15" fill="rgb(223,179,41)" fg:x="4224946154" fg:w="217107351"/><text x="60.3307%" y="431.50">cor..</text></g><g><title>core::slice::&lt;impl [T]&gt;::first (9,432,184 samples, 0.13%)</title><rect x="63.0339%" y="405" width="0.1341%" height="15" fill="rgb(218,9,34)" fg:x="4432621321" fg:w="9432184"/><text x="63.2839%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (20,151,287 samples, 0.29%)</title><rect x="65.3677%" y="421" width="0.2866%" height="15" fill="rgb(222,106,8)" fg:x="4596732083" fg:w="20151287"/><text x="65.6177%" y="431.50"></text></g><g><title>core::num::dec2flt::lemire::compute_product_approx (28,217,526 samples, 0.40%)</title><rect x="65.6542%" y="421" width="0.4013%" height="15" fill="rgb(211,220,0)" fg:x="4616883370" fg:w="28217526"/><text x="65.9042%" y="431.50"></text></g><g><title>core::num::dec2flt::lemire::full_multiplication (20,000,504 samples, 0.28%)</title><rect x="65.7711%" y="405" width="0.2844%" height="15" fill="rgb(229,52,16)" fg:x="4625100392" fg:w="20000504"/><text x="66.0211%" y="415.50"></text></g><g><title>core::num::dec2flt::lemire::compute_float (208,768,795 samples, 2.97%)</title><rect x="63.1681%" y="437" width="2.9688%" height="15" fill="rgb(212,155,18)" fg:x="4442053505" fg:w="208768795"/><text x="63.4181%" y="447.50">cor..</text></g><g><title>core::num::dec2flt::lemire::power (5,721,404 samples, 0.08%)</title><rect x="66.0555%" y="421" width="0.0814%" height="15" fill="rgb(242,21,14)" fg:x="4645100896" fg:w="5721404"/><text x="66.3055%" y="431.50"></text></g><g><title>core::num::&lt;impl i32&gt;::wrapping_mul (5,721,404 samples, 0.08%)</title><rect x="66.0555%" y="405" width="0.0814%" height="15" fill="rgb(222,19,48)" fg:x="4645100896" fg:w="5721404"/><text x="66.3055%" y="415.50"></text></g><g><title>apic_timer_interrupt (2,858,515 samples, 0.04%)</title><rect x="71.5895%" y="405" width="0.0406%" height="15" fill="rgb(232,45,27)" fg:x="5034262084" fg:w="2858515"/><text x="71.8395%" y="415.50"></text></g><g><title>smp_apic_timer_interrupt (2,858,515 samples, 0.04%)</title><rect x="71.5895%" y="389" width="0.0406%" height="15" fill="rgb(249,103,42)" fg:x="5034262084" fg:w="2858515"/><text x="71.8395%" y="399.50"></text></g><g><title>hrtimer_interrupt (2,858,515 samples, 0.04%)</title><rect x="71.5895%" y="373" width="0.0406%" height="15" fill="rgb(246,81,33)" fg:x="5034262084" fg:w="2858515"/><text x="71.8395%" y="383.50"></text></g><g><title>__hrtimer_run_queues (2,858,515 samples, 0.04%)</title><rect x="71.5895%" y="357" width="0.0406%" height="15" fill="rgb(252,33,42)" fg:x="5034262084" fg:w="2858515"/><text x="71.8395%" y="367.50"></text></g><g><title>tick_sched_timer (2,858,515 samples, 0.04%)</title><rect x="71.5895%" y="341" width="0.0406%" height="15" fill="rgb(209,212,41)" fg:x="5034262084" fg:w="2858515"/><text x="71.8395%" y="351.50"></text></g><g><title>tick_sched_handle (2,858,515 samples, 0.04%)</title><rect x="71.5895%" y="325" width="0.0406%" height="15" fill="rgb(207,154,6)" fg:x="5034262084" fg:w="2858515"/><text x="71.8395%" y="335.50"></text></g><g><title>update_process_times (2,858,515 samples, 0.04%)</title><rect x="71.5895%" y="309" width="0.0406%" height="15" fill="rgb(223,64,47)" fg:x="5034262084" fg:w="2858515"/><text x="71.8395%" y="319.50"></text></g><g><title>scheduler_tick (2,858,515 samples, 0.04%)</title><rect x="71.5895%" y="293" width="0.0406%" height="15" fill="rgb(211,161,38)" fg:x="5034262084" fg:w="2858515"/><text x="71.8395%" y="303.50"></text></g><g><title>task_tick_fair (2,858,515 samples, 0.04%)</title><rect x="71.5895%" y="277" width="0.0406%" height="15" fill="rgb(219,138,40)" fg:x="5034262084" fg:w="2858515"/><text x="71.8395%" y="287.50"></text></g><g><title>update_cfs_group (2,858,515 samples, 0.04%)</title><rect x="71.5895%" y="261" width="0.0406%" height="15" fill="rgb(241,228,46)" fg:x="5034262084" fg:w="2858515"/><text x="71.8395%" y="271.50"></text></g><g><title>core::num::&lt;impl u8&gt;::saturating_sub (103,754,545 samples, 1.48%)</title><rect x="71.6302%" y="405" width="1.4754%" height="15" fill="rgb(223,209,38)" fg:x="5037120599" fg:w="103754545"/><text x="71.8802%" y="415.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (41,473,539 samples, 0.59%)</title><rect x="76.5742%" y="373" width="0.5898%" height="15" fill="rgb(236,164,45)" fg:x="5384791600" fg:w="41473539"/><text x="76.8242%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (49,289,653 samples, 0.70%)</title><rect x="77.4060%" y="357" width="0.7009%" height="15" fill="rgb(231,15,5)" fg:x="5443284505" fg:w="49289653"/><text x="77.6560%" y="367.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (305,278,474 samples, 4.34%)</title><rect x="74.1346%" y="389" width="4.3412%" height="15" fill="rgb(252,35,15)" fg:x="5213232457" fg:w="305278474"/><text x="74.3846%" y="399.50">&lt;[u8]..</text></g><g><title>core::num::dec2flt::parse::try_parse_digits::{{closure}} (92,245,792 samples, 1.31%)</title><rect x="77.1640%" y="373" width="1.3118%" height="15" fill="rgb(248,181,18)" fg:x="5426265139" fg:w="92245792"/><text x="77.4140%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (25,936,773 samples, 0.37%)</title><rect x="78.1069%" y="357" width="0.3688%" height="15" fill="rgb(233,39,42)" fg:x="5492574158" fg:w="25936773"/><text x="78.3569%" y="367.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::read_u64 (28,600,002 samples, 0.41%)</title><rect x="78.4758%" y="389" width="0.4067%" height="15" fill="rgb(238,110,33)" fg:x="5518510931" fg:w="28600002"/><text x="78.7258%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (28,600,002 samples, 0.41%)</title><rect x="78.4758%" y="373" width="0.4067%" height="15" fill="rgb(233,195,10)" fg:x="5518510931" fg:w="28600002"/><text x="78.7258%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (28,600,002 samples, 0.41%)</title><rect x="78.4758%" y="357" width="0.4067%" height="15" fill="rgb(254,105,3)" fg:x="5518510931" fg:w="28600002"/><text x="78.7258%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5,559,983 samples, 0.08%)</title><rect x="78.8825%" y="389" width="0.0791%" height="15" fill="rgb(221,225,9)" fg:x="5547110933" fg:w="5559983"/><text x="79.1325%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (5,800,608 samples, 0.08%)</title><rect x="78.9616%" y="389" width="0.0825%" height="15" fill="rgb(224,227,45)" fg:x="5552670916" fg:w="5800608"/><text x="79.2116%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (28,780,252 samples, 0.41%)</title><rect x="79.2312%" y="373" width="0.4093%" height="15" fill="rgb(229,198,43)" fg:x="5571629517" fg:w="28780252"/><text x="79.4812%" y="383.50"></text></g><g><title>core::num::dec2flt::common::is_8digits (70,642,234 samples, 1.00%)</title><rect x="79.0440%" y="389" width="1.0046%" height="15" fill="rgb(206,209,35)" fg:x="5558471524" fg:w="70642234"/><text x="79.2940%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_sub (28,703,989 samples, 0.41%)</title><rect x="79.6404%" y="373" width="0.4082%" height="15" fill="rgb(245,195,53)" fg:x="5600409769" fg:w="28703989"/><text x="79.8904%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (14,314,733 samples, 0.20%)</title><rect x="80.7411%" y="373" width="0.2036%" height="15" fill="rgb(240,92,26)" fg:x="5677807403" fg:w="14314733"/><text x="80.9911%" y="383.50"></text></g><g><title>apic_timer_interrupt (2,661,162 samples, 0.04%)</title><rect x="80.9068%" y="357" width="0.0378%" height="15" fill="rgb(207,40,23)" fg:x="5689460974" fg:w="2661162"/><text x="81.1568%" y="367.50"></text></g><g><title>smp_apic_timer_interrupt (2,661,162 samples, 0.04%)</title><rect x="80.9068%" y="341" width="0.0378%" height="15" fill="rgb(223,111,35)" fg:x="5689460974" fg:w="2661162"/><text x="81.1568%" y="351.50"></text></g><g><title>hrtimer_interrupt (2,661,162 samples, 0.04%)</title><rect x="80.9068%" y="325" width="0.0378%" height="15" fill="rgb(229,147,28)" fg:x="5689460974" fg:w="2661162"/><text x="81.1568%" y="335.50"></text></g><g><title>__hrtimer_run_queues (2,661,162 samples, 0.04%)</title><rect x="80.9068%" y="309" width="0.0378%" height="15" fill="rgb(211,29,28)" fg:x="5689460974" fg:w="2661162"/><text x="81.1568%" y="319.50"></text></g><g><title>tick_sched_timer (2,661,162 samples, 0.04%)</title><rect x="80.9068%" y="293" width="0.0378%" height="15" fill="rgb(228,72,33)" fg:x="5689460974" fg:w="2661162"/><text x="81.1568%" y="303.50"></text></g><g><title>tick_sched_handle (2,661,162 samples, 0.04%)</title><rect x="80.9068%" y="277" width="0.0378%" height="15" fill="rgb(205,214,31)" fg:x="5689460974" fg:w="2661162"/><text x="81.1568%" y="287.50"></text></g><g><title>update_process_times (2,661,162 samples, 0.04%)</title><rect x="80.9068%" y="261" width="0.0378%" height="15" fill="rgb(224,111,15)" fg:x="5689460974" fg:w="2661162"/><text x="81.1568%" y="271.50"></text></g><g><title>account_process_tick (2,661,162 samples, 0.04%)</title><rect x="80.9068%" y="245" width="0.0378%" height="15" fill="rgb(253,21,26)" fg:x="5689460974" fg:w="2661162"/><text x="81.1568%" y="255.50"></text></g><g><title>account_user_time (2,661,162 samples, 0.04%)</title><rect x="80.9068%" y="229" width="0.0378%" height="15" fill="rgb(245,139,43)" fg:x="5689460974" fg:w="2661162"/><text x="81.1568%" y="239.50"></text></g><g><title>core::num::dec2flt::parse::parse_8digits (120,783,630 samples, 1.72%)</title><rect x="80.0486%" y="389" width="1.7176%" height="15" fill="rgb(252,170,7)" fg:x="5629113758" fg:w="120783630"/><text x="80.2986%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (57,775,252 samples, 0.82%)</title><rect x="80.9446%" y="373" width="0.8216%" height="15" fill="rgb(231,118,14)" fg:x="5692122136" fg:w="57775252"/><text x="81.1946%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (614,879,964 samples, 8.74%)</title><rect x="73.1056%" y="405" width="8.7439%" height="15" fill="rgb(238,83,0)" fg:x="5140875144" fg:w="614879964"/><text x="73.3556%" y="415.50">core::num::d..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5,857,720 samples, 0.08%)</title><rect x="81.7662%" y="389" width="0.0833%" height="15" fill="rgb(221,39,39)" fg:x="5749897388" fg:w="5857720"/><text x="82.0162%" y="399.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5,857,720 samples, 0.08%)</title><rect x="81.7662%" y="373" width="0.0833%" height="15" fill="rgb(222,119,46)" fg:x="5749897388" fg:w="5857720"/><text x="82.0162%" y="383.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (5,857,720 samples, 0.08%)</title><rect x="81.7662%" y="357" width="0.0833%" height="15" fill="rgb(222,165,49)" fg:x="5749897388" fg:w="5857720"/><text x="82.0162%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (5,857,720 samples, 0.08%)</title><rect x="81.7662%" y="341" width="0.0833%" height="15" fill="rgb(219,113,52)" fg:x="5749897388" fg:w="5857720"/><text x="82.0162%" y="351.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (2,838,848 samples, 0.04%)</title><rect x="81.8091%" y="325" width="0.0404%" height="15" fill="rgb(214,7,15)" fg:x="5752916260" fg:w="2838848"/><text x="82.0591%" y="335.50"></text></g><g><title>core::slice::index::get_noubcheck (2,838,848 samples, 0.04%)</title><rect x="81.8091%" y="309" width="0.0404%" height="15" fill="rgb(235,32,4)" fg:x="5752916260" fg:w="2838848"/><text x="82.0591%" y="319.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1,130,908,406 samples, 16.08%)</title><rect x="66.1368%" y="437" width="16.0820%" height="15" fill="rgb(238,90,54)" fg:x="4650822300" fg:w="1130908406"/><text x="66.3868%" y="447.50">core::num::dec2flt::parse..</text></g><g><title>core::num::dec2flt::parse::parse_partial_number (1,030,470,671 samples, 14.65%)</title><rect x="67.5651%" y="421" width="14.6538%" height="15" fill="rgb(213,208,19)" fg:x="4751260035" fg:w="1030470671"/><text x="67.8151%" y="431.50">core::num::dec2flt::pa..</text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (25,975,598 samples, 0.37%)</title><rect x="81.8495%" y="405" width="0.3694%" height="15" fill="rgb(233,156,4)" fg:x="5755755108" fg:w="25975598"/><text x="82.0995%" y="415.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::is_ascii (45,697,697 samples, 0.65%)</title><rect x="82.2625%" y="421" width="0.6498%" height="15" fill="rgb(207,194,5)" fg:x="5784800396" fg:w="45697697"/><text x="82.5125%" y="431.50"></text></g><g><title>core::slice::ascii::is_ascii (45,697,697 samples, 0.65%)</title><rect x="82.2625%" y="405" width="0.6498%" height="15" fill="rgb(206,111,30)" fg:x="5784800396" fg:w="45697697"/><text x="82.5125%" y="415.50"></text></g><g><title>csv::byte_record::ByteRecord::validate (51,875,987 samples, 0.74%)</title><rect x="82.2189%" y="437" width="0.7377%" height="15" fill="rgb(243,70,54)" fg:x="5781730706" fg:w="51875987"/><text x="82.4689%" y="447.50"></text></g><g><title>csv::byte_record::Bounds::end (3,108,600 samples, 0.04%)</title><rect x="82.9124%" y="421" width="0.0442%" height="15" fill="rgb(242,28,8)" fg:x="5830498093" fg:w="3108600"/><text x="83.1624%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3,108,600 samples, 0.04%)</title><rect x="82.9124%" y="405" width="0.0442%" height="15" fill="rgb(219,106,18)" fg:x="5830498093" fg:w="3108600"/><text x="83.1624%" y="415.50"></text></g><g><title>csv::byte_record::Bounds::end::{{closure}} (3,108,600 samples, 0.04%)</title><rect x="82.9124%" y="389" width="0.0442%" height="15" fill="rgb(244,222,10)" fg:x="5830498093" fg:w="3108600"/><text x="83.1624%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3,092,651 samples, 0.04%)</title><rect x="83.2468%" y="421" width="0.0440%" height="15" fill="rgb(236,179,52)" fg:x="5854014887" fg:w="3092651"/><text x="83.4968%" y="431.50"></text></g><g><title>csv::deserializer::deserialize_string_record::{{closure}} (3,092,651 samples, 0.04%)</title><rect x="83.2468%" y="405" width="0.0440%" height="15" fill="rgb(213,23,39)" fg:x="5854014887" fg:w="3092651"/><text x="83.4968%" y="415.50"></text></g><g><title>csv::string_record::StringRecord::iter (3,092,651 samples, 0.04%)</title><rect x="83.2468%" y="389" width="0.0440%" height="15" fill="rgb(238,48,10)" fg:x="5854014887" fg:w="3092651"/><text x="83.4968%" y="399.50"></text></g><g><title>&lt;&amp;csv::string_record::StringRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (3,092,651 samples, 0.04%)</title><rect x="83.2468%" y="373" width="0.0440%" height="15" fill="rgb(251,196,23)" fg:x="5854014887" fg:w="3092651"/><text x="83.4968%" y="383.50"></text></g><g><title>csv::byte_record::ByteRecord::iter (3,092,651 samples, 0.04%)</title><rect x="83.2468%" y="357" width="0.0440%" height="15" fill="rgb(250,152,24)" fg:x="5854014887" fg:w="3092651"/><text x="83.4968%" y="367.50"></text></g><g><title>&lt;&amp;csv::byte_record::ByteRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (3,092,651 samples, 0.04%)</title><rect x="83.2468%" y="341" width="0.0440%" height="15" fill="rgb(209,150,17)" fg:x="5854014887" fg:w="3092651"/><text x="83.4968%" y="351.50"></text></g><g><title>csv::byte_record::ByteRecord::as_slice (3,092,651 samples, 0.04%)</title><rect x="83.2468%" y="325" width="0.0440%" height="15" fill="rgb(234,202,34)" fg:x="5854014887" fg:w="3092651"/><text x="83.4968%" y="335.50"></text></g><g><title>csv::byte_record::Bounds::end (3,092,651 samples, 0.04%)</title><rect x="83.2468%" y="309" width="0.0440%" height="15" fill="rgb(253,148,53)" fg:x="5854014887" fg:w="3092651"/><text x="83.4968%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3,092,651 samples, 0.04%)</title><rect x="83.2468%" y="293" width="0.0440%" height="15" fill="rgb(218,129,16)" fg:x="5854014887" fg:w="3092651"/><text x="83.4968%" y="303.50"></text></g><g><title>csv::byte_record::Bounds::end::{{closure}} (3,092,651 samples, 0.04%)</title><rect x="83.2468%" y="277" width="0.0440%" height="15" fill="rgb(216,85,19)" fg:x="5854014887" fg:w="3092651"/><text x="83.4968%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (8,472,062 samples, 0.12%)</title><rect x="83.2908%" y="421" width="0.1205%" height="15" fill="rgb(235,228,7)" fg:x="5857107538" fg:w="8472062"/><text x="83.5408%" y="431.50"></text></g><g><title>__memmove_avx_unaligned_erms (8,472,062 samples, 0.12%)</title><rect x="83.2908%" y="405" width="0.1205%" height="15" fill="rgb(245,175,0)" fg:x="5857107538" fg:w="8472062"/><text x="83.5408%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2,790,960 samples, 0.04%)</title><rect x="83.4113%" y="341" width="0.0397%" height="15" fill="rgb(208,168,36)" fg:x="5865579600" fg:w="2790960"/><text x="83.6613%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2,790,960 samples, 0.04%)</title><rect x="83.4113%" y="325" width="0.0397%" height="15" fill="rgb(246,171,24)" fg:x="5865579600" fg:w="2790960"/><text x="83.6613%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2,790,960 samples, 0.04%)</title><rect x="83.4113%" y="309" width="0.0397%" height="15" fill="rgb(215,142,24)" fg:x="5865579600" fg:w="2790960"/><text x="83.6613%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2,790,960 samples, 0.04%)</title><rect x="83.4113%" y="293" width="0.0397%" height="15" fill="rgb(250,187,7)" fg:x="5865579600" fg:w="2790960"/><text x="83.6613%" y="303.50"></text></g><g><title>csv::deserializer::deserialize_string_record (37,563,410 samples, 0.53%)</title><rect x="82.9566%" y="437" width="0.5342%" height="15" fill="rgb(228,66,33)" fg:x="5833606693" fg:w="37563410"/><text x="83.2066%" y="447.50"></text></g><g><title>csv::string_record::StringRecord::iter (5,590,503 samples, 0.08%)</title><rect x="83.4113%" y="421" width="0.0795%" height="15" fill="rgb(234,215,21)" fg:x="5865579600" fg:w="5590503"/><text x="83.6613%" y="431.50"></text></g><g><title>&lt;&amp;csv::string_record::StringRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (5,590,503 samples, 0.08%)</title><rect x="83.4113%" y="405" width="0.0795%" height="15" fill="rgb(222,191,20)" fg:x="5865579600" fg:w="5590503"/><text x="83.6613%" y="415.50"></text></g><g><title>csv::byte_record::ByteRecord::iter (5,590,503 samples, 0.08%)</title><rect x="83.4113%" y="389" width="0.0795%" height="15" fill="rgb(245,79,54)" fg:x="5865579600" fg:w="5590503"/><text x="83.6613%" y="399.50"></text></g><g><title>&lt;&amp;csv::byte_record::ByteRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (5,590,503 samples, 0.08%)</title><rect x="83.4113%" y="373" width="0.0795%" height="15" fill="rgb(240,10,37)" fg:x="5865579600" fg:w="5590503"/><text x="83.6613%" y="383.50"></text></g><g><title>csv::byte_record::ByteRecord::as_slice (5,590,503 samples, 0.08%)</title><rect x="83.4113%" y="357" width="0.0795%" height="15" fill="rgb(214,192,32)" fg:x="5865579600" fg:w="5590503"/><text x="83.6613%" y="367.50"></text></g><g><title>csv::byte_record::Bounds::end (2,799,543 samples, 0.04%)</title><rect x="83.4509%" y="341" width="0.0398%" height="15" fill="rgb(209,36,54)" fg:x="5868370560" fg:w="2799543"/><text x="83.7009%" y="351.50"></text></g><g><title>csv::byte_record::Bounds::ends (2,799,543 samples, 0.04%)</title><rect x="83.4509%" y="325" width="0.0398%" height="15" fill="rgb(220,10,11)" fg:x="5868370560" fg:w="2799543"/><text x="83.7009%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2,799,543 samples, 0.04%)</title><rect x="83.4509%" y="309" width="0.0398%" height="15" fill="rgb(221,106,17)" fg:x="5868370560" fg:w="2799543"/><text x="83.7009%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2,799,543 samples, 0.04%)</title><rect x="83.4509%" y="293" width="0.0398%" height="15" fill="rgb(251,142,44)" fg:x="5868370560" fg:w="2799543"/><text x="83.7009%" y="303.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2,799,543 samples, 0.04%)</title><rect x="83.4509%" y="277" width="0.0398%" height="15" fill="rgb(238,13,15)" fg:x="5868370560" fg:w="2799543"/><text x="83.7009%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2,799,543 samples, 0.04%)</title><rect x="83.4509%" y="261" width="0.0398%" height="15" fill="rgb(208,107,27)" fg:x="5868370560" fg:w="2799543"/><text x="83.7009%" y="271.50"></text></g><g><title>&lt;csv_core::reader::DfaState as core::cmp::PartialEq&gt;::eq (9,109,725 samples, 0.13%)</title><rect x="86.5853%" y="405" width="0.1295%" height="15" fill="rgb(205,136,37)" fg:x="6088783200" fg:w="9109725"/><text x="86.8353%" y="415.50"></text></g><g><title>core::cmp::PartialOrd::ge (29,040,569 samples, 0.41%)</title><rect x="86.7149%" y="405" width="0.4130%" height="15" fill="rgb(250,205,27)" fg:x="6097892925" fg:w="29040569"/><text x="86.9649%" y="415.50"></text></g><g><title>&lt;csv_core::reader::DfaState as core::cmp::PartialOrd&gt;::partial_cmp (5,969,070 samples, 0.08%)</title><rect x="87.0429%" y="389" width="0.0849%" height="15" fill="rgb(210,80,43)" fg:x="6120964424" fg:w="5969070"/><text x="87.2929%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::partial_cmp (5,969,070 samples, 0.08%)</title><rect x="87.0429%" y="373" width="0.0849%" height="15" fill="rgb(247,160,36)" fg:x="6120964424" fg:w="5969070"/><text x="87.2929%" y="383.50"></text></g><g><title>core::cmp::PartialOrd::gt (2,862,954 samples, 0.04%)</title><rect x="87.1278%" y="405" width="0.0407%" height="15" fill="rgb(234,13,49)" fg:x="6126933494" fg:w="2862954"/><text x="87.3778%" y="415.50"></text></g><g><title>csv_core::reader::Dfa::get_output (153,762,227 samples, 2.19%)</title><rect x="87.1685%" y="405" width="2.1866%" height="15" fill="rgb(234,122,0)" fg:x="6129796448" fg:w="153762227"/><text x="87.4185%" y="415.50">c..</text></g><g><title>csv_core::reader::Dfa::new_read_record_result (2,874,146 samples, 0.04%)</title><rect x="89.3551%" y="405" width="0.0409%" height="15" fill="rgb(207,146,38)" fg:x="6283558675" fg:w="2874146"/><text x="89.6051%" y="415.50"></text></g><g><title>core::cmp::PartialOrd::ge (2,874,146 samples, 0.04%)</title><rect x="89.3551%" y="389" width="0.0409%" height="15" fill="rgb(207,177,25)" fg:x="6283558675" fg:w="2874146"/><text x="89.6051%" y="399.50"></text></g><g><title>&lt;csv_core::reader::DfaState as core::cmp::PartialOrd&gt;::partial_cmp (2,874,146 samples, 0.04%)</title><rect x="89.3551%" y="373" width="0.0409%" height="15" fill="rgb(211,178,42)" fg:x="6283558675" fg:w="2874146"/><text x="89.6051%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::partial_cmp (2,874,146 samples, 0.04%)</title><rect x="89.3551%" y="357" width="0.0409%" height="15" fill="rgb(230,69,54)" fg:x="6283558675" fg:w="2874146"/><text x="89.6051%" y="367.50"></text></g><g><title>csv_core::reader::Reader::read_record_dfa (1,092,903,715 samples, 15.54%)</title><rect x="83.5740%" y="421" width="15.5416%" height="15" fill="rgb(214,135,41)" fg:x="5877022708" fg:w="1092903715"/><text x="83.8240%" y="431.50">csv_core::reader::Reader..</text></g><g><title>csv_core::reader::DfaClasses::scan_and_copy (683,493,602 samples, 9.72%)</title><rect x="89.3960%" y="405" width="9.7196%" height="15" fill="rgb(237,67,25)" fg:x="6286432821" fg:w="683493602"/><text x="89.6460%" y="415.50">csv_core::read..</text></g><g><title>csv_core::reader::Reader::read_record (1,101,944,664 samples, 15.67%)</title><rect x="83.4908%" y="437" width="15.6702%" height="15" fill="rgb(222,189,50)" fg:x="5871170103" fg:w="1101944664"/><text x="83.7408%" y="447.50">csv_core::reader::Reader..</text></g><g><title>csv_core::reader::Reader::strip_utf8_bom (3,188,344 samples, 0.05%)</title><rect x="99.1156%" y="421" width="0.0453%" height="15" fill="rgb(245,148,34)" fg:x="6969926423" fg:w="3188344"/><text x="99.3656%" y="431.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2,769,015 samples, 0.04%)</title><rect x="99.1609%" y="437" width="0.0394%" height="15" fill="rgb(222,29,6)" fg:x="6973114767" fg:w="2769015"/><text x="99.4109%" y="447.50"></text></g><g><title>do_syscall_64 (2,769,015 samples, 0.04%)</title><rect x="99.1609%" y="421" width="0.0394%" height="15" fill="rgb(221,189,43)" fg:x="6973114767" fg:w="2769015"/><text x="99.4109%" y="431.50"></text></g><g><title>__x64_sys_exit_group (2,769,015 samples, 0.04%)</title><rect x="99.1609%" y="405" width="0.0394%" height="15" fill="rgb(207,36,27)" fg:x="6973114767" fg:w="2769015"/><text x="99.4109%" y="415.50"></text></g><g><title>do_group_exit (2,769,015 samples, 0.04%)</title><rect x="99.1609%" y="389" width="0.0394%" height="15" fill="rgb(217,90,24)" fg:x="6973114767" fg:w="2769015"/><text x="99.4109%" y="399.50"></text></g><g><title>do_exit (2,769,015 samples, 0.04%)</title><rect x="99.1609%" y="373" width="0.0394%" height="15" fill="rgb(224,66,35)" fg:x="6973114767" fg:w="2769015"/><text x="99.4109%" y="383.50"></text></g><g><title>mmput (2,769,015 samples, 0.04%)</title><rect x="99.1609%" y="357" width="0.0394%" height="15" fill="rgb(221,13,50)" fg:x="6973114767" fg:w="2769015"/><text x="99.4109%" y="367.50"></text></g><g><title>exit_mmap (2,769,015 samples, 0.04%)</title><rect x="99.1609%" y="341" width="0.0394%" height="15" fill="rgb(236,68,49)" fg:x="6973114767" fg:w="2769015"/><text x="99.4109%" y="351.50"></text></g><g><title>unmap_vmas (2,769,015 samples, 0.04%)</title><rect x="99.1609%" y="325" width="0.0394%" height="15" fill="rgb(229,146,28)" fg:x="6973114767" fg:w="2769015"/><text x="99.4109%" y="335.50"></text></g><g><title>unmap_single_vma (2,769,015 samples, 0.04%)</title><rect x="99.1609%" y="309" width="0.0394%" height="15" fill="rgb(225,31,38)" fg:x="6973114767" fg:w="2769015"/><text x="99.4109%" y="319.50"></text></g><g><title>unmap_page_range (2,769,015 samples, 0.04%)</title><rect x="99.1609%" y="293" width="0.0394%" height="15" fill="rgb(250,208,3)" fg:x="6973114767" fg:w="2769015"/><text x="99.4109%" y="303.50"></text></g><g><title>zap_pte_range.isra.0 (2,769,015 samples, 0.04%)</title><rect x="99.1609%" y="277" width="0.0394%" height="15" fill="rgb(246,54,23)" fg:x="6973114767" fg:w="2769015"/><text x="99.4109%" y="287.50"></text></g><g><title>page_remove_rmap (2,769,015 samples, 0.04%)</title><rect x="99.1609%" y="261" width="0.0394%" height="15" fill="rgb(243,76,11)" fg:x="6973114767" fg:w="2769015"/><text x="99.4109%" y="271.50"></text></g><g><title>lock_page_memcg (2,769,015 samples, 0.04%)</title><rect x="99.1609%" y="245" width="0.0394%" height="15" fill="rgb(245,21,50)" fg:x="6973114767" fg:w="2769015"/><text x="99.4109%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (3,146,828 samples, 0.04%)</title><rect x="99.2003%" y="421" width="0.0447%" height="15" fill="rgb(228,9,43)" fg:x="6975883782" fg:w="3146828"/><text x="99.4503%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3,146,828 samples, 0.04%)</title><rect x="99.2003%" y="405" width="0.0447%" height="15" fill="rgb(208,100,47)" fg:x="6975883782" fg:w="3146828"/><text x="99.4503%" y="415.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,146,828 samples, 0.04%)</title><rect x="99.2003%" y="389" width="0.0447%" height="15" fill="rgb(232,26,8)" fg:x="6975883782" fg:w="3146828"/><text x="99.4503%" y="399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,146,828 samples, 0.04%)</title><rect x="99.2003%" y="373" width="0.0447%" height="15" fill="rgb(216,166,38)" fg:x="6975883782" fg:w="3146828"/><text x="99.4503%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,146,828 samples, 0.04%)</title><rect x="99.2003%" y="357" width="0.0447%" height="15" fill="rgb(251,202,51)" fg:x="6975883782" fg:w="3146828"/><text x="99.4503%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3,146,828 samples, 0.04%)</title><rect x="99.2003%" y="341" width="0.0447%" height="15" fill="rgb(254,216,34)" fg:x="6975883782" fg:w="3146828"/><text x="99.4503%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,146,828 samples, 0.04%)</title><rect x="99.2003%" y="325" width="0.0447%" height="15" fill="rgb(251,32,27)" fg:x="6975883782" fg:w="3146828"/><text x="99.4503%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5,836,436 samples, 0.08%)</title><rect x="99.2003%" y="437" width="0.0830%" height="15" fill="rgb(208,127,28)" fg:x="6975883782" fg:w="5836436"/><text x="99.4503%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (2,689,608 samples, 0.04%)</title><rect x="99.2450%" y="421" width="0.0382%" height="15" fill="rgb(224,137,22)" fg:x="6979030610" fg:w="2689608"/><text x="99.4950%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2,689,608 samples, 0.04%)</title><rect x="99.2450%" y="405" width="0.0382%" height="15" fill="rgb(254,70,32)" fg:x="6979030610" fg:w="2689608"/><text x="99.4950%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2,925,458 samples, 0.04%)</title><rect x="99.2833%" y="437" width="0.0416%" height="15" fill="rgb(229,75,37)" fg:x="6981720218" fg:w="2925458"/><text x="99.5333%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (2,925,458 samples, 0.04%)</title><rect x="99.2833%" y="421" width="0.0416%" height="15" fill="rgb(252,64,23)" fg:x="6981720218" fg:w="2925458"/><text x="99.5333%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (2,925,458 samples, 0.04%)</title><rect x="99.2833%" y="405" width="0.0416%" height="15" fill="rgb(232,162,48)" fg:x="6981720218" fg:w="2925458"/><text x="99.5333%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (2,925,458 samples, 0.04%)</title><rect x="99.2833%" y="389" width="0.0416%" height="15" fill="rgb(246,160,12)" fg:x="6981720218" fg:w="2925458"/><text x="99.5333%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (2,925,458 samples, 0.04%)</title><rect x="99.2833%" y="373" width="0.0416%" height="15" fill="rgb(247,166,0)" fg:x="6981720218" fg:w="2925458"/><text x="99.5333%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2,925,458 samples, 0.04%)</title><rect x="99.2833%" y="357" width="0.0416%" height="15" fill="rgb(249,219,21)" fg:x="6981720218" fg:w="2925458"/><text x="99.5333%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2,925,458 samples, 0.04%)</title><rect x="99.2833%" y="341" width="0.0416%" height="15" fill="rgb(205,209,3)" fg:x="6981720218" fg:w="2925458"/><text x="99.5333%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,925,458 samples, 0.04%)</title><rect x="99.2833%" y="325" width="0.0416%" height="15" fill="rgb(243,44,1)" fg:x="6981720218" fg:w="2925458"/><text x="99.5333%" y="335.50"></text></g><g><title>main (14,815,627 samples, 0.21%)</title><rect x="99.3249%" y="437" width="0.2107%" height="15" fill="rgb(206,159,16)" fg:x="6984645676" fg:w="14815627"/><text x="99.5749%" y="447.50"></text></g><g><title>QUEUE_TEST::main (14,815,627 samples, 0.21%)</title><rect x="99.3249%" y="421" width="0.2107%" height="15" fill="rgb(244,77,30)" fg:x="6984645676" fg:w="14815627"/><text x="99.5749%" y="431.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (2,952,287 samples, 0.04%)</title><rect x="99.4936%" y="405" width="0.0420%" height="15" fill="rgb(218,69,12)" fg:x="6996509016" fg:w="2952287"/><text x="99.7436%" y="415.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::get (2,952,287 samples, 0.04%)</title><rect x="99.4936%" y="389" width="0.0420%" height="15" fill="rgb(212,87,7)" fg:x="6996509016" fg:w="2952287"/><text x="99.7436%" y="399.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (2,952,287 samples, 0.04%)</title><rect x="99.4936%" y="373" width="0.0420%" height="15" fill="rgb(245,114,25)" fg:x="6996509016" fg:w="2952287"/><text x="99.7436%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (2,952,287 samples, 0.04%)</title><rect x="99.4936%" y="357" width="0.0420%" height="15" fill="rgb(210,61,42)" fg:x="6996509016" fg:w="2952287"/><text x="99.7436%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (2,952,287 samples, 0.04%)</title><rect x="99.4936%" y="341" width="0.0420%" height="15" fill="rgb(211,52,33)" fg:x="6996509016" fg:w="2952287"/><text x="99.7436%" y="351.50"></text></g><g><title>QUEUE_TEST (7,031,776,084 samples, 100.00%)</title><rect x="0.0000%" y="453" width="99.9951%" height="15" fill="rgb(234,58,33)" fg:x="0" fg:w="7031776084"/><text x="0.2500%" y="463.50">QUEUE_TEST</text></g><g><title>page_fault (32,314,781 samples, 0.46%)</title><rect x="99.5356%" y="437" width="0.4595%" height="15" fill="rgb(220,115,36)" fg:x="6999461303" fg:w="32314781"/><text x="99.7856%" y="447.50"></text></g><g><title>all (7,032,119,819 samples, 100%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(243,153,54)" fg:x="0" fg:w="7032119819"/><text x="0.2500%" y="479.50"></text></g></svg></svg>